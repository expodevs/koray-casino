
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Attachment
 * 
 */
export type Attachment = $Result.DefaultSelection<Prisma.$AttachmentPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Menu
 * 
 */
export type Menu = $Result.DefaultSelection<Prisma.$MenuPayload>
/**
 * Model Setting
 * 
 */
export type Setting = $Result.DefaultSelection<Prisma.$SettingPayload>
/**
 * Model Robot
 * 
 */
export type Robot = $Result.DefaultSelection<Prisma.$RobotPayload>
/**
 * Model CategoryCard
 * 
 */
export type CategoryCard = $Result.DefaultSelection<Prisma.$CategoryCardPayload>
/**
 * Model Card
 * 
 */
export type Card = $Result.DefaultSelection<Prisma.$CardPayload>
/**
 * Model Faq
 * 
 */
export type Faq = $Result.DefaultSelection<Prisma.$FaqPayload>
/**
 * Model FaqCard
 * 
 */
export type FaqCard = $Result.DefaultSelection<Prisma.$FaqCardPayload>
/**
 * Model Option
 * 
 */
export type Option = $Result.DefaultSelection<Prisma.$OptionPayload>
/**
 * Model CardOption
 * 
 */
export type CardOption = $Result.DefaultSelection<Prisma.$CardOptionPayload>
/**
 * Model IconCard
 * 
 */
export type IconCard = $Result.DefaultSelection<Prisma.$IconCardPayload>
/**
 * Model IconCardImage
 * 
 */
export type IconCardImage = $Result.DefaultSelection<Prisma.$IconCardImagePayload>
/**
 * Model CardIconImage
 * 
 */
export type CardIconImage = $Result.DefaultSelection<Prisma.$CardIconImagePayload>
/**
 * Model CardImage
 * 
 */
export type CardImage = $Result.DefaultSelection<Prisma.$CardImagePayload>
/**
 * Model Page
 * 
 */
export type Page = $Result.DefaultSelection<Prisma.$PagePayload>
/**
 * Model Builder
 * 
 */
export type Builder = $Result.DefaultSelection<Prisma.$BuilderPayload>
/**
 * Model BuildPage
 * 
 */
export type BuildPage = $Result.DefaultSelection<Prisma.$BuildPagePayload>
/**
 * Model Casino
 * 
 */
export type Casino = $Result.DefaultSelection<Prisma.$CasinoPayload>
/**
 * Model CasinoOption
 * 
 */
export type CasinoOption = $Result.DefaultSelection<Prisma.$CasinoOptionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  admin: 'admin',
  user: 'user'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const MenuType: {
  top: 'top',
  footer_popular_category: 'footer_popular_category',
  footer_information: 'footer_information'
};

export type MenuType = (typeof MenuType)[keyof typeof MenuType]


export const CardType: {
  slot_game: 'slot_game',
  card_game: 'card_game',
  casono_card: 'casono_card',
  cart: 'cart'
};

export type CardType = (typeof CardType)[keyof typeof CardType]


export const InputType: {
  text: 'text',
  password: 'password',
  select: 'select',
  textarea: 'textarea',
  image: 'image'
};

export type InputType = (typeof InputType)[keyof typeof InputType]


export const BuildType: {
  text: 'text',
  textarea: 'textarea',
  htmlEditor: 'htmlEditor',
  categoryCard: 'categoryCard',
  faq: 'faq'
};

export type BuildType = (typeof BuildType)[keyof typeof BuildType]


export const OptionType: {
  card: 'card',
  casino: 'casino'
};

export type OptionType = (typeof OptionType)[keyof typeof OptionType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type MenuType = $Enums.MenuType

export const MenuType: typeof $Enums.MenuType

export type CardType = $Enums.CardType

export const CardType: typeof $Enums.CardType

export type InputType = $Enums.InputType

export const InputType: typeof $Enums.InputType

export type BuildType = $Enums.BuildType

export const BuildType: typeof $Enums.BuildType

export type OptionType = $Enums.OptionType

export const OptionType: typeof $Enums.OptionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Attachments
 * const attachments = await prisma.attachment.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Attachments
   * const attachments = await prisma.attachment.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.attachment`: Exposes CRUD operations for the **Attachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attachments
    * const attachments = await prisma.attachment.findMany()
    * ```
    */
  get attachment(): Prisma.AttachmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.menu`: Exposes CRUD operations for the **Menu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Menus
    * const menus = await prisma.menu.findMany()
    * ```
    */
  get menu(): Prisma.MenuDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.setting`: Exposes CRUD operations for the **Setting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.setting.findMany()
    * ```
    */
  get setting(): Prisma.SettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.robot`: Exposes CRUD operations for the **Robot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Robots
    * const robots = await prisma.robot.findMany()
    * ```
    */
  get robot(): Prisma.RobotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.categoryCard`: Exposes CRUD operations for the **CategoryCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoryCards
    * const categoryCards = await prisma.categoryCard.findMany()
    * ```
    */
  get categoryCard(): Prisma.CategoryCardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.card`: Exposes CRUD operations for the **Card** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cards
    * const cards = await prisma.card.findMany()
    * ```
    */
  get card(): Prisma.CardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.faq`: Exposes CRUD operations for the **Faq** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Faqs
    * const faqs = await prisma.faq.findMany()
    * ```
    */
  get faq(): Prisma.FaqDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.faqCard`: Exposes CRUD operations for the **FaqCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FaqCards
    * const faqCards = await prisma.faqCard.findMany()
    * ```
    */
  get faqCard(): Prisma.FaqCardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.option`: Exposes CRUD operations for the **Option** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Options
    * const options = await prisma.option.findMany()
    * ```
    */
  get option(): Prisma.OptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cardOption`: Exposes CRUD operations for the **CardOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CardOptions
    * const cardOptions = await prisma.cardOption.findMany()
    * ```
    */
  get cardOption(): Prisma.CardOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.iconCard`: Exposes CRUD operations for the **IconCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IconCards
    * const iconCards = await prisma.iconCard.findMany()
    * ```
    */
  get iconCard(): Prisma.IconCardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.iconCardImage`: Exposes CRUD operations for the **IconCardImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IconCardImages
    * const iconCardImages = await prisma.iconCardImage.findMany()
    * ```
    */
  get iconCardImage(): Prisma.IconCardImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cardIconImage`: Exposes CRUD operations for the **CardIconImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CardIconImages
    * const cardIconImages = await prisma.cardIconImage.findMany()
    * ```
    */
  get cardIconImage(): Prisma.CardIconImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cardImage`: Exposes CRUD operations for the **CardImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CardImages
    * const cardImages = await prisma.cardImage.findMany()
    * ```
    */
  get cardImage(): Prisma.CardImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.page`: Exposes CRUD operations for the **Page** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pages
    * const pages = await prisma.page.findMany()
    * ```
    */
  get page(): Prisma.PageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.builder`: Exposes CRUD operations for the **Builder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Builders
    * const builders = await prisma.builder.findMany()
    * ```
    */
  get builder(): Prisma.BuilderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.buildPage`: Exposes CRUD operations for the **BuildPage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BuildPages
    * const buildPages = await prisma.buildPage.findMany()
    * ```
    */
  get buildPage(): Prisma.BuildPageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.casino`: Exposes CRUD operations for the **Casino** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Casinos
    * const casinos = await prisma.casino.findMany()
    * ```
    */
  get casino(): Prisma.CasinoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.casinoOption`: Exposes CRUD operations for the **CasinoOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CasinoOptions
    * const casinoOptions = await prisma.casinoOption.findMany()
    * ```
    */
  get casinoOption(): Prisma.CasinoOptionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Attachment: 'Attachment',
    User: 'User',
    Menu: 'Menu',
    Setting: 'Setting',
    Robot: 'Robot',
    CategoryCard: 'CategoryCard',
    Card: 'Card',
    Faq: 'Faq',
    FaqCard: 'FaqCard',
    Option: 'Option',
    CardOption: 'CardOption',
    IconCard: 'IconCard',
    IconCardImage: 'IconCardImage',
    CardIconImage: 'CardIconImage',
    CardImage: 'CardImage',
    Page: 'Page',
    Builder: 'Builder',
    BuildPage: 'BuildPage',
    Casino: 'Casino',
    CasinoOption: 'CasinoOption'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "attachment" | "user" | "menu" | "setting" | "robot" | "categoryCard" | "card" | "faq" | "faqCard" | "option" | "cardOption" | "iconCard" | "iconCardImage" | "cardIconImage" | "cardImage" | "page" | "builder" | "buildPage" | "casino" | "casinoOption"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Attachment: {
        payload: Prisma.$AttachmentPayload<ExtArgs>
        fields: Prisma.AttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findFirst: {
            args: Prisma.AttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findMany: {
            args: Prisma.AttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          create: {
            args: Prisma.AttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          createMany: {
            args: Prisma.AttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          update: {
            args: Prisma.AttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          deleteMany: {
            args: Prisma.AttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          aggregate: {
            args: Prisma.AttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttachment>
          }
          groupBy: {
            args: Prisma.AttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<AttachmentCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Menu: {
        payload: Prisma.$MenuPayload<ExtArgs>
        fields: Prisma.MenuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MenuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MenuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          findFirst: {
            args: Prisma.MenuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MenuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          findMany: {
            args: Prisma.MenuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>[]
          }
          create: {
            args: Prisma.MenuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          createMany: {
            args: Prisma.MenuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MenuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          update: {
            args: Prisma.MenuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          deleteMany: {
            args: Prisma.MenuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MenuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MenuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuPayload>
          }
          aggregate: {
            args: Prisma.MenuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMenu>
          }
          groupBy: {
            args: Prisma.MenuGroupByArgs<ExtArgs>
            result: $Utils.Optional<MenuGroupByOutputType>[]
          }
          count: {
            args: Prisma.MenuCountArgs<ExtArgs>
            result: $Utils.Optional<MenuCountAggregateOutputType> | number
          }
        }
      }
      Setting: {
        payload: Prisma.$SettingPayload<ExtArgs>
        fields: Prisma.SettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findFirst: {
            args: Prisma.SettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findMany: {
            args: Prisma.SettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          create: {
            args: Prisma.SettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          createMany: {
            args: Prisma.SettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          update: {
            args: Prisma.SettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          deleteMany: {
            args: Prisma.SettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          aggregate: {
            args: Prisma.SettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSetting>
          }
          groupBy: {
            args: Prisma.SettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SettingCountArgs<ExtArgs>
            result: $Utils.Optional<SettingCountAggregateOutputType> | number
          }
        }
      }
      Robot: {
        payload: Prisma.$RobotPayload<ExtArgs>
        fields: Prisma.RobotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RobotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RobotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RobotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RobotPayload>
          }
          findFirst: {
            args: Prisma.RobotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RobotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RobotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RobotPayload>
          }
          findMany: {
            args: Prisma.RobotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RobotPayload>[]
          }
          create: {
            args: Prisma.RobotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RobotPayload>
          }
          createMany: {
            args: Prisma.RobotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RobotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RobotPayload>
          }
          update: {
            args: Prisma.RobotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RobotPayload>
          }
          deleteMany: {
            args: Prisma.RobotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RobotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RobotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RobotPayload>
          }
          aggregate: {
            args: Prisma.RobotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRobot>
          }
          groupBy: {
            args: Prisma.RobotGroupByArgs<ExtArgs>
            result: $Utils.Optional<RobotGroupByOutputType>[]
          }
          count: {
            args: Prisma.RobotCountArgs<ExtArgs>
            result: $Utils.Optional<RobotCountAggregateOutputType> | number
          }
        }
      }
      CategoryCard: {
        payload: Prisma.$CategoryCardPayload<ExtArgs>
        fields: Prisma.CategoryCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryCardPayload>
          }
          findFirst: {
            args: Prisma.CategoryCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryCardPayload>
          }
          findMany: {
            args: Prisma.CategoryCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryCardPayload>[]
          }
          create: {
            args: Prisma.CategoryCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryCardPayload>
          }
          createMany: {
            args: Prisma.CategoryCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryCardPayload>
          }
          update: {
            args: Prisma.CategoryCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryCardPayload>
          }
          deleteMany: {
            args: Prisma.CategoryCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryCardPayload>
          }
          aggregate: {
            args: Prisma.CategoryCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoryCard>
          }
          groupBy: {
            args: Prisma.CategoryCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCardCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCardCountAggregateOutputType> | number
          }
        }
      }
      Card: {
        payload: Prisma.$CardPayload<ExtArgs>
        fields: Prisma.CardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          findFirst: {
            args: Prisma.CardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          findMany: {
            args: Prisma.CardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>[]
          }
          create: {
            args: Prisma.CardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          createMany: {
            args: Prisma.CardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          update: {
            args: Prisma.CardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          deleteMany: {
            args: Prisma.CardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          aggregate: {
            args: Prisma.CardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCard>
          }
          groupBy: {
            args: Prisma.CardGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardCountArgs<ExtArgs>
            result: $Utils.Optional<CardCountAggregateOutputType> | number
          }
        }
      }
      Faq: {
        payload: Prisma.$FaqPayload<ExtArgs>
        fields: Prisma.FaqFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FaqFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FaqFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          findFirst: {
            args: Prisma.FaqFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FaqFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          findMany: {
            args: Prisma.FaqFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>[]
          }
          create: {
            args: Prisma.FaqCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          createMany: {
            args: Prisma.FaqCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FaqDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          update: {
            args: Prisma.FaqUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          deleteMany: {
            args: Prisma.FaqDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FaqUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FaqUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          aggregate: {
            args: Prisma.FaqAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFaq>
          }
          groupBy: {
            args: Prisma.FaqGroupByArgs<ExtArgs>
            result: $Utils.Optional<FaqGroupByOutputType>[]
          }
          count: {
            args: Prisma.FaqCountArgs<ExtArgs>
            result: $Utils.Optional<FaqCountAggregateOutputType> | number
          }
        }
      }
      FaqCard: {
        payload: Prisma.$FaqCardPayload<ExtArgs>
        fields: Prisma.FaqCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FaqCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FaqCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqCardPayload>
          }
          findFirst: {
            args: Prisma.FaqCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FaqCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqCardPayload>
          }
          findMany: {
            args: Prisma.FaqCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqCardPayload>[]
          }
          create: {
            args: Prisma.FaqCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqCardPayload>
          }
          createMany: {
            args: Prisma.FaqCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FaqCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqCardPayload>
          }
          update: {
            args: Prisma.FaqCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqCardPayload>
          }
          deleteMany: {
            args: Prisma.FaqCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FaqCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FaqCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqCardPayload>
          }
          aggregate: {
            args: Prisma.FaqCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFaqCard>
          }
          groupBy: {
            args: Prisma.FaqCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<FaqCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.FaqCardCountArgs<ExtArgs>
            result: $Utils.Optional<FaqCardCountAggregateOutputType> | number
          }
        }
      }
      Option: {
        payload: Prisma.$OptionPayload<ExtArgs>
        fields: Prisma.OptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          findFirst: {
            args: Prisma.OptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          findMany: {
            args: Prisma.OptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>[]
          }
          create: {
            args: Prisma.OptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          createMany: {
            args: Prisma.OptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          update: {
            args: Prisma.OptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          deleteMany: {
            args: Prisma.OptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          aggregate: {
            args: Prisma.OptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOption>
          }
          groupBy: {
            args: Prisma.OptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<OptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.OptionCountArgs<ExtArgs>
            result: $Utils.Optional<OptionCountAggregateOutputType> | number
          }
        }
      }
      CardOption: {
        payload: Prisma.$CardOptionPayload<ExtArgs>
        fields: Prisma.CardOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOptionPayload>
          }
          findFirst: {
            args: Prisma.CardOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOptionPayload>
          }
          findMany: {
            args: Prisma.CardOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOptionPayload>[]
          }
          create: {
            args: Prisma.CardOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOptionPayload>
          }
          createMany: {
            args: Prisma.CardOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CardOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOptionPayload>
          }
          update: {
            args: Prisma.CardOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOptionPayload>
          }
          deleteMany: {
            args: Prisma.CardOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CardOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOptionPayload>
          }
          aggregate: {
            args: Prisma.CardOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCardOption>
          }
          groupBy: {
            args: Prisma.CardOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardOptionCountArgs<ExtArgs>
            result: $Utils.Optional<CardOptionCountAggregateOutputType> | number
          }
        }
      }
      IconCard: {
        payload: Prisma.$IconCardPayload<ExtArgs>
        fields: Prisma.IconCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IconCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IconCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardPayload>
          }
          findFirst: {
            args: Prisma.IconCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IconCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardPayload>
          }
          findMany: {
            args: Prisma.IconCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardPayload>[]
          }
          create: {
            args: Prisma.IconCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardPayload>
          }
          createMany: {
            args: Prisma.IconCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.IconCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardPayload>
          }
          update: {
            args: Prisma.IconCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardPayload>
          }
          deleteMany: {
            args: Prisma.IconCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IconCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IconCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardPayload>
          }
          aggregate: {
            args: Prisma.IconCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIconCard>
          }
          groupBy: {
            args: Prisma.IconCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<IconCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.IconCardCountArgs<ExtArgs>
            result: $Utils.Optional<IconCardCountAggregateOutputType> | number
          }
        }
      }
      IconCardImage: {
        payload: Prisma.$IconCardImagePayload<ExtArgs>
        fields: Prisma.IconCardImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IconCardImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IconCardImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardImagePayload>
          }
          findFirst: {
            args: Prisma.IconCardImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IconCardImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardImagePayload>
          }
          findMany: {
            args: Prisma.IconCardImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardImagePayload>[]
          }
          create: {
            args: Prisma.IconCardImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardImagePayload>
          }
          createMany: {
            args: Prisma.IconCardImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.IconCardImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardImagePayload>
          }
          update: {
            args: Prisma.IconCardImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardImagePayload>
          }
          deleteMany: {
            args: Prisma.IconCardImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IconCardImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IconCardImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IconCardImagePayload>
          }
          aggregate: {
            args: Prisma.IconCardImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIconCardImage>
          }
          groupBy: {
            args: Prisma.IconCardImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<IconCardImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.IconCardImageCountArgs<ExtArgs>
            result: $Utils.Optional<IconCardImageCountAggregateOutputType> | number
          }
        }
      }
      CardIconImage: {
        payload: Prisma.$CardIconImagePayload<ExtArgs>
        fields: Prisma.CardIconImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardIconImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardIconImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardIconImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardIconImagePayload>
          }
          findFirst: {
            args: Prisma.CardIconImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardIconImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardIconImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardIconImagePayload>
          }
          findMany: {
            args: Prisma.CardIconImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardIconImagePayload>[]
          }
          create: {
            args: Prisma.CardIconImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardIconImagePayload>
          }
          createMany: {
            args: Prisma.CardIconImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CardIconImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardIconImagePayload>
          }
          update: {
            args: Prisma.CardIconImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardIconImagePayload>
          }
          deleteMany: {
            args: Prisma.CardIconImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardIconImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CardIconImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardIconImagePayload>
          }
          aggregate: {
            args: Prisma.CardIconImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCardIconImage>
          }
          groupBy: {
            args: Prisma.CardIconImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardIconImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardIconImageCountArgs<ExtArgs>
            result: $Utils.Optional<CardIconImageCountAggregateOutputType> | number
          }
        }
      }
      CardImage: {
        payload: Prisma.$CardImagePayload<ExtArgs>
        fields: Prisma.CardImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardImagePayload>
          }
          findFirst: {
            args: Prisma.CardImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardImagePayload>
          }
          findMany: {
            args: Prisma.CardImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardImagePayload>[]
          }
          create: {
            args: Prisma.CardImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardImagePayload>
          }
          createMany: {
            args: Prisma.CardImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CardImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardImagePayload>
          }
          update: {
            args: Prisma.CardImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardImagePayload>
          }
          deleteMany: {
            args: Prisma.CardImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CardImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardImagePayload>
          }
          aggregate: {
            args: Prisma.CardImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCardImage>
          }
          groupBy: {
            args: Prisma.CardImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardImageCountArgs<ExtArgs>
            result: $Utils.Optional<CardImageCountAggregateOutputType> | number
          }
        }
      }
      Page: {
        payload: Prisma.$PagePayload<ExtArgs>
        fields: Prisma.PageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          findFirst: {
            args: Prisma.PageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          findMany: {
            args: Prisma.PageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>[]
          }
          create: {
            args: Prisma.PageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          createMany: {
            args: Prisma.PageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          update: {
            args: Prisma.PageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          deleteMany: {
            args: Prisma.PageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          aggregate: {
            args: Prisma.PageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePage>
          }
          groupBy: {
            args: Prisma.PageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PageCountArgs<ExtArgs>
            result: $Utils.Optional<PageCountAggregateOutputType> | number
          }
        }
      }
      Builder: {
        payload: Prisma.$BuilderPayload<ExtArgs>
        fields: Prisma.BuilderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuilderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuilderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuilderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuilderPayload>
          }
          findFirst: {
            args: Prisma.BuilderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuilderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuilderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuilderPayload>
          }
          findMany: {
            args: Prisma.BuilderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuilderPayload>[]
          }
          create: {
            args: Prisma.BuilderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuilderPayload>
          }
          createMany: {
            args: Prisma.BuilderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BuilderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuilderPayload>
          }
          update: {
            args: Prisma.BuilderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuilderPayload>
          }
          deleteMany: {
            args: Prisma.BuilderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuilderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BuilderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuilderPayload>
          }
          aggregate: {
            args: Prisma.BuilderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuilder>
          }
          groupBy: {
            args: Prisma.BuilderGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuilderGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuilderCountArgs<ExtArgs>
            result: $Utils.Optional<BuilderCountAggregateOutputType> | number
          }
        }
      }
      BuildPage: {
        payload: Prisma.$BuildPagePayload<ExtArgs>
        fields: Prisma.BuildPageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuildPageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuildPageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPagePayload>
          }
          findFirst: {
            args: Prisma.BuildPageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuildPageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPagePayload>
          }
          findMany: {
            args: Prisma.BuildPageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPagePayload>[]
          }
          create: {
            args: Prisma.BuildPageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPagePayload>
          }
          createMany: {
            args: Prisma.BuildPageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BuildPageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPagePayload>
          }
          update: {
            args: Prisma.BuildPageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPagePayload>
          }
          deleteMany: {
            args: Prisma.BuildPageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuildPageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BuildPageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPagePayload>
          }
          aggregate: {
            args: Prisma.BuildPageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuildPage>
          }
          groupBy: {
            args: Prisma.BuildPageGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuildPageGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuildPageCountArgs<ExtArgs>
            result: $Utils.Optional<BuildPageCountAggregateOutputType> | number
          }
        }
      }
      Casino: {
        payload: Prisma.$CasinoPayload<ExtArgs>
        fields: Prisma.CasinoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CasinoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CasinoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoPayload>
          }
          findFirst: {
            args: Prisma.CasinoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CasinoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoPayload>
          }
          findMany: {
            args: Prisma.CasinoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoPayload>[]
          }
          create: {
            args: Prisma.CasinoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoPayload>
          }
          createMany: {
            args: Prisma.CasinoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CasinoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoPayload>
          }
          update: {
            args: Prisma.CasinoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoPayload>
          }
          deleteMany: {
            args: Prisma.CasinoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CasinoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CasinoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoPayload>
          }
          aggregate: {
            args: Prisma.CasinoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCasino>
          }
          groupBy: {
            args: Prisma.CasinoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CasinoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CasinoCountArgs<ExtArgs>
            result: $Utils.Optional<CasinoCountAggregateOutputType> | number
          }
        }
      }
      CasinoOption: {
        payload: Prisma.$CasinoOptionPayload<ExtArgs>
        fields: Prisma.CasinoOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CasinoOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CasinoOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoOptionPayload>
          }
          findFirst: {
            args: Prisma.CasinoOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CasinoOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoOptionPayload>
          }
          findMany: {
            args: Prisma.CasinoOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoOptionPayload>[]
          }
          create: {
            args: Prisma.CasinoOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoOptionPayload>
          }
          createMany: {
            args: Prisma.CasinoOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CasinoOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoOptionPayload>
          }
          update: {
            args: Prisma.CasinoOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoOptionPayload>
          }
          deleteMany: {
            args: Prisma.CasinoOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CasinoOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CasinoOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasinoOptionPayload>
          }
          aggregate: {
            args: Prisma.CasinoOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCasinoOption>
          }
          groupBy: {
            args: Prisma.CasinoOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CasinoOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CasinoOptionCountArgs<ExtArgs>
            result: $Utils.Optional<CasinoOptionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    attachment?: AttachmentOmit
    user?: UserOmit
    menu?: MenuOmit
    setting?: SettingOmit
    robot?: RobotOmit
    categoryCard?: CategoryCardOmit
    card?: CardOmit
    faq?: FaqOmit
    faqCard?: FaqCardOmit
    option?: OptionOmit
    cardOption?: CardOptionOmit
    iconCard?: IconCardOmit
    iconCardImage?: IconCardImageOmit
    cardIconImage?: CardIconImageOmit
    cardImage?: CardImageOmit
    page?: PageOmit
    builder?: BuilderOmit
    buildPage?: BuildPageOmit
    casino?: CasinoOmit
    casinoOption?: CasinoOptionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MenuCountOutputType
   */

  export type MenuCountOutputType = {
    children: number
  }

  export type MenuCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | MenuCountOutputTypeCountChildrenArgs
  }

  // Custom InputTypes
  /**
   * MenuCountOutputType without action
   */
  export type MenuCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCountOutputType
     */
    select?: MenuCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MenuCountOutputType without action
   */
  export type MenuCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuWhereInput
  }


  /**
   * Count Type CategoryCardCountOutputType
   */

  export type CategoryCardCountOutputType = {
    cards: number
  }

  export type CategoryCardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cards?: boolean | CategoryCardCountOutputTypeCountCardsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCardCountOutputType without action
   */
  export type CategoryCardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCardCountOutputType
     */
    select?: CategoryCardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCardCountOutputType without action
   */
  export type CategoryCardCountOutputTypeCountCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWhereInput
  }


  /**
   * Count Type CardCountOutputType
   */

  export type CardCountOutputType = {
    icon_card_images: number
    images: number
    options: number
    faqs: number
  }

  export type CardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    icon_card_images?: boolean | CardCountOutputTypeCountIcon_card_imagesArgs
    images?: boolean | CardCountOutputTypeCountImagesArgs
    options?: boolean | CardCountOutputTypeCountOptionsArgs
    faqs?: boolean | CardCountOutputTypeCountFaqsArgs
  }

  // Custom InputTypes
  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardCountOutputType
     */
    select?: CardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountIcon_card_imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardIconImageWhereInput
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardImageWhereInput
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardOptionWhereInput
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountFaqsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaqCardWhereInput
  }


  /**
   * Count Type FaqCountOutputType
   */

  export type FaqCountOutputType = {
    cards: number
  }

  export type FaqCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cards?: boolean | FaqCountOutputTypeCountCardsArgs
  }

  // Custom InputTypes
  /**
   * FaqCountOutputType without action
   */
  export type FaqCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCountOutputType
     */
    select?: FaqCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FaqCountOutputType without action
   */
  export type FaqCountOutputTypeCountCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaqCardWhereInput
  }


  /**
   * Count Type OptionCountOutputType
   */

  export type OptionCountOutputType = {
    card_options: number
    casino_options: number
  }

  export type OptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card_options?: boolean | OptionCountOutputTypeCountCard_optionsArgs
    casino_options?: boolean | OptionCountOutputTypeCountCasino_optionsArgs
  }

  // Custom InputTypes
  /**
   * OptionCountOutputType without action
   */
  export type OptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionCountOutputType
     */
    select?: OptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OptionCountOutputType without action
   */
  export type OptionCountOutputTypeCountCard_optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardOptionWhereInput
  }

  /**
   * OptionCountOutputType without action
   */
  export type OptionCountOutputTypeCountCasino_optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CasinoOptionWhereInput
  }


  /**
   * Count Type IconCardCountOutputType
   */

  export type IconCardCountOutputType = {
    images: number
  }

  export type IconCardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | IconCardCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * IconCardCountOutputType without action
   */
  export type IconCardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCardCountOutputType
     */
    select?: IconCardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IconCardCountOutputType without action
   */
  export type IconCardCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IconCardImageWhereInput
  }


  /**
   * Count Type IconCardImageCountOutputType
   */

  export type IconCardImageCountOutputType = {
    cards: number
  }

  export type IconCardImageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cards?: boolean | IconCardImageCountOutputTypeCountCardsArgs
  }

  // Custom InputTypes
  /**
   * IconCardImageCountOutputType without action
   */
  export type IconCardImageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCardImageCountOutputType
     */
    select?: IconCardImageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IconCardImageCountOutputType without action
   */
  export type IconCardImageCountOutputTypeCountCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardIconImageWhereInput
  }


  /**
   * Count Type PageCountOutputType
   */

  export type PageCountOutputType = {
    builds: number
  }

  export type PageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    builds?: boolean | PageCountOutputTypeCountBuildsArgs
  }

  // Custom InputTypes
  /**
   * PageCountOutputType without action
   */
  export type PageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageCountOutputType
     */
    select?: PageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PageCountOutputType without action
   */
  export type PageCountOutputTypeCountBuildsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildPageWhereInput
  }


  /**
   * Count Type BuilderCountOutputType
   */

  export type BuilderCountOutputType = {
    pages: number
  }

  export type BuilderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pages?: boolean | BuilderCountOutputTypeCountPagesArgs
  }

  // Custom InputTypes
  /**
   * BuilderCountOutputType without action
   */
  export type BuilderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuilderCountOutputType
     */
    select?: BuilderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BuilderCountOutputType without action
   */
  export type BuilderCountOutputTypeCountPagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildPageWhereInput
  }


  /**
   * Count Type CasinoCountOutputType
   */

  export type CasinoCountOutputType = {
    options: number
  }

  export type CasinoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | CasinoCountOutputTypeCountOptionsArgs
  }

  // Custom InputTypes
  /**
   * CasinoCountOutputType without action
   */
  export type CasinoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasinoCountOutputType
     */
    select?: CasinoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CasinoCountOutputType without action
   */
  export type CasinoCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CasinoOptionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Attachment
   */

  export type AggregateAttachment = {
    _count: AttachmentCountAggregateOutputType | null
    _avg: AttachmentAvgAggregateOutputType | null
    _sum: AttachmentSumAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  export type AttachmentAvgAggregateOutputType = {
    id: number | null
    entity_id: number | null
    position: number | null
  }

  export type AttachmentSumAggregateOutputType = {
    id: number | null
    entity_id: number | null
    position: number | null
  }

  export type AttachmentMinAggregateOutputType = {
    id: number | null
    entity: string | null
    entity_id: number | null
    group: string | null
    src: string | null
    position: number | null
  }

  export type AttachmentMaxAggregateOutputType = {
    id: number | null
    entity: string | null
    entity_id: number | null
    group: string | null
    src: string | null
    position: number | null
  }

  export type AttachmentCountAggregateOutputType = {
    id: number
    entity: number
    entity_id: number
    group: number
    src: number
    position: number
    _all: number
  }


  export type AttachmentAvgAggregateInputType = {
    id?: true
    entity_id?: true
    position?: true
  }

  export type AttachmentSumAggregateInputType = {
    id?: true
    entity_id?: true
    position?: true
  }

  export type AttachmentMinAggregateInputType = {
    id?: true
    entity?: true
    entity_id?: true
    group?: true
    src?: true
    position?: true
  }

  export type AttachmentMaxAggregateInputType = {
    id?: true
    entity?: true
    entity_id?: true
    group?: true
    src?: true
    position?: true
  }

  export type AttachmentCountAggregateInputType = {
    id?: true
    entity?: true
    entity_id?: true
    group?: true
    src?: true
    position?: true
    _all?: true
  }

  export type AttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachment to aggregate.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attachments
    **/
    _count?: true | AttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttachmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttachmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttachmentMaxAggregateInputType
  }

  export type GetAttachmentAggregateType<T extends AttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttachment[P]>
      : GetScalarType<T[P], AggregateAttachment[P]>
  }




  export type AttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithAggregationInput | AttachmentOrderByWithAggregationInput[]
    by: AttachmentScalarFieldEnum[] | AttachmentScalarFieldEnum
    having?: AttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttachmentCountAggregateInputType | true
    _avg?: AttachmentAvgAggregateInputType
    _sum?: AttachmentSumAggregateInputType
    _min?: AttachmentMinAggregateInputType
    _max?: AttachmentMaxAggregateInputType
  }

  export type AttachmentGroupByOutputType = {
    id: number
    entity: string
    entity_id: number
    group: string
    src: string
    position: number | null
    _count: AttachmentCountAggregateOutputType | null
    _avg: AttachmentAvgAggregateOutputType | null
    _sum: AttachmentSumAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  type GetAttachmentGroupByPayload<T extends AttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
        }
      >
    >


  export type AttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entity?: boolean
    entity_id?: boolean
    group?: boolean
    src?: boolean
    position?: boolean
  }, ExtArgs["result"]["attachment"]>



  export type AttachmentSelectScalar = {
    id?: boolean
    entity?: boolean
    entity_id?: boolean
    group?: boolean
    src?: boolean
    position?: boolean
  }

  export type AttachmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "entity" | "entity_id" | "group" | "src" | "position", ExtArgs["result"]["attachment"]>

  export type $AttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attachment"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      entity: string
      entity_id: number
      group: string
      src: string
      position: number | null
    }, ExtArgs["result"]["attachment"]>
    composites: {}
  }

  type AttachmentGetPayload<S extends boolean | null | undefined | AttachmentDefaultArgs> = $Result.GetResult<Prisma.$AttachmentPayload, S>

  type AttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttachmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttachmentCountAggregateInputType | true
    }

  export interface AttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attachment'], meta: { name: 'Attachment' } }
    /**
     * Find zero or one Attachment that matches the filter.
     * @param {AttachmentFindUniqueArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttachmentFindUniqueArgs>(args: SelectSubset<T, AttachmentFindUniqueArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attachment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttachmentFindUniqueOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttachmentFindFirstArgs>(args?: SelectSubset<T, AttachmentFindFirstArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attachments
     * const attachments = await prisma.attachment.findMany()
     * 
     * // Get first 10 Attachments
     * const attachments = await prisma.attachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attachmentWithIdOnly = await prisma.attachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttachmentFindManyArgs>(args?: SelectSubset<T, AttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attachment.
     * @param {AttachmentCreateArgs} args - Arguments to create a Attachment.
     * @example
     * // Create one Attachment
     * const Attachment = await prisma.attachment.create({
     *   data: {
     *     // ... data to create a Attachment
     *   }
     * })
     * 
     */
    create<T extends AttachmentCreateArgs>(args: SelectSubset<T, AttachmentCreateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attachments.
     * @param {AttachmentCreateManyArgs} args - Arguments to create many Attachments.
     * @example
     * // Create many Attachments
     * const attachment = await prisma.attachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttachmentCreateManyArgs>(args?: SelectSubset<T, AttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Attachment.
     * @param {AttachmentDeleteArgs} args - Arguments to delete one Attachment.
     * @example
     * // Delete one Attachment
     * const Attachment = await prisma.attachment.delete({
     *   where: {
     *     // ... filter to delete one Attachment
     *   }
     * })
     * 
     */
    delete<T extends AttachmentDeleteArgs>(args: SelectSubset<T, AttachmentDeleteArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attachment.
     * @param {AttachmentUpdateArgs} args - Arguments to update one Attachment.
     * @example
     * // Update one Attachment
     * const attachment = await prisma.attachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttachmentUpdateArgs>(args: SelectSubset<T, AttachmentUpdateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attachments.
     * @param {AttachmentDeleteManyArgs} args - Arguments to filter Attachments to delete.
     * @example
     * // Delete a few Attachments
     * const { count } = await prisma.attachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttachmentDeleteManyArgs>(args?: SelectSubset<T, AttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attachments
     * const attachment = await prisma.attachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttachmentUpdateManyArgs>(args: SelectSubset<T, AttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attachment.
     * @param {AttachmentUpsertArgs} args - Arguments to update or create a Attachment.
     * @example
     * // Update or create a Attachment
     * const attachment = await prisma.attachment.upsert({
     *   create: {
     *     // ... data to create a Attachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attachment we want to update
     *   }
     * })
     */
    upsert<T extends AttachmentUpsertArgs>(args: SelectSubset<T, AttachmentUpsertArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentCountArgs} args - Arguments to filter Attachments to count.
     * @example
     * // Count the number of Attachments
     * const count = await prisma.attachment.count({
     *   where: {
     *     // ... the filter for the Attachments we want to count
     *   }
     * })
    **/
    count<T extends AttachmentCountArgs>(
      args?: Subset<T, AttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttachmentAggregateArgs>(args: Subset<T, AttachmentAggregateArgs>): Prisma.PrismaPromise<GetAttachmentAggregateType<T>>

    /**
     * Group by Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttachmentGroupByArgs['orderBy'] }
        : { orderBy?: AttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attachment model
   */
  readonly fields: AttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attachment model
   */
  interface AttachmentFieldRefs {
    readonly id: FieldRef<"Attachment", 'Int'>
    readonly entity: FieldRef<"Attachment", 'String'>
    readonly entity_id: FieldRef<"Attachment", 'Int'>
    readonly group: FieldRef<"Attachment", 'String'>
    readonly src: FieldRef<"Attachment", 'String'>
    readonly position: FieldRef<"Attachment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Attachment findUnique
   */
  export type AttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findUniqueOrThrow
   */
  export type AttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findFirst
   */
  export type AttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findFirstOrThrow
   */
  export type AttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findMany
   */
  export type AttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Filter, which Attachments to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment create
   */
  export type AttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * The data needed to create a Attachment.
     */
    data: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
  }

  /**
   * Attachment createMany
   */
  export type AttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attachments.
     */
    data: AttachmentCreateManyInput | AttachmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attachment update
   */
  export type AttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * The data needed to update a Attachment.
     */
    data: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
    /**
     * Choose, which Attachment to update.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment updateMany
   */
  export type AttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attachments.
     */
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyInput>
    /**
     * Filter which Attachments to update
     */
    where?: AttachmentWhereInput
    /**
     * Limit how many Attachments to update.
     */
    limit?: number
  }

  /**
   * Attachment upsert
   */
  export type AttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * The filter to search for the Attachment to update in case it exists.
     */
    where: AttachmentWhereUniqueInput
    /**
     * In case the Attachment found by the `where` argument doesn't exist, create a new Attachment with this data.
     */
    create: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
    /**
     * In case the Attachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
  }

  /**
   * Attachment delete
   */
  export type AttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Filter which Attachment to delete.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment deleteMany
   */
  export type AttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachments to delete
     */
    where?: AttachmentWhereInput
    /**
     * Limit how many Attachments to delete.
     */
    limit?: number
  }

  /**
   * Attachment without action
   */
  export type AttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    role: $Enums.UserRole | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    role: $Enums.UserRole | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    password: number
    role: number
    image: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    role?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    role?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    role?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string
    emailVerified: Date | null
    password: string | null
    role: $Enums.UserRole
    image: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    password?: boolean
    role?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    password?: boolean
    role?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "password" | "role" | "image" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string
      emailVerified: Date | null
      password: string | null
      role: $Enums.UserRole
      image: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly image: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
  }


  /**
   * Model Menu
   */

  export type AggregateMenu = {
    _count: MenuCountAggregateOutputType | null
    _avg: MenuAvgAggregateOutputType | null
    _sum: MenuSumAggregateOutputType | null
    _min: MenuMinAggregateOutputType | null
    _max: MenuMaxAggregateOutputType | null
  }

  export type MenuAvgAggregateOutputType = {
    id: number | null
    parent_id: number | null
    position: number | null
  }

  export type MenuSumAggregateOutputType = {
    id: number | null
    parent_id: number | null
    position: number | null
  }

  export type MenuMinAggregateOutputType = {
    id: number | null
    type: $Enums.MenuType | null
    published: boolean | null
    label: string | null
    link: string | null
    parent_id: number | null
    position: number | null
  }

  export type MenuMaxAggregateOutputType = {
    id: number | null
    type: $Enums.MenuType | null
    published: boolean | null
    label: string | null
    link: string | null
    parent_id: number | null
    position: number | null
  }

  export type MenuCountAggregateOutputType = {
    id: number
    type: number
    published: number
    label: number
    link: number
    parent_id: number
    position: number
    _all: number
  }


  export type MenuAvgAggregateInputType = {
    id?: true
    parent_id?: true
    position?: true
  }

  export type MenuSumAggregateInputType = {
    id?: true
    parent_id?: true
    position?: true
  }

  export type MenuMinAggregateInputType = {
    id?: true
    type?: true
    published?: true
    label?: true
    link?: true
    parent_id?: true
    position?: true
  }

  export type MenuMaxAggregateInputType = {
    id?: true
    type?: true
    published?: true
    label?: true
    link?: true
    parent_id?: true
    position?: true
  }

  export type MenuCountAggregateInputType = {
    id?: true
    type?: true
    published?: true
    label?: true
    link?: true
    parent_id?: true
    position?: true
    _all?: true
  }

  export type MenuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Menu to aggregate.
     */
    where?: MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Menus to fetch.
     */
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Menus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Menus
    **/
    _count?: true | MenuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MenuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MenuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MenuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MenuMaxAggregateInputType
  }

  export type GetMenuAggregateType<T extends MenuAggregateArgs> = {
        [P in keyof T & keyof AggregateMenu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenu[P]>
      : GetScalarType<T[P], AggregateMenu[P]>
  }




  export type MenuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuWhereInput
    orderBy?: MenuOrderByWithAggregationInput | MenuOrderByWithAggregationInput[]
    by: MenuScalarFieldEnum[] | MenuScalarFieldEnum
    having?: MenuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MenuCountAggregateInputType | true
    _avg?: MenuAvgAggregateInputType
    _sum?: MenuSumAggregateInputType
    _min?: MenuMinAggregateInputType
    _max?: MenuMaxAggregateInputType
  }

  export type MenuGroupByOutputType = {
    id: number
    type: $Enums.MenuType
    published: boolean
    label: string
    link: string
    parent_id: number | null
    position: number
    _count: MenuCountAggregateOutputType | null
    _avg: MenuAvgAggregateOutputType | null
    _sum: MenuSumAggregateOutputType | null
    _min: MenuMinAggregateOutputType | null
    _max: MenuMaxAggregateOutputType | null
  }

  type GetMenuGroupByPayload<T extends MenuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MenuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MenuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MenuGroupByOutputType[P]>
            : GetScalarType<T[P], MenuGroupByOutputType[P]>
        }
      >
    >


  export type MenuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    published?: boolean
    label?: boolean
    link?: boolean
    parent_id?: boolean
    position?: boolean
    parent?: boolean | Menu$parentArgs<ExtArgs>
    children?: boolean | Menu$childrenArgs<ExtArgs>
    _count?: boolean | MenuCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["menu"]>



  export type MenuSelectScalar = {
    id?: boolean
    type?: boolean
    published?: boolean
    label?: boolean
    link?: boolean
    parent_id?: boolean
    position?: boolean
  }

  export type MenuOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "published" | "label" | "link" | "parent_id" | "position", ExtArgs["result"]["menu"]>
  export type MenuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Menu$parentArgs<ExtArgs>
    children?: boolean | Menu$childrenArgs<ExtArgs>
    _count?: boolean | MenuCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MenuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Menu"
    objects: {
      parent: Prisma.$MenuPayload<ExtArgs> | null
      children: Prisma.$MenuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: $Enums.MenuType
      published: boolean
      label: string
      link: string
      parent_id: number | null
      position: number
    }, ExtArgs["result"]["menu"]>
    composites: {}
  }

  type MenuGetPayload<S extends boolean | null | undefined | MenuDefaultArgs> = $Result.GetResult<Prisma.$MenuPayload, S>

  type MenuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MenuFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MenuCountAggregateInputType | true
    }

  export interface MenuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Menu'], meta: { name: 'Menu' } }
    /**
     * Find zero or one Menu that matches the filter.
     * @param {MenuFindUniqueArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MenuFindUniqueArgs>(args: SelectSubset<T, MenuFindUniqueArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Menu that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MenuFindUniqueOrThrowArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MenuFindUniqueOrThrowArgs>(args: SelectSubset<T, MenuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Menu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuFindFirstArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MenuFindFirstArgs>(args?: SelectSubset<T, MenuFindFirstArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Menu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuFindFirstOrThrowArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MenuFindFirstOrThrowArgs>(args?: SelectSubset<T, MenuFindFirstOrThrowArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Menus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Menus
     * const menus = await prisma.menu.findMany()
     * 
     * // Get first 10 Menus
     * const menus = await prisma.menu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const menuWithIdOnly = await prisma.menu.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MenuFindManyArgs>(args?: SelectSubset<T, MenuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Menu.
     * @param {MenuCreateArgs} args - Arguments to create a Menu.
     * @example
     * // Create one Menu
     * const Menu = await prisma.menu.create({
     *   data: {
     *     // ... data to create a Menu
     *   }
     * })
     * 
     */
    create<T extends MenuCreateArgs>(args: SelectSubset<T, MenuCreateArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Menus.
     * @param {MenuCreateManyArgs} args - Arguments to create many Menus.
     * @example
     * // Create many Menus
     * const menu = await prisma.menu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MenuCreateManyArgs>(args?: SelectSubset<T, MenuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Menu.
     * @param {MenuDeleteArgs} args - Arguments to delete one Menu.
     * @example
     * // Delete one Menu
     * const Menu = await prisma.menu.delete({
     *   where: {
     *     // ... filter to delete one Menu
     *   }
     * })
     * 
     */
    delete<T extends MenuDeleteArgs>(args: SelectSubset<T, MenuDeleteArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Menu.
     * @param {MenuUpdateArgs} args - Arguments to update one Menu.
     * @example
     * // Update one Menu
     * const menu = await prisma.menu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MenuUpdateArgs>(args: SelectSubset<T, MenuUpdateArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Menus.
     * @param {MenuDeleteManyArgs} args - Arguments to filter Menus to delete.
     * @example
     * // Delete a few Menus
     * const { count } = await prisma.menu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MenuDeleteManyArgs>(args?: SelectSubset<T, MenuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Menus
     * const menu = await prisma.menu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MenuUpdateManyArgs>(args: SelectSubset<T, MenuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Menu.
     * @param {MenuUpsertArgs} args - Arguments to update or create a Menu.
     * @example
     * // Update or create a Menu
     * const menu = await prisma.menu.upsert({
     *   create: {
     *     // ... data to create a Menu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Menu we want to update
     *   }
     * })
     */
    upsert<T extends MenuUpsertArgs>(args: SelectSubset<T, MenuUpsertArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuCountArgs} args - Arguments to filter Menus to count.
     * @example
     * // Count the number of Menus
     * const count = await prisma.menu.count({
     *   where: {
     *     // ... the filter for the Menus we want to count
     *   }
     * })
    **/
    count<T extends MenuCountArgs>(
      args?: Subset<T, MenuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MenuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MenuAggregateArgs>(args: Subset<T, MenuAggregateArgs>): Prisma.PrismaPromise<GetMenuAggregateType<T>>

    /**
     * Group by Menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MenuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MenuGroupByArgs['orderBy'] }
        : { orderBy?: MenuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MenuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Menu model
   */
  readonly fields: MenuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Menu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MenuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Menu$parentArgs<ExtArgs> = {}>(args?: Subset<T, Menu$parentArgs<ExtArgs>>): Prisma__MenuClient<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends Menu$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Menu$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Menu model
   */
  interface MenuFieldRefs {
    readonly id: FieldRef<"Menu", 'Int'>
    readonly type: FieldRef<"Menu", 'MenuType'>
    readonly published: FieldRef<"Menu", 'Boolean'>
    readonly label: FieldRef<"Menu", 'String'>
    readonly link: FieldRef<"Menu", 'String'>
    readonly parent_id: FieldRef<"Menu", 'Int'>
    readonly position: FieldRef<"Menu", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Menu findUnique
   */
  export type MenuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menu to fetch.
     */
    where: MenuWhereUniqueInput
  }

  /**
   * Menu findUniqueOrThrow
   */
  export type MenuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menu to fetch.
     */
    where: MenuWhereUniqueInput
  }

  /**
   * Menu findFirst
   */
  export type MenuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menu to fetch.
     */
    where?: MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Menus to fetch.
     */
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Menus.
     */
    cursor?: MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Menus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Menus.
     */
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * Menu findFirstOrThrow
   */
  export type MenuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menu to fetch.
     */
    where?: MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Menus to fetch.
     */
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Menus.
     */
    cursor?: MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Menus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Menus.
     */
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * Menu findMany
   */
  export type MenuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter, which Menus to fetch.
     */
    where?: MenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Menus to fetch.
     */
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Menus.
     */
    cursor?: MenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Menus.
     */
    skip?: number
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * Menu create
   */
  export type MenuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * The data needed to create a Menu.
     */
    data: XOR<MenuCreateInput, MenuUncheckedCreateInput>
  }

  /**
   * Menu createMany
   */
  export type MenuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Menus.
     */
    data: MenuCreateManyInput | MenuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Menu update
   */
  export type MenuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * The data needed to update a Menu.
     */
    data: XOR<MenuUpdateInput, MenuUncheckedUpdateInput>
    /**
     * Choose, which Menu to update.
     */
    where: MenuWhereUniqueInput
  }

  /**
   * Menu updateMany
   */
  export type MenuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Menus.
     */
    data: XOR<MenuUpdateManyMutationInput, MenuUncheckedUpdateManyInput>
    /**
     * Filter which Menus to update
     */
    where?: MenuWhereInput
    /**
     * Limit how many Menus to update.
     */
    limit?: number
  }

  /**
   * Menu upsert
   */
  export type MenuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * The filter to search for the Menu to update in case it exists.
     */
    where: MenuWhereUniqueInput
    /**
     * In case the Menu found by the `where` argument doesn't exist, create a new Menu with this data.
     */
    create: XOR<MenuCreateInput, MenuUncheckedCreateInput>
    /**
     * In case the Menu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MenuUpdateInput, MenuUncheckedUpdateInput>
  }

  /**
   * Menu delete
   */
  export type MenuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    /**
     * Filter which Menu to delete.
     */
    where: MenuWhereUniqueInput
  }

  /**
   * Menu deleteMany
   */
  export type MenuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Menus to delete
     */
    where?: MenuWhereInput
    /**
     * Limit how many Menus to delete.
     */
    limit?: number
  }

  /**
   * Menu.parent
   */
  export type Menu$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    where?: MenuWhereInput
  }

  /**
   * Menu.children
   */
  export type Menu$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
    where?: MenuWhereInput
    orderBy?: MenuOrderByWithRelationInput | MenuOrderByWithRelationInput[]
    cursor?: MenuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * Menu without action
   */
  export type MenuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Menu
     */
    select?: MenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Menu
     */
    omit?: MenuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuInclude<ExtArgs> | null
  }


  /**
   * Model Setting
   */

  export type AggregateSetting = {
    _count: SettingCountAggregateOutputType | null
    _avg: SettingAvgAggregateOutputType | null
    _sum: SettingSumAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  export type SettingAvgAggregateOutputType = {
    id: number | null
  }

  export type SettingSumAggregateOutputType = {
    id: number | null
  }

  export type SettingMinAggregateOutputType = {
    id: number | null
    code: string | null
    input_type: $Enums.InputType | null
    value: string | null
    label: string | null
  }

  export type SettingMaxAggregateOutputType = {
    id: number | null
    code: string | null
    input_type: $Enums.InputType | null
    value: string | null
    label: string | null
  }

  export type SettingCountAggregateOutputType = {
    id: number
    code: number
    input_type: number
    value: number
    label: number
    _all: number
  }


  export type SettingAvgAggregateInputType = {
    id?: true
  }

  export type SettingSumAggregateInputType = {
    id?: true
  }

  export type SettingMinAggregateInputType = {
    id?: true
    code?: true
    input_type?: true
    value?: true
    label?: true
  }

  export type SettingMaxAggregateInputType = {
    id?: true
    code?: true
    input_type?: true
    value?: true
    label?: true
  }

  export type SettingCountAggregateInputType = {
    id?: true
    code?: true
    input_type?: true
    value?: true
    label?: true
    _all?: true
  }

  export type SettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setting to aggregate.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SettingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SettingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingMaxAggregateInputType
  }

  export type GetSettingAggregateType<T extends SettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetting[P]>
      : GetScalarType<T[P], AggregateSetting[P]>
  }




  export type SettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingWhereInput
    orderBy?: SettingOrderByWithAggregationInput | SettingOrderByWithAggregationInput[]
    by: SettingScalarFieldEnum[] | SettingScalarFieldEnum
    having?: SettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingCountAggregateInputType | true
    _avg?: SettingAvgAggregateInputType
    _sum?: SettingSumAggregateInputType
    _min?: SettingMinAggregateInputType
    _max?: SettingMaxAggregateInputType
  }

  export type SettingGroupByOutputType = {
    id: number
    code: string
    input_type: $Enums.InputType
    value: string
    label: string
    _count: SettingCountAggregateOutputType | null
    _avg: SettingAvgAggregateOutputType | null
    _sum: SettingSumAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  type GetSettingGroupByPayload<T extends SettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingGroupByOutputType[P]>
            : GetScalarType<T[P], SettingGroupByOutputType[P]>
        }
      >
    >


  export type SettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    input_type?: boolean
    value?: boolean
    label?: boolean
  }, ExtArgs["result"]["setting"]>



  export type SettingSelectScalar = {
    id?: boolean
    code?: boolean
    input_type?: boolean
    value?: boolean
    label?: boolean
  }

  export type SettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "input_type" | "value" | "label", ExtArgs["result"]["setting"]>

  export type $SettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Setting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      input_type: $Enums.InputType
      value: string
      label: string
    }, ExtArgs["result"]["setting"]>
    composites: {}
  }

  type SettingGetPayload<S extends boolean | null | undefined | SettingDefaultArgs> = $Result.GetResult<Prisma.$SettingPayload, S>

  type SettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SettingCountAggregateInputType | true
    }

  export interface SettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Setting'], meta: { name: 'Setting' } }
    /**
     * Find zero or one Setting that matches the filter.
     * @param {SettingFindUniqueArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingFindUniqueArgs>(args: SelectSubset<T, SettingFindUniqueArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Setting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SettingFindUniqueOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Setting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingFindFirstArgs>(args?: SelectSubset<T, SettingFindFirstArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Setting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.setting.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.setting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingWithIdOnly = await prisma.setting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SettingFindManyArgs>(args?: SelectSubset<T, SettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Setting.
     * @param {SettingCreateArgs} args - Arguments to create a Setting.
     * @example
     * // Create one Setting
     * const Setting = await prisma.setting.create({
     *   data: {
     *     // ... data to create a Setting
     *   }
     * })
     * 
     */
    create<T extends SettingCreateArgs>(args: SelectSubset<T, SettingCreateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Settings.
     * @param {SettingCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingCreateManyArgs>(args?: SelectSubset<T, SettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Setting.
     * @param {SettingDeleteArgs} args - Arguments to delete one Setting.
     * @example
     * // Delete one Setting
     * const Setting = await prisma.setting.delete({
     *   where: {
     *     // ... filter to delete one Setting
     *   }
     * })
     * 
     */
    delete<T extends SettingDeleteArgs>(args: SelectSubset<T, SettingDeleteArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Setting.
     * @param {SettingUpdateArgs} args - Arguments to update one Setting.
     * @example
     * // Update one Setting
     * const setting = await prisma.setting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingUpdateArgs>(args: SelectSubset<T, SettingUpdateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Settings.
     * @param {SettingDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.setting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingDeleteManyArgs>(args?: SelectSubset<T, SettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const setting = await prisma.setting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingUpdateManyArgs>(args: SelectSubset<T, SettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Setting.
     * @param {SettingUpsertArgs} args - Arguments to update or create a Setting.
     * @example
     * // Update or create a Setting
     * const setting = await prisma.setting.upsert({
     *   create: {
     *     // ... data to create a Setting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setting we want to update
     *   }
     * })
     */
    upsert<T extends SettingUpsertArgs>(args: SelectSubset<T, SettingUpsertArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.setting.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingCountArgs>(
      args?: Subset<T, SettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingAggregateArgs>(args: Subset<T, SettingAggregateArgs>): Prisma.PrismaPromise<GetSettingAggregateType<T>>

    /**
     * Group by Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingGroupByArgs['orderBy'] }
        : { orderBy?: SettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Setting model
   */
  readonly fields: SettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Setting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Setting model
   */
  interface SettingFieldRefs {
    readonly id: FieldRef<"Setting", 'Int'>
    readonly code: FieldRef<"Setting", 'String'>
    readonly input_type: FieldRef<"Setting", 'InputType'>
    readonly value: FieldRef<"Setting", 'String'>
    readonly label: FieldRef<"Setting", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Setting findUnique
   */
  export type SettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findUniqueOrThrow
   */
  export type SettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findFirst
   */
  export type SettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findFirstOrThrow
   */
  export type SettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findMany
   */
  export type SettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting create
   */
  export type SettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * The data needed to create a Setting.
     */
    data: XOR<SettingCreateInput, SettingUncheckedCreateInput>
  }

  /**
   * Setting createMany
   */
  export type SettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting update
   */
  export type SettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * The data needed to update a Setting.
     */
    data: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
    /**
     * Choose, which Setting to update.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting updateMany
   */
  export type SettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingUpdateManyMutationInput, SettingUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
  }

  /**
   * Setting upsert
   */
  export type SettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * The filter to search for the Setting to update in case it exists.
     */
    where: SettingWhereUniqueInput
    /**
     * In case the Setting found by the `where` argument doesn't exist, create a new Setting with this data.
     */
    create: XOR<SettingCreateInput, SettingUncheckedCreateInput>
    /**
     * In case the Setting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
  }

  /**
   * Setting delete
   */
  export type SettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter which Setting to delete.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting deleteMany
   */
  export type SettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingWhereInput
    /**
     * Limit how many Settings to delete.
     */
    limit?: number
  }

  /**
   * Setting without action
   */
  export type SettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
  }


  /**
   * Model Robot
   */

  export type AggregateRobot = {
    _count: RobotCountAggregateOutputType | null
    _avg: RobotAvgAggregateOutputType | null
    _sum: RobotSumAggregateOutputType | null
    _min: RobotMinAggregateOutputType | null
    _max: RobotMaxAggregateOutputType | null
  }

  export type RobotAvgAggregateOutputType = {
    id: number | null
  }

  export type RobotSumAggregateOutputType = {
    id: number | null
  }

  export type RobotMinAggregateOutputType = {
    id: number | null
    user_agent: string | null
    allow: string | null
    disallow: string | null
  }

  export type RobotMaxAggregateOutputType = {
    id: number | null
    user_agent: string | null
    allow: string | null
    disallow: string | null
  }

  export type RobotCountAggregateOutputType = {
    id: number
    user_agent: number
    allow: number
    disallow: number
    _all: number
  }


  export type RobotAvgAggregateInputType = {
    id?: true
  }

  export type RobotSumAggregateInputType = {
    id?: true
  }

  export type RobotMinAggregateInputType = {
    id?: true
    user_agent?: true
    allow?: true
    disallow?: true
  }

  export type RobotMaxAggregateInputType = {
    id?: true
    user_agent?: true
    allow?: true
    disallow?: true
  }

  export type RobotCountAggregateInputType = {
    id?: true
    user_agent?: true
    allow?: true
    disallow?: true
    _all?: true
  }

  export type RobotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Robot to aggregate.
     */
    where?: RobotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Robots to fetch.
     */
    orderBy?: RobotOrderByWithRelationInput | RobotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RobotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Robots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Robots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Robots
    **/
    _count?: true | RobotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RobotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RobotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RobotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RobotMaxAggregateInputType
  }

  export type GetRobotAggregateType<T extends RobotAggregateArgs> = {
        [P in keyof T & keyof AggregateRobot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRobot[P]>
      : GetScalarType<T[P], AggregateRobot[P]>
  }




  export type RobotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RobotWhereInput
    orderBy?: RobotOrderByWithAggregationInput | RobotOrderByWithAggregationInput[]
    by: RobotScalarFieldEnum[] | RobotScalarFieldEnum
    having?: RobotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RobotCountAggregateInputType | true
    _avg?: RobotAvgAggregateInputType
    _sum?: RobotSumAggregateInputType
    _min?: RobotMinAggregateInputType
    _max?: RobotMaxAggregateInputType
  }

  export type RobotGroupByOutputType = {
    id: number
    user_agent: string
    allow: string | null
    disallow: string | null
    _count: RobotCountAggregateOutputType | null
    _avg: RobotAvgAggregateOutputType | null
    _sum: RobotSumAggregateOutputType | null
    _min: RobotMinAggregateOutputType | null
    _max: RobotMaxAggregateOutputType | null
  }

  type GetRobotGroupByPayload<T extends RobotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RobotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RobotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RobotGroupByOutputType[P]>
            : GetScalarType<T[P], RobotGroupByOutputType[P]>
        }
      >
    >


  export type RobotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_agent?: boolean
    allow?: boolean
    disallow?: boolean
  }, ExtArgs["result"]["robot"]>



  export type RobotSelectScalar = {
    id?: boolean
    user_agent?: boolean
    allow?: boolean
    disallow?: boolean
  }

  export type RobotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_agent" | "allow" | "disallow", ExtArgs["result"]["robot"]>

  export type $RobotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Robot"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_agent: string
      allow: string | null
      disallow: string | null
    }, ExtArgs["result"]["robot"]>
    composites: {}
  }

  type RobotGetPayload<S extends boolean | null | undefined | RobotDefaultArgs> = $Result.GetResult<Prisma.$RobotPayload, S>

  type RobotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RobotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RobotCountAggregateInputType | true
    }

  export interface RobotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Robot'], meta: { name: 'Robot' } }
    /**
     * Find zero or one Robot that matches the filter.
     * @param {RobotFindUniqueArgs} args - Arguments to find a Robot
     * @example
     * // Get one Robot
     * const robot = await prisma.robot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RobotFindUniqueArgs>(args: SelectSubset<T, RobotFindUniqueArgs<ExtArgs>>): Prisma__RobotClient<$Result.GetResult<Prisma.$RobotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Robot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RobotFindUniqueOrThrowArgs} args - Arguments to find a Robot
     * @example
     * // Get one Robot
     * const robot = await prisma.robot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RobotFindUniqueOrThrowArgs>(args: SelectSubset<T, RobotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RobotClient<$Result.GetResult<Prisma.$RobotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Robot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RobotFindFirstArgs} args - Arguments to find a Robot
     * @example
     * // Get one Robot
     * const robot = await prisma.robot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RobotFindFirstArgs>(args?: SelectSubset<T, RobotFindFirstArgs<ExtArgs>>): Prisma__RobotClient<$Result.GetResult<Prisma.$RobotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Robot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RobotFindFirstOrThrowArgs} args - Arguments to find a Robot
     * @example
     * // Get one Robot
     * const robot = await prisma.robot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RobotFindFirstOrThrowArgs>(args?: SelectSubset<T, RobotFindFirstOrThrowArgs<ExtArgs>>): Prisma__RobotClient<$Result.GetResult<Prisma.$RobotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Robots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RobotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Robots
     * const robots = await prisma.robot.findMany()
     * 
     * // Get first 10 Robots
     * const robots = await prisma.robot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const robotWithIdOnly = await prisma.robot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RobotFindManyArgs>(args?: SelectSubset<T, RobotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RobotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Robot.
     * @param {RobotCreateArgs} args - Arguments to create a Robot.
     * @example
     * // Create one Robot
     * const Robot = await prisma.robot.create({
     *   data: {
     *     // ... data to create a Robot
     *   }
     * })
     * 
     */
    create<T extends RobotCreateArgs>(args: SelectSubset<T, RobotCreateArgs<ExtArgs>>): Prisma__RobotClient<$Result.GetResult<Prisma.$RobotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Robots.
     * @param {RobotCreateManyArgs} args - Arguments to create many Robots.
     * @example
     * // Create many Robots
     * const robot = await prisma.robot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RobotCreateManyArgs>(args?: SelectSubset<T, RobotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Robot.
     * @param {RobotDeleteArgs} args - Arguments to delete one Robot.
     * @example
     * // Delete one Robot
     * const Robot = await prisma.robot.delete({
     *   where: {
     *     // ... filter to delete one Robot
     *   }
     * })
     * 
     */
    delete<T extends RobotDeleteArgs>(args: SelectSubset<T, RobotDeleteArgs<ExtArgs>>): Prisma__RobotClient<$Result.GetResult<Prisma.$RobotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Robot.
     * @param {RobotUpdateArgs} args - Arguments to update one Robot.
     * @example
     * // Update one Robot
     * const robot = await prisma.robot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RobotUpdateArgs>(args: SelectSubset<T, RobotUpdateArgs<ExtArgs>>): Prisma__RobotClient<$Result.GetResult<Prisma.$RobotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Robots.
     * @param {RobotDeleteManyArgs} args - Arguments to filter Robots to delete.
     * @example
     * // Delete a few Robots
     * const { count } = await prisma.robot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RobotDeleteManyArgs>(args?: SelectSubset<T, RobotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Robots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RobotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Robots
     * const robot = await prisma.robot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RobotUpdateManyArgs>(args: SelectSubset<T, RobotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Robot.
     * @param {RobotUpsertArgs} args - Arguments to update or create a Robot.
     * @example
     * // Update or create a Robot
     * const robot = await prisma.robot.upsert({
     *   create: {
     *     // ... data to create a Robot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Robot we want to update
     *   }
     * })
     */
    upsert<T extends RobotUpsertArgs>(args: SelectSubset<T, RobotUpsertArgs<ExtArgs>>): Prisma__RobotClient<$Result.GetResult<Prisma.$RobotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Robots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RobotCountArgs} args - Arguments to filter Robots to count.
     * @example
     * // Count the number of Robots
     * const count = await prisma.robot.count({
     *   where: {
     *     // ... the filter for the Robots we want to count
     *   }
     * })
    **/
    count<T extends RobotCountArgs>(
      args?: Subset<T, RobotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RobotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Robot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RobotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RobotAggregateArgs>(args: Subset<T, RobotAggregateArgs>): Prisma.PrismaPromise<GetRobotAggregateType<T>>

    /**
     * Group by Robot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RobotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RobotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RobotGroupByArgs['orderBy'] }
        : { orderBy?: RobotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RobotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRobotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Robot model
   */
  readonly fields: RobotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Robot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RobotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Robot model
   */
  interface RobotFieldRefs {
    readonly id: FieldRef<"Robot", 'Int'>
    readonly user_agent: FieldRef<"Robot", 'String'>
    readonly allow: FieldRef<"Robot", 'String'>
    readonly disallow: FieldRef<"Robot", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Robot findUnique
   */
  export type RobotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Robot
     */
    select?: RobotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Robot
     */
    omit?: RobotOmit<ExtArgs> | null
    /**
     * Filter, which Robot to fetch.
     */
    where: RobotWhereUniqueInput
  }

  /**
   * Robot findUniqueOrThrow
   */
  export type RobotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Robot
     */
    select?: RobotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Robot
     */
    omit?: RobotOmit<ExtArgs> | null
    /**
     * Filter, which Robot to fetch.
     */
    where: RobotWhereUniqueInput
  }

  /**
   * Robot findFirst
   */
  export type RobotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Robot
     */
    select?: RobotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Robot
     */
    omit?: RobotOmit<ExtArgs> | null
    /**
     * Filter, which Robot to fetch.
     */
    where?: RobotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Robots to fetch.
     */
    orderBy?: RobotOrderByWithRelationInput | RobotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Robots.
     */
    cursor?: RobotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Robots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Robots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Robots.
     */
    distinct?: RobotScalarFieldEnum | RobotScalarFieldEnum[]
  }

  /**
   * Robot findFirstOrThrow
   */
  export type RobotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Robot
     */
    select?: RobotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Robot
     */
    omit?: RobotOmit<ExtArgs> | null
    /**
     * Filter, which Robot to fetch.
     */
    where?: RobotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Robots to fetch.
     */
    orderBy?: RobotOrderByWithRelationInput | RobotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Robots.
     */
    cursor?: RobotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Robots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Robots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Robots.
     */
    distinct?: RobotScalarFieldEnum | RobotScalarFieldEnum[]
  }

  /**
   * Robot findMany
   */
  export type RobotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Robot
     */
    select?: RobotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Robot
     */
    omit?: RobotOmit<ExtArgs> | null
    /**
     * Filter, which Robots to fetch.
     */
    where?: RobotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Robots to fetch.
     */
    orderBy?: RobotOrderByWithRelationInput | RobotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Robots.
     */
    cursor?: RobotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Robots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Robots.
     */
    skip?: number
    distinct?: RobotScalarFieldEnum | RobotScalarFieldEnum[]
  }

  /**
   * Robot create
   */
  export type RobotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Robot
     */
    select?: RobotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Robot
     */
    omit?: RobotOmit<ExtArgs> | null
    /**
     * The data needed to create a Robot.
     */
    data: XOR<RobotCreateInput, RobotUncheckedCreateInput>
  }

  /**
   * Robot createMany
   */
  export type RobotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Robots.
     */
    data: RobotCreateManyInput | RobotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Robot update
   */
  export type RobotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Robot
     */
    select?: RobotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Robot
     */
    omit?: RobotOmit<ExtArgs> | null
    /**
     * The data needed to update a Robot.
     */
    data: XOR<RobotUpdateInput, RobotUncheckedUpdateInput>
    /**
     * Choose, which Robot to update.
     */
    where: RobotWhereUniqueInput
  }

  /**
   * Robot updateMany
   */
  export type RobotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Robots.
     */
    data: XOR<RobotUpdateManyMutationInput, RobotUncheckedUpdateManyInput>
    /**
     * Filter which Robots to update
     */
    where?: RobotWhereInput
    /**
     * Limit how many Robots to update.
     */
    limit?: number
  }

  /**
   * Robot upsert
   */
  export type RobotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Robot
     */
    select?: RobotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Robot
     */
    omit?: RobotOmit<ExtArgs> | null
    /**
     * The filter to search for the Robot to update in case it exists.
     */
    where: RobotWhereUniqueInput
    /**
     * In case the Robot found by the `where` argument doesn't exist, create a new Robot with this data.
     */
    create: XOR<RobotCreateInput, RobotUncheckedCreateInput>
    /**
     * In case the Robot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RobotUpdateInput, RobotUncheckedUpdateInput>
  }

  /**
   * Robot delete
   */
  export type RobotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Robot
     */
    select?: RobotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Robot
     */
    omit?: RobotOmit<ExtArgs> | null
    /**
     * Filter which Robot to delete.
     */
    where: RobotWhereUniqueInput
  }

  /**
   * Robot deleteMany
   */
  export type RobotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Robots to delete
     */
    where?: RobotWhereInput
    /**
     * Limit how many Robots to delete.
     */
    limit?: number
  }

  /**
   * Robot without action
   */
  export type RobotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Robot
     */
    select?: RobotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Robot
     */
    omit?: RobotOmit<ExtArgs> | null
  }


  /**
   * Model CategoryCard
   */

  export type AggregateCategoryCard = {
    _count: CategoryCardCountAggregateOutputType | null
    _avg: CategoryCardAvgAggregateOutputType | null
    _sum: CategoryCardSumAggregateOutputType | null
    _min: CategoryCardMinAggregateOutputType | null
    _max: CategoryCardMaxAggregateOutputType | null
  }

  export type CategoryCardAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoryCardSumAggregateOutputType = {
    id: number | null
  }

  export type CategoryCardMinAggregateOutputType = {
    id: number | null
    published: boolean | null
    label: string | null
  }

  export type CategoryCardMaxAggregateOutputType = {
    id: number | null
    published: boolean | null
    label: string | null
  }

  export type CategoryCardCountAggregateOutputType = {
    id: number
    published: number
    label: number
    _all: number
  }


  export type CategoryCardAvgAggregateInputType = {
    id?: true
  }

  export type CategoryCardSumAggregateInputType = {
    id?: true
  }

  export type CategoryCardMinAggregateInputType = {
    id?: true
    published?: true
    label?: true
  }

  export type CategoryCardMaxAggregateInputType = {
    id?: true
    published?: true
    label?: true
  }

  export type CategoryCardCountAggregateInputType = {
    id?: true
    published?: true
    label?: true
    _all?: true
  }

  export type CategoryCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoryCard to aggregate.
     */
    where?: CategoryCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryCards to fetch.
     */
    orderBy?: CategoryCardOrderByWithRelationInput | CategoryCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoryCards
    **/
    _count?: true | CategoryCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoryCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryCardMaxAggregateInputType
  }

  export type GetCategoryCardAggregateType<T extends CategoryCardAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoryCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoryCard[P]>
      : GetScalarType<T[P], AggregateCategoryCard[P]>
  }




  export type CategoryCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryCardWhereInput
    orderBy?: CategoryCardOrderByWithAggregationInput | CategoryCardOrderByWithAggregationInput[]
    by: CategoryCardScalarFieldEnum[] | CategoryCardScalarFieldEnum
    having?: CategoryCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCardCountAggregateInputType | true
    _avg?: CategoryCardAvgAggregateInputType
    _sum?: CategoryCardSumAggregateInputType
    _min?: CategoryCardMinAggregateInputType
    _max?: CategoryCardMaxAggregateInputType
  }

  export type CategoryCardGroupByOutputType = {
    id: number
    published: boolean
    label: string
    _count: CategoryCardCountAggregateOutputType | null
    _avg: CategoryCardAvgAggregateOutputType | null
    _sum: CategoryCardSumAggregateOutputType | null
    _min: CategoryCardMinAggregateOutputType | null
    _max: CategoryCardMaxAggregateOutputType | null
  }

  type GetCategoryCardGroupByPayload<T extends CategoryCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryCardGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryCardGroupByOutputType[P]>
        }
      >
    >


  export type CategoryCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    published?: boolean
    label?: boolean
    cards?: boolean | CategoryCard$cardsArgs<ExtArgs>
    _count?: boolean | CategoryCardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoryCard"]>



  export type CategoryCardSelectScalar = {
    id?: boolean
    published?: boolean
    label?: boolean
  }

  export type CategoryCardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "published" | "label", ExtArgs["result"]["categoryCard"]>
  export type CategoryCardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cards?: boolean | CategoryCard$cardsArgs<ExtArgs>
    _count?: boolean | CategoryCardCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoryCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CategoryCard"
    objects: {
      cards: Prisma.$CardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      published: boolean
      label: string
    }, ExtArgs["result"]["categoryCard"]>
    composites: {}
  }

  type CategoryCardGetPayload<S extends boolean | null | undefined | CategoryCardDefaultArgs> = $Result.GetResult<Prisma.$CategoryCardPayload, S>

  type CategoryCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryCardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCardCountAggregateInputType | true
    }

  export interface CategoryCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CategoryCard'], meta: { name: 'CategoryCard' } }
    /**
     * Find zero or one CategoryCard that matches the filter.
     * @param {CategoryCardFindUniqueArgs} args - Arguments to find a CategoryCard
     * @example
     * // Get one CategoryCard
     * const categoryCard = await prisma.categoryCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryCardFindUniqueArgs>(args: SelectSubset<T, CategoryCardFindUniqueArgs<ExtArgs>>): Prisma__CategoryCardClient<$Result.GetResult<Prisma.$CategoryCardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CategoryCard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryCardFindUniqueOrThrowArgs} args - Arguments to find a CategoryCard
     * @example
     * // Get one CategoryCard
     * const categoryCard = await prisma.categoryCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryCardFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryCardClient<$Result.GetResult<Prisma.$CategoryCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CategoryCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCardFindFirstArgs} args - Arguments to find a CategoryCard
     * @example
     * // Get one CategoryCard
     * const categoryCard = await prisma.categoryCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryCardFindFirstArgs>(args?: SelectSubset<T, CategoryCardFindFirstArgs<ExtArgs>>): Prisma__CategoryCardClient<$Result.GetResult<Prisma.$CategoryCardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CategoryCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCardFindFirstOrThrowArgs} args - Arguments to find a CategoryCard
     * @example
     * // Get one CategoryCard
     * const categoryCard = await prisma.categoryCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryCardFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryCardClient<$Result.GetResult<Prisma.$CategoryCardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CategoryCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoryCards
     * const categoryCards = await prisma.categoryCard.findMany()
     * 
     * // Get first 10 CategoryCards
     * const categoryCards = await prisma.categoryCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryCardWithIdOnly = await prisma.categoryCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryCardFindManyArgs>(args?: SelectSubset<T, CategoryCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CategoryCard.
     * @param {CategoryCardCreateArgs} args - Arguments to create a CategoryCard.
     * @example
     * // Create one CategoryCard
     * const CategoryCard = await prisma.categoryCard.create({
     *   data: {
     *     // ... data to create a CategoryCard
     *   }
     * })
     * 
     */
    create<T extends CategoryCardCreateArgs>(args: SelectSubset<T, CategoryCardCreateArgs<ExtArgs>>): Prisma__CategoryCardClient<$Result.GetResult<Prisma.$CategoryCardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CategoryCards.
     * @param {CategoryCardCreateManyArgs} args - Arguments to create many CategoryCards.
     * @example
     * // Create many CategoryCards
     * const categoryCard = await prisma.categoryCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCardCreateManyArgs>(args?: SelectSubset<T, CategoryCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CategoryCard.
     * @param {CategoryCardDeleteArgs} args - Arguments to delete one CategoryCard.
     * @example
     * // Delete one CategoryCard
     * const CategoryCard = await prisma.categoryCard.delete({
     *   where: {
     *     // ... filter to delete one CategoryCard
     *   }
     * })
     * 
     */
    delete<T extends CategoryCardDeleteArgs>(args: SelectSubset<T, CategoryCardDeleteArgs<ExtArgs>>): Prisma__CategoryCardClient<$Result.GetResult<Prisma.$CategoryCardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CategoryCard.
     * @param {CategoryCardUpdateArgs} args - Arguments to update one CategoryCard.
     * @example
     * // Update one CategoryCard
     * const categoryCard = await prisma.categoryCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryCardUpdateArgs>(args: SelectSubset<T, CategoryCardUpdateArgs<ExtArgs>>): Prisma__CategoryCardClient<$Result.GetResult<Prisma.$CategoryCardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CategoryCards.
     * @param {CategoryCardDeleteManyArgs} args - Arguments to filter CategoryCards to delete.
     * @example
     * // Delete a few CategoryCards
     * const { count } = await prisma.categoryCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryCardDeleteManyArgs>(args?: SelectSubset<T, CategoryCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoryCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoryCards
     * const categoryCard = await prisma.categoryCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryCardUpdateManyArgs>(args: SelectSubset<T, CategoryCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CategoryCard.
     * @param {CategoryCardUpsertArgs} args - Arguments to update or create a CategoryCard.
     * @example
     * // Update or create a CategoryCard
     * const categoryCard = await prisma.categoryCard.upsert({
     *   create: {
     *     // ... data to create a CategoryCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoryCard we want to update
     *   }
     * })
     */
    upsert<T extends CategoryCardUpsertArgs>(args: SelectSubset<T, CategoryCardUpsertArgs<ExtArgs>>): Prisma__CategoryCardClient<$Result.GetResult<Prisma.$CategoryCardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CategoryCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCardCountArgs} args - Arguments to filter CategoryCards to count.
     * @example
     * // Count the number of CategoryCards
     * const count = await prisma.categoryCard.count({
     *   where: {
     *     // ... the filter for the CategoryCards we want to count
     *   }
     * })
    **/
    count<T extends CategoryCardCountArgs>(
      args?: Subset<T, CategoryCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoryCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryCardAggregateArgs>(args: Subset<T, CategoryCardAggregateArgs>): Prisma.PrismaPromise<GetCategoryCardAggregateType<T>>

    /**
     * Group by CategoryCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryCardGroupByArgs['orderBy'] }
        : { orderBy?: CategoryCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CategoryCard model
   */
  readonly fields: CategoryCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoryCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cards<T extends CategoryCard$cardsArgs<ExtArgs> = {}>(args?: Subset<T, CategoryCard$cardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CategoryCard model
   */
  interface CategoryCardFieldRefs {
    readonly id: FieldRef<"CategoryCard", 'Int'>
    readonly published: FieldRef<"CategoryCard", 'Boolean'>
    readonly label: FieldRef<"CategoryCard", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CategoryCard findUnique
   */
  export type CategoryCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCard
     */
    select?: CategoryCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryCard
     */
    omit?: CategoryCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryCardInclude<ExtArgs> | null
    /**
     * Filter, which CategoryCard to fetch.
     */
    where: CategoryCardWhereUniqueInput
  }

  /**
   * CategoryCard findUniqueOrThrow
   */
  export type CategoryCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCard
     */
    select?: CategoryCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryCard
     */
    omit?: CategoryCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryCardInclude<ExtArgs> | null
    /**
     * Filter, which CategoryCard to fetch.
     */
    where: CategoryCardWhereUniqueInput
  }

  /**
   * CategoryCard findFirst
   */
  export type CategoryCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCard
     */
    select?: CategoryCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryCard
     */
    omit?: CategoryCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryCardInclude<ExtArgs> | null
    /**
     * Filter, which CategoryCard to fetch.
     */
    where?: CategoryCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryCards to fetch.
     */
    orderBy?: CategoryCardOrderByWithRelationInput | CategoryCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoryCards.
     */
    cursor?: CategoryCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoryCards.
     */
    distinct?: CategoryCardScalarFieldEnum | CategoryCardScalarFieldEnum[]
  }

  /**
   * CategoryCard findFirstOrThrow
   */
  export type CategoryCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCard
     */
    select?: CategoryCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryCard
     */
    omit?: CategoryCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryCardInclude<ExtArgs> | null
    /**
     * Filter, which CategoryCard to fetch.
     */
    where?: CategoryCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryCards to fetch.
     */
    orderBy?: CategoryCardOrderByWithRelationInput | CategoryCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoryCards.
     */
    cursor?: CategoryCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoryCards.
     */
    distinct?: CategoryCardScalarFieldEnum | CategoryCardScalarFieldEnum[]
  }

  /**
   * CategoryCard findMany
   */
  export type CategoryCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCard
     */
    select?: CategoryCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryCard
     */
    omit?: CategoryCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryCardInclude<ExtArgs> | null
    /**
     * Filter, which CategoryCards to fetch.
     */
    where?: CategoryCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryCards to fetch.
     */
    orderBy?: CategoryCardOrderByWithRelationInput | CategoryCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoryCards.
     */
    cursor?: CategoryCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryCards.
     */
    skip?: number
    distinct?: CategoryCardScalarFieldEnum | CategoryCardScalarFieldEnum[]
  }

  /**
   * CategoryCard create
   */
  export type CategoryCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCard
     */
    select?: CategoryCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryCard
     */
    omit?: CategoryCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryCardInclude<ExtArgs> | null
    /**
     * The data needed to create a CategoryCard.
     */
    data: XOR<CategoryCardCreateInput, CategoryCardUncheckedCreateInput>
  }

  /**
   * CategoryCard createMany
   */
  export type CategoryCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CategoryCards.
     */
    data: CategoryCardCreateManyInput | CategoryCardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CategoryCard update
   */
  export type CategoryCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCard
     */
    select?: CategoryCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryCard
     */
    omit?: CategoryCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryCardInclude<ExtArgs> | null
    /**
     * The data needed to update a CategoryCard.
     */
    data: XOR<CategoryCardUpdateInput, CategoryCardUncheckedUpdateInput>
    /**
     * Choose, which CategoryCard to update.
     */
    where: CategoryCardWhereUniqueInput
  }

  /**
   * CategoryCard updateMany
   */
  export type CategoryCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CategoryCards.
     */
    data: XOR<CategoryCardUpdateManyMutationInput, CategoryCardUncheckedUpdateManyInput>
    /**
     * Filter which CategoryCards to update
     */
    where?: CategoryCardWhereInput
    /**
     * Limit how many CategoryCards to update.
     */
    limit?: number
  }

  /**
   * CategoryCard upsert
   */
  export type CategoryCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCard
     */
    select?: CategoryCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryCard
     */
    omit?: CategoryCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryCardInclude<ExtArgs> | null
    /**
     * The filter to search for the CategoryCard to update in case it exists.
     */
    where: CategoryCardWhereUniqueInput
    /**
     * In case the CategoryCard found by the `where` argument doesn't exist, create a new CategoryCard with this data.
     */
    create: XOR<CategoryCardCreateInput, CategoryCardUncheckedCreateInput>
    /**
     * In case the CategoryCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryCardUpdateInput, CategoryCardUncheckedUpdateInput>
  }

  /**
   * CategoryCard delete
   */
  export type CategoryCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCard
     */
    select?: CategoryCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryCard
     */
    omit?: CategoryCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryCardInclude<ExtArgs> | null
    /**
     * Filter which CategoryCard to delete.
     */
    where: CategoryCardWhereUniqueInput
  }

  /**
   * CategoryCard deleteMany
   */
  export type CategoryCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoryCards to delete
     */
    where?: CategoryCardWhereInput
    /**
     * Limit how many CategoryCards to delete.
     */
    limit?: number
  }

  /**
   * CategoryCard.cards
   */
  export type CategoryCard$cardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    where?: CardWhereInput
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    cursor?: CardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * CategoryCard without action
   */
  export type CategoryCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCard
     */
    select?: CategoryCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryCard
     */
    omit?: CategoryCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryCardInclude<ExtArgs> | null
  }


  /**
   * Model Card
   */

  export type AggregateCard = {
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  export type CardAvgAggregateOutputType = {
    id: number | null
    category_card_id: number | null
  }

  export type CardSumAggregateOutputType = {
    id: number | null
    category_card_id: number | null
  }

  export type CardMinAggregateOutputType = {
    id: number | null
    published: boolean | null
    type: $Enums.CardType | null
    category_card_id: number | null
    label: string | null
    sub_label: string | null
    referal_key: string | null
    referal_link: string | null
    play_with_real_money: string | null
    play_for_free: string | null
    terms_and_condition: string | null
  }

  export type CardMaxAggregateOutputType = {
    id: number | null
    published: boolean | null
    type: $Enums.CardType | null
    category_card_id: number | null
    label: string | null
    sub_label: string | null
    referal_key: string | null
    referal_link: string | null
    play_with_real_money: string | null
    play_for_free: string | null
    terms_and_condition: string | null
  }

  export type CardCountAggregateOutputType = {
    id: number
    published: number
    type: number
    category_card_id: number
    label: number
    sub_label: number
    referal_key: number
    referal_link: number
    play_with_real_money: number
    play_for_free: number
    terms_and_condition: number
    _all: number
  }


  export type CardAvgAggregateInputType = {
    id?: true
    category_card_id?: true
  }

  export type CardSumAggregateInputType = {
    id?: true
    category_card_id?: true
  }

  export type CardMinAggregateInputType = {
    id?: true
    published?: true
    type?: true
    category_card_id?: true
    label?: true
    sub_label?: true
    referal_key?: true
    referal_link?: true
    play_with_real_money?: true
    play_for_free?: true
    terms_and_condition?: true
  }

  export type CardMaxAggregateInputType = {
    id?: true
    published?: true
    type?: true
    category_card_id?: true
    label?: true
    sub_label?: true
    referal_key?: true
    referal_link?: true
    play_with_real_money?: true
    play_for_free?: true
    terms_and_condition?: true
  }

  export type CardCountAggregateInputType = {
    id?: true
    published?: true
    type?: true
    category_card_id?: true
    label?: true
    sub_label?: true
    referal_key?: true
    referal_link?: true
    play_with_real_money?: true
    play_for_free?: true
    terms_and_condition?: true
    _all?: true
  }

  export type CardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Card to aggregate.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cards
    **/
    _count?: true | CardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardMaxAggregateInputType
  }

  export type GetCardAggregateType<T extends CardAggregateArgs> = {
        [P in keyof T & keyof AggregateCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCard[P]>
      : GetScalarType<T[P], AggregateCard[P]>
  }




  export type CardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWhereInput
    orderBy?: CardOrderByWithAggregationInput | CardOrderByWithAggregationInput[]
    by: CardScalarFieldEnum[] | CardScalarFieldEnum
    having?: CardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardCountAggregateInputType | true
    _avg?: CardAvgAggregateInputType
    _sum?: CardSumAggregateInputType
    _min?: CardMinAggregateInputType
    _max?: CardMaxAggregateInputType
  }

  export type CardGroupByOutputType = {
    id: number
    published: boolean
    type: $Enums.CardType
    category_card_id: number | null
    label: string
    sub_label: string | null
    referal_key: string
    referal_link: string | null
    play_with_real_money: string | null
    play_for_free: string | null
    terms_and_condition: string | null
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  type GetCardGroupByPayload<T extends CardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardGroupByOutputType[P]>
            : GetScalarType<T[P], CardGroupByOutputType[P]>
        }
      >
    >


  export type CardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    published?: boolean
    type?: boolean
    category_card_id?: boolean
    label?: boolean
    sub_label?: boolean
    referal_key?: boolean
    referal_link?: boolean
    play_with_real_money?: boolean
    play_for_free?: boolean
    terms_and_condition?: boolean
    category_card?: boolean | Card$category_cardArgs<ExtArgs>
    icon_card_images?: boolean | Card$icon_card_imagesArgs<ExtArgs>
    images?: boolean | Card$imagesArgs<ExtArgs>
    options?: boolean | Card$optionsArgs<ExtArgs>
    faqs?: boolean | Card$faqsArgs<ExtArgs>
    _count?: boolean | CardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["card"]>



  export type CardSelectScalar = {
    id?: boolean
    published?: boolean
    type?: boolean
    category_card_id?: boolean
    label?: boolean
    sub_label?: boolean
    referal_key?: boolean
    referal_link?: boolean
    play_with_real_money?: boolean
    play_for_free?: boolean
    terms_and_condition?: boolean
  }

  export type CardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "published" | "type" | "category_card_id" | "label" | "sub_label" | "referal_key" | "referal_link" | "play_with_real_money" | "play_for_free" | "terms_and_condition", ExtArgs["result"]["card"]>
  export type CardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category_card?: boolean | Card$category_cardArgs<ExtArgs>
    icon_card_images?: boolean | Card$icon_card_imagesArgs<ExtArgs>
    images?: boolean | Card$imagesArgs<ExtArgs>
    options?: boolean | Card$optionsArgs<ExtArgs>
    faqs?: boolean | Card$faqsArgs<ExtArgs>
    _count?: boolean | CardCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Card"
    objects: {
      category_card: Prisma.$CategoryCardPayload<ExtArgs> | null
      icon_card_images: Prisma.$CardIconImagePayload<ExtArgs>[]
      images: Prisma.$CardImagePayload<ExtArgs>[]
      options: Prisma.$CardOptionPayload<ExtArgs>[]
      faqs: Prisma.$FaqCardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      published: boolean
      type: $Enums.CardType
      category_card_id: number | null
      label: string
      sub_label: string | null
      referal_key: string
      referal_link: string | null
      play_with_real_money: string | null
      play_for_free: string | null
      terms_and_condition: string | null
    }, ExtArgs["result"]["card"]>
    composites: {}
  }

  type CardGetPayload<S extends boolean | null | undefined | CardDefaultArgs> = $Result.GetResult<Prisma.$CardPayload, S>

  type CardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CardCountAggregateInputType | true
    }

  export interface CardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Card'], meta: { name: 'Card' } }
    /**
     * Find zero or one Card that matches the filter.
     * @param {CardFindUniqueArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardFindUniqueArgs>(args: SelectSubset<T, CardFindUniqueArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Card that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CardFindUniqueOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardFindUniqueOrThrowArgs>(args: SelectSubset<T, CardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Card that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardFindFirstArgs>(args?: SelectSubset<T, CardFindFirstArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Card that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardFindFirstOrThrowArgs>(args?: SelectSubset<T, CardFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cards
     * const cards = await prisma.card.findMany()
     * 
     * // Get first 10 Cards
     * const cards = await prisma.card.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardWithIdOnly = await prisma.card.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CardFindManyArgs>(args?: SelectSubset<T, CardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Card.
     * @param {CardCreateArgs} args - Arguments to create a Card.
     * @example
     * // Create one Card
     * const Card = await prisma.card.create({
     *   data: {
     *     // ... data to create a Card
     *   }
     * })
     * 
     */
    create<T extends CardCreateArgs>(args: SelectSubset<T, CardCreateArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cards.
     * @param {CardCreateManyArgs} args - Arguments to create many Cards.
     * @example
     * // Create many Cards
     * const card = await prisma.card.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardCreateManyArgs>(args?: SelectSubset<T, CardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Card.
     * @param {CardDeleteArgs} args - Arguments to delete one Card.
     * @example
     * // Delete one Card
     * const Card = await prisma.card.delete({
     *   where: {
     *     // ... filter to delete one Card
     *   }
     * })
     * 
     */
    delete<T extends CardDeleteArgs>(args: SelectSubset<T, CardDeleteArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Card.
     * @param {CardUpdateArgs} args - Arguments to update one Card.
     * @example
     * // Update one Card
     * const card = await prisma.card.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardUpdateArgs>(args: SelectSubset<T, CardUpdateArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cards.
     * @param {CardDeleteManyArgs} args - Arguments to filter Cards to delete.
     * @example
     * // Delete a few Cards
     * const { count } = await prisma.card.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardDeleteManyArgs>(args?: SelectSubset<T, CardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cards
     * const card = await prisma.card.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardUpdateManyArgs>(args: SelectSubset<T, CardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Card.
     * @param {CardUpsertArgs} args - Arguments to update or create a Card.
     * @example
     * // Update or create a Card
     * const card = await prisma.card.upsert({
     *   create: {
     *     // ... data to create a Card
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Card we want to update
     *   }
     * })
     */
    upsert<T extends CardUpsertArgs>(args: SelectSubset<T, CardUpsertArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardCountArgs} args - Arguments to filter Cards to count.
     * @example
     * // Count the number of Cards
     * const count = await prisma.card.count({
     *   where: {
     *     // ... the filter for the Cards we want to count
     *   }
     * })
    **/
    count<T extends CardCountArgs>(
      args?: Subset<T, CardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardAggregateArgs>(args: Subset<T, CardAggregateArgs>): Prisma.PrismaPromise<GetCardAggregateType<T>>

    /**
     * Group by Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardGroupByArgs['orderBy'] }
        : { orderBy?: CardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Card model
   */
  readonly fields: CardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Card.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category_card<T extends Card$category_cardArgs<ExtArgs> = {}>(args?: Subset<T, Card$category_cardArgs<ExtArgs>>): Prisma__CategoryCardClient<$Result.GetResult<Prisma.$CategoryCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    icon_card_images<T extends Card$icon_card_imagesArgs<ExtArgs> = {}>(args?: Subset<T, Card$icon_card_imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardIconImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    images<T extends Card$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Card$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    options<T extends Card$optionsArgs<ExtArgs> = {}>(args?: Subset<T, Card$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    faqs<T extends Card$faqsArgs<ExtArgs> = {}>(args?: Subset<T, Card$faqsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Card model
   */
  interface CardFieldRefs {
    readonly id: FieldRef<"Card", 'Int'>
    readonly published: FieldRef<"Card", 'Boolean'>
    readonly type: FieldRef<"Card", 'CardType'>
    readonly category_card_id: FieldRef<"Card", 'Int'>
    readonly label: FieldRef<"Card", 'String'>
    readonly sub_label: FieldRef<"Card", 'String'>
    readonly referal_key: FieldRef<"Card", 'String'>
    readonly referal_link: FieldRef<"Card", 'String'>
    readonly play_with_real_money: FieldRef<"Card", 'String'>
    readonly play_for_free: FieldRef<"Card", 'String'>
    readonly terms_and_condition: FieldRef<"Card", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Card findUnique
   */
  export type CardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card findUniqueOrThrow
   */
  export type CardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card findFirst
   */
  export type CardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Card findFirstOrThrow
   */
  export type CardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Card findMany
   */
  export type CardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Cards to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Card create
   */
  export type CardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * The data needed to create a Card.
     */
    data: XOR<CardCreateInput, CardUncheckedCreateInput>
  }

  /**
   * Card createMany
   */
  export type CardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cards.
     */
    data: CardCreateManyInput | CardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Card update
   */
  export type CardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * The data needed to update a Card.
     */
    data: XOR<CardUpdateInput, CardUncheckedUpdateInput>
    /**
     * Choose, which Card to update.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card updateMany
   */
  export type CardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cards.
     */
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyInput>
    /**
     * Filter which Cards to update
     */
    where?: CardWhereInput
    /**
     * Limit how many Cards to update.
     */
    limit?: number
  }

  /**
   * Card upsert
   */
  export type CardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * The filter to search for the Card to update in case it exists.
     */
    where: CardWhereUniqueInput
    /**
     * In case the Card found by the `where` argument doesn't exist, create a new Card with this data.
     */
    create: XOR<CardCreateInput, CardUncheckedCreateInput>
    /**
     * In case the Card was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardUpdateInput, CardUncheckedUpdateInput>
  }

  /**
   * Card delete
   */
  export type CardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter which Card to delete.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card deleteMany
   */
  export type CardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cards to delete
     */
    where?: CardWhereInput
    /**
     * Limit how many Cards to delete.
     */
    limit?: number
  }

  /**
   * Card.category_card
   */
  export type Card$category_cardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCard
     */
    select?: CategoryCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryCard
     */
    omit?: CategoryCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryCardInclude<ExtArgs> | null
    where?: CategoryCardWhereInput
  }

  /**
   * Card.icon_card_images
   */
  export type Card$icon_card_imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardIconImage
     */
    select?: CardIconImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardIconImage
     */
    omit?: CardIconImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIconImageInclude<ExtArgs> | null
    where?: CardIconImageWhereInput
    orderBy?: CardIconImageOrderByWithRelationInput | CardIconImageOrderByWithRelationInput[]
    cursor?: CardIconImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardIconImageScalarFieldEnum | CardIconImageScalarFieldEnum[]
  }

  /**
   * Card.images
   */
  export type Card$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardImage
     */
    select?: CardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardImage
     */
    omit?: CardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardImageInclude<ExtArgs> | null
    where?: CardImageWhereInput
    orderBy?: CardImageOrderByWithRelationInput | CardImageOrderByWithRelationInput[]
    cursor?: CardImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardImageScalarFieldEnum | CardImageScalarFieldEnum[]
  }

  /**
   * Card.options
   */
  export type Card$optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOption
     */
    select?: CardOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardOption
     */
    omit?: CardOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOptionInclude<ExtArgs> | null
    where?: CardOptionWhereInput
    orderBy?: CardOptionOrderByWithRelationInput | CardOptionOrderByWithRelationInput[]
    cursor?: CardOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardOptionScalarFieldEnum | CardOptionScalarFieldEnum[]
  }

  /**
   * Card.faqs
   */
  export type Card$faqsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCard
     */
    select?: FaqCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqCard
     */
    omit?: FaqCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqCardInclude<ExtArgs> | null
    where?: FaqCardWhereInput
    orderBy?: FaqCardOrderByWithRelationInput | FaqCardOrderByWithRelationInput[]
    cursor?: FaqCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FaqCardScalarFieldEnum | FaqCardScalarFieldEnum[]
  }

  /**
   * Card without action
   */
  export type CardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
  }


  /**
   * Model Faq
   */

  export type AggregateFaq = {
    _count: FaqCountAggregateOutputType | null
    _avg: FaqAvgAggregateOutputType | null
    _sum: FaqSumAggregateOutputType | null
    _min: FaqMinAggregateOutputType | null
    _max: FaqMaxAggregateOutputType | null
  }

  export type FaqAvgAggregateOutputType = {
    id: number | null
    position: number | null
  }

  export type FaqSumAggregateOutputType = {
    id: number | null
    position: number | null
  }

  export type FaqMinAggregateOutputType = {
    id: number | null
    published: boolean | null
    question: string | null
    answer: string | null
    position: number | null
  }

  export type FaqMaxAggregateOutputType = {
    id: number | null
    published: boolean | null
    question: string | null
    answer: string | null
    position: number | null
  }

  export type FaqCountAggregateOutputType = {
    id: number
    published: number
    question: number
    answer: number
    position: number
    _all: number
  }


  export type FaqAvgAggregateInputType = {
    id?: true
    position?: true
  }

  export type FaqSumAggregateInputType = {
    id?: true
    position?: true
  }

  export type FaqMinAggregateInputType = {
    id?: true
    published?: true
    question?: true
    answer?: true
    position?: true
  }

  export type FaqMaxAggregateInputType = {
    id?: true
    published?: true
    question?: true
    answer?: true
    position?: true
  }

  export type FaqCountAggregateInputType = {
    id?: true
    published?: true
    question?: true
    answer?: true
    position?: true
    _all?: true
  }

  export type FaqAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Faq to aggregate.
     */
    where?: FaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faqs to fetch.
     */
    orderBy?: FaqOrderByWithRelationInput | FaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Faqs
    **/
    _count?: true | FaqCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FaqAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FaqSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FaqMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FaqMaxAggregateInputType
  }

  export type GetFaqAggregateType<T extends FaqAggregateArgs> = {
        [P in keyof T & keyof AggregateFaq]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaq[P]>
      : GetScalarType<T[P], AggregateFaq[P]>
  }




  export type FaqGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaqWhereInput
    orderBy?: FaqOrderByWithAggregationInput | FaqOrderByWithAggregationInput[]
    by: FaqScalarFieldEnum[] | FaqScalarFieldEnum
    having?: FaqScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FaqCountAggregateInputType | true
    _avg?: FaqAvgAggregateInputType
    _sum?: FaqSumAggregateInputType
    _min?: FaqMinAggregateInputType
    _max?: FaqMaxAggregateInputType
  }

  export type FaqGroupByOutputType = {
    id: number
    published: boolean
    question: string
    answer: string
    position: number | null
    _count: FaqCountAggregateOutputType | null
    _avg: FaqAvgAggregateOutputType | null
    _sum: FaqSumAggregateOutputType | null
    _min: FaqMinAggregateOutputType | null
    _max: FaqMaxAggregateOutputType | null
  }

  type GetFaqGroupByPayload<T extends FaqGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FaqGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FaqGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FaqGroupByOutputType[P]>
            : GetScalarType<T[P], FaqGroupByOutputType[P]>
        }
      >
    >


  export type FaqSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    published?: boolean
    question?: boolean
    answer?: boolean
    position?: boolean
    cards?: boolean | Faq$cardsArgs<ExtArgs>
    _count?: boolean | FaqCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faq"]>



  export type FaqSelectScalar = {
    id?: boolean
    published?: boolean
    question?: boolean
    answer?: boolean
    position?: boolean
  }

  export type FaqOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "published" | "question" | "answer" | "position", ExtArgs["result"]["faq"]>
  export type FaqInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cards?: boolean | Faq$cardsArgs<ExtArgs>
    _count?: boolean | FaqCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $FaqPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Faq"
    objects: {
      cards: Prisma.$FaqCardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      published: boolean
      question: string
      answer: string
      position: number | null
    }, ExtArgs["result"]["faq"]>
    composites: {}
  }

  type FaqGetPayload<S extends boolean | null | undefined | FaqDefaultArgs> = $Result.GetResult<Prisma.$FaqPayload, S>

  type FaqCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FaqFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FaqCountAggregateInputType | true
    }

  export interface FaqDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Faq'], meta: { name: 'Faq' } }
    /**
     * Find zero or one Faq that matches the filter.
     * @param {FaqFindUniqueArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FaqFindUniqueArgs>(args: SelectSubset<T, FaqFindUniqueArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Faq that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FaqFindUniqueOrThrowArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FaqFindUniqueOrThrowArgs>(args: SelectSubset<T, FaqFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Faq that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqFindFirstArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FaqFindFirstArgs>(args?: SelectSubset<T, FaqFindFirstArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Faq that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqFindFirstOrThrowArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FaqFindFirstOrThrowArgs>(args?: SelectSubset<T, FaqFindFirstOrThrowArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Faqs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Faqs
     * const faqs = await prisma.faq.findMany()
     * 
     * // Get first 10 Faqs
     * const faqs = await prisma.faq.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const faqWithIdOnly = await prisma.faq.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FaqFindManyArgs>(args?: SelectSubset<T, FaqFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Faq.
     * @param {FaqCreateArgs} args - Arguments to create a Faq.
     * @example
     * // Create one Faq
     * const Faq = await prisma.faq.create({
     *   data: {
     *     // ... data to create a Faq
     *   }
     * })
     * 
     */
    create<T extends FaqCreateArgs>(args: SelectSubset<T, FaqCreateArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Faqs.
     * @param {FaqCreateManyArgs} args - Arguments to create many Faqs.
     * @example
     * // Create many Faqs
     * const faq = await prisma.faq.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FaqCreateManyArgs>(args?: SelectSubset<T, FaqCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Faq.
     * @param {FaqDeleteArgs} args - Arguments to delete one Faq.
     * @example
     * // Delete one Faq
     * const Faq = await prisma.faq.delete({
     *   where: {
     *     // ... filter to delete one Faq
     *   }
     * })
     * 
     */
    delete<T extends FaqDeleteArgs>(args: SelectSubset<T, FaqDeleteArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Faq.
     * @param {FaqUpdateArgs} args - Arguments to update one Faq.
     * @example
     * // Update one Faq
     * const faq = await prisma.faq.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FaqUpdateArgs>(args: SelectSubset<T, FaqUpdateArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Faqs.
     * @param {FaqDeleteManyArgs} args - Arguments to filter Faqs to delete.
     * @example
     * // Delete a few Faqs
     * const { count } = await prisma.faq.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FaqDeleteManyArgs>(args?: SelectSubset<T, FaqDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Faqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Faqs
     * const faq = await prisma.faq.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FaqUpdateManyArgs>(args: SelectSubset<T, FaqUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Faq.
     * @param {FaqUpsertArgs} args - Arguments to update or create a Faq.
     * @example
     * // Update or create a Faq
     * const faq = await prisma.faq.upsert({
     *   create: {
     *     // ... data to create a Faq
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Faq we want to update
     *   }
     * })
     */
    upsert<T extends FaqUpsertArgs>(args: SelectSubset<T, FaqUpsertArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Faqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqCountArgs} args - Arguments to filter Faqs to count.
     * @example
     * // Count the number of Faqs
     * const count = await prisma.faq.count({
     *   where: {
     *     // ... the filter for the Faqs we want to count
     *   }
     * })
    **/
    count<T extends FaqCountArgs>(
      args?: Subset<T, FaqCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FaqCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Faq.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FaqAggregateArgs>(args: Subset<T, FaqAggregateArgs>): Prisma.PrismaPromise<GetFaqAggregateType<T>>

    /**
     * Group by Faq.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FaqGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FaqGroupByArgs['orderBy'] }
        : { orderBy?: FaqGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FaqGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFaqGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Faq model
   */
  readonly fields: FaqFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Faq.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FaqClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cards<T extends Faq$cardsArgs<ExtArgs> = {}>(args?: Subset<T, Faq$cardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Faq model
   */
  interface FaqFieldRefs {
    readonly id: FieldRef<"Faq", 'Int'>
    readonly published: FieldRef<"Faq", 'Boolean'>
    readonly question: FieldRef<"Faq", 'String'>
    readonly answer: FieldRef<"Faq", 'String'>
    readonly position: FieldRef<"Faq", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Faq findUnique
   */
  export type FaqFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faq to fetch.
     */
    where: FaqWhereUniqueInput
  }

  /**
   * Faq findUniqueOrThrow
   */
  export type FaqFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faq to fetch.
     */
    where: FaqWhereUniqueInput
  }

  /**
   * Faq findFirst
   */
  export type FaqFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faq to fetch.
     */
    where?: FaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faqs to fetch.
     */
    orderBy?: FaqOrderByWithRelationInput | FaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faqs.
     */
    cursor?: FaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faqs.
     */
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * Faq findFirstOrThrow
   */
  export type FaqFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faq to fetch.
     */
    where?: FaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faqs to fetch.
     */
    orderBy?: FaqOrderByWithRelationInput | FaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faqs.
     */
    cursor?: FaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faqs.
     */
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * Faq findMany
   */
  export type FaqFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faqs to fetch.
     */
    where?: FaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faqs to fetch.
     */
    orderBy?: FaqOrderByWithRelationInput | FaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Faqs.
     */
    cursor?: FaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faqs.
     */
    skip?: number
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * Faq create
   */
  export type FaqCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * The data needed to create a Faq.
     */
    data: XOR<FaqCreateInput, FaqUncheckedCreateInput>
  }

  /**
   * Faq createMany
   */
  export type FaqCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Faqs.
     */
    data: FaqCreateManyInput | FaqCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Faq update
   */
  export type FaqUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * The data needed to update a Faq.
     */
    data: XOR<FaqUpdateInput, FaqUncheckedUpdateInput>
    /**
     * Choose, which Faq to update.
     */
    where: FaqWhereUniqueInput
  }

  /**
   * Faq updateMany
   */
  export type FaqUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Faqs.
     */
    data: XOR<FaqUpdateManyMutationInput, FaqUncheckedUpdateManyInput>
    /**
     * Filter which Faqs to update
     */
    where?: FaqWhereInput
    /**
     * Limit how many Faqs to update.
     */
    limit?: number
  }

  /**
   * Faq upsert
   */
  export type FaqUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * The filter to search for the Faq to update in case it exists.
     */
    where: FaqWhereUniqueInput
    /**
     * In case the Faq found by the `where` argument doesn't exist, create a new Faq with this data.
     */
    create: XOR<FaqCreateInput, FaqUncheckedCreateInput>
    /**
     * In case the Faq was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FaqUpdateInput, FaqUncheckedUpdateInput>
  }

  /**
   * Faq delete
   */
  export type FaqDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter which Faq to delete.
     */
    where: FaqWhereUniqueInput
  }

  /**
   * Faq deleteMany
   */
  export type FaqDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Faqs to delete
     */
    where?: FaqWhereInput
    /**
     * Limit how many Faqs to delete.
     */
    limit?: number
  }

  /**
   * Faq.cards
   */
  export type Faq$cardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCard
     */
    select?: FaqCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqCard
     */
    omit?: FaqCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqCardInclude<ExtArgs> | null
    where?: FaqCardWhereInput
    orderBy?: FaqCardOrderByWithRelationInput | FaqCardOrderByWithRelationInput[]
    cursor?: FaqCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FaqCardScalarFieldEnum | FaqCardScalarFieldEnum[]
  }

  /**
   * Faq without action
   */
  export type FaqDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
  }


  /**
   * Model FaqCard
   */

  export type AggregateFaqCard = {
    _count: FaqCardCountAggregateOutputType | null
    _avg: FaqCardAvgAggregateOutputType | null
    _sum: FaqCardSumAggregateOutputType | null
    _min: FaqCardMinAggregateOutputType | null
    _max: FaqCardMaxAggregateOutputType | null
  }

  export type FaqCardAvgAggregateOutputType = {
    id: number | null
    faq_id: number | null
    card_id: number | null
    position: number | null
  }

  export type FaqCardSumAggregateOutputType = {
    id: number | null
    faq_id: number | null
    card_id: number | null
    position: number | null
  }

  export type FaqCardMinAggregateOutputType = {
    id: number | null
    faq_id: number | null
    card_id: number | null
    position: number | null
  }

  export type FaqCardMaxAggregateOutputType = {
    id: number | null
    faq_id: number | null
    card_id: number | null
    position: number | null
  }

  export type FaqCardCountAggregateOutputType = {
    id: number
    faq_id: number
    card_id: number
    position: number
    _all: number
  }


  export type FaqCardAvgAggregateInputType = {
    id?: true
    faq_id?: true
    card_id?: true
    position?: true
  }

  export type FaqCardSumAggregateInputType = {
    id?: true
    faq_id?: true
    card_id?: true
    position?: true
  }

  export type FaqCardMinAggregateInputType = {
    id?: true
    faq_id?: true
    card_id?: true
    position?: true
  }

  export type FaqCardMaxAggregateInputType = {
    id?: true
    faq_id?: true
    card_id?: true
    position?: true
  }

  export type FaqCardCountAggregateInputType = {
    id?: true
    faq_id?: true
    card_id?: true
    position?: true
    _all?: true
  }

  export type FaqCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FaqCard to aggregate.
     */
    where?: FaqCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaqCards to fetch.
     */
    orderBy?: FaqCardOrderByWithRelationInput | FaqCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FaqCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaqCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaqCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FaqCards
    **/
    _count?: true | FaqCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FaqCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FaqCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FaqCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FaqCardMaxAggregateInputType
  }

  export type GetFaqCardAggregateType<T extends FaqCardAggregateArgs> = {
        [P in keyof T & keyof AggregateFaqCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaqCard[P]>
      : GetScalarType<T[P], AggregateFaqCard[P]>
  }




  export type FaqCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaqCardWhereInput
    orderBy?: FaqCardOrderByWithAggregationInput | FaqCardOrderByWithAggregationInput[]
    by: FaqCardScalarFieldEnum[] | FaqCardScalarFieldEnum
    having?: FaqCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FaqCardCountAggregateInputType | true
    _avg?: FaqCardAvgAggregateInputType
    _sum?: FaqCardSumAggregateInputType
    _min?: FaqCardMinAggregateInputType
    _max?: FaqCardMaxAggregateInputType
  }

  export type FaqCardGroupByOutputType = {
    id: number
    faq_id: number
    card_id: number
    position: number | null
    _count: FaqCardCountAggregateOutputType | null
    _avg: FaqCardAvgAggregateOutputType | null
    _sum: FaqCardSumAggregateOutputType | null
    _min: FaqCardMinAggregateOutputType | null
    _max: FaqCardMaxAggregateOutputType | null
  }

  type GetFaqCardGroupByPayload<T extends FaqCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FaqCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FaqCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FaqCardGroupByOutputType[P]>
            : GetScalarType<T[P], FaqCardGroupByOutputType[P]>
        }
      >
    >


  export type FaqCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    faq_id?: boolean
    card_id?: boolean
    position?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faqCard"]>



  export type FaqCardSelectScalar = {
    id?: boolean
    faq_id?: boolean
    card_id?: boolean
    position?: boolean
  }

  export type FaqCardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "faq_id" | "card_id" | "position", ExtArgs["result"]["faqCard"]>
  export type FaqCardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }

  export type $FaqCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FaqCard"
    objects: {
      card: Prisma.$CardPayload<ExtArgs>
      faq: Prisma.$FaqPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      faq_id: number
      card_id: number
      position: number | null
    }, ExtArgs["result"]["faqCard"]>
    composites: {}
  }

  type FaqCardGetPayload<S extends boolean | null | undefined | FaqCardDefaultArgs> = $Result.GetResult<Prisma.$FaqCardPayload, S>

  type FaqCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FaqCardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FaqCardCountAggregateInputType | true
    }

  export interface FaqCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FaqCard'], meta: { name: 'FaqCard' } }
    /**
     * Find zero or one FaqCard that matches the filter.
     * @param {FaqCardFindUniqueArgs} args - Arguments to find a FaqCard
     * @example
     * // Get one FaqCard
     * const faqCard = await prisma.faqCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FaqCardFindUniqueArgs>(args: SelectSubset<T, FaqCardFindUniqueArgs<ExtArgs>>): Prisma__FaqCardClient<$Result.GetResult<Prisma.$FaqCardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FaqCard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FaqCardFindUniqueOrThrowArgs} args - Arguments to find a FaqCard
     * @example
     * // Get one FaqCard
     * const faqCard = await prisma.faqCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FaqCardFindUniqueOrThrowArgs>(args: SelectSubset<T, FaqCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FaqCardClient<$Result.GetResult<Prisma.$FaqCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FaqCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqCardFindFirstArgs} args - Arguments to find a FaqCard
     * @example
     * // Get one FaqCard
     * const faqCard = await prisma.faqCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FaqCardFindFirstArgs>(args?: SelectSubset<T, FaqCardFindFirstArgs<ExtArgs>>): Prisma__FaqCardClient<$Result.GetResult<Prisma.$FaqCardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FaqCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqCardFindFirstOrThrowArgs} args - Arguments to find a FaqCard
     * @example
     * // Get one FaqCard
     * const faqCard = await prisma.faqCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FaqCardFindFirstOrThrowArgs>(args?: SelectSubset<T, FaqCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__FaqCardClient<$Result.GetResult<Prisma.$FaqCardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FaqCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FaqCards
     * const faqCards = await prisma.faqCard.findMany()
     * 
     * // Get first 10 FaqCards
     * const faqCards = await prisma.faqCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const faqCardWithIdOnly = await prisma.faqCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FaqCardFindManyArgs>(args?: SelectSubset<T, FaqCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FaqCard.
     * @param {FaqCardCreateArgs} args - Arguments to create a FaqCard.
     * @example
     * // Create one FaqCard
     * const FaqCard = await prisma.faqCard.create({
     *   data: {
     *     // ... data to create a FaqCard
     *   }
     * })
     * 
     */
    create<T extends FaqCardCreateArgs>(args: SelectSubset<T, FaqCardCreateArgs<ExtArgs>>): Prisma__FaqCardClient<$Result.GetResult<Prisma.$FaqCardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FaqCards.
     * @param {FaqCardCreateManyArgs} args - Arguments to create many FaqCards.
     * @example
     * // Create many FaqCards
     * const faqCard = await prisma.faqCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FaqCardCreateManyArgs>(args?: SelectSubset<T, FaqCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FaqCard.
     * @param {FaqCardDeleteArgs} args - Arguments to delete one FaqCard.
     * @example
     * // Delete one FaqCard
     * const FaqCard = await prisma.faqCard.delete({
     *   where: {
     *     // ... filter to delete one FaqCard
     *   }
     * })
     * 
     */
    delete<T extends FaqCardDeleteArgs>(args: SelectSubset<T, FaqCardDeleteArgs<ExtArgs>>): Prisma__FaqCardClient<$Result.GetResult<Prisma.$FaqCardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FaqCard.
     * @param {FaqCardUpdateArgs} args - Arguments to update one FaqCard.
     * @example
     * // Update one FaqCard
     * const faqCard = await prisma.faqCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FaqCardUpdateArgs>(args: SelectSubset<T, FaqCardUpdateArgs<ExtArgs>>): Prisma__FaqCardClient<$Result.GetResult<Prisma.$FaqCardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FaqCards.
     * @param {FaqCardDeleteManyArgs} args - Arguments to filter FaqCards to delete.
     * @example
     * // Delete a few FaqCards
     * const { count } = await prisma.faqCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FaqCardDeleteManyArgs>(args?: SelectSubset<T, FaqCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FaqCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FaqCards
     * const faqCard = await prisma.faqCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FaqCardUpdateManyArgs>(args: SelectSubset<T, FaqCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FaqCard.
     * @param {FaqCardUpsertArgs} args - Arguments to update or create a FaqCard.
     * @example
     * // Update or create a FaqCard
     * const faqCard = await prisma.faqCard.upsert({
     *   create: {
     *     // ... data to create a FaqCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FaqCard we want to update
     *   }
     * })
     */
    upsert<T extends FaqCardUpsertArgs>(args: SelectSubset<T, FaqCardUpsertArgs<ExtArgs>>): Prisma__FaqCardClient<$Result.GetResult<Prisma.$FaqCardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FaqCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqCardCountArgs} args - Arguments to filter FaqCards to count.
     * @example
     * // Count the number of FaqCards
     * const count = await prisma.faqCard.count({
     *   where: {
     *     // ... the filter for the FaqCards we want to count
     *   }
     * })
    **/
    count<T extends FaqCardCountArgs>(
      args?: Subset<T, FaqCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FaqCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FaqCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FaqCardAggregateArgs>(args: Subset<T, FaqCardAggregateArgs>): Prisma.PrismaPromise<GetFaqCardAggregateType<T>>

    /**
     * Group by FaqCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FaqCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FaqCardGroupByArgs['orderBy'] }
        : { orderBy?: FaqCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FaqCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFaqCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FaqCard model
   */
  readonly fields: FaqCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FaqCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FaqCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    card<T extends CardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardDefaultArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    faq<T extends FaqDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FaqDefaultArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FaqCard model
   */
  interface FaqCardFieldRefs {
    readonly id: FieldRef<"FaqCard", 'Int'>
    readonly faq_id: FieldRef<"FaqCard", 'Int'>
    readonly card_id: FieldRef<"FaqCard", 'Int'>
    readonly position: FieldRef<"FaqCard", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FaqCard findUnique
   */
  export type FaqCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCard
     */
    select?: FaqCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqCard
     */
    omit?: FaqCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqCardInclude<ExtArgs> | null
    /**
     * Filter, which FaqCard to fetch.
     */
    where: FaqCardWhereUniqueInput
  }

  /**
   * FaqCard findUniqueOrThrow
   */
  export type FaqCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCard
     */
    select?: FaqCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqCard
     */
    omit?: FaqCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqCardInclude<ExtArgs> | null
    /**
     * Filter, which FaqCard to fetch.
     */
    where: FaqCardWhereUniqueInput
  }

  /**
   * FaqCard findFirst
   */
  export type FaqCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCard
     */
    select?: FaqCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqCard
     */
    omit?: FaqCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqCardInclude<ExtArgs> | null
    /**
     * Filter, which FaqCard to fetch.
     */
    where?: FaqCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaqCards to fetch.
     */
    orderBy?: FaqCardOrderByWithRelationInput | FaqCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FaqCards.
     */
    cursor?: FaqCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaqCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaqCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FaqCards.
     */
    distinct?: FaqCardScalarFieldEnum | FaqCardScalarFieldEnum[]
  }

  /**
   * FaqCard findFirstOrThrow
   */
  export type FaqCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCard
     */
    select?: FaqCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqCard
     */
    omit?: FaqCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqCardInclude<ExtArgs> | null
    /**
     * Filter, which FaqCard to fetch.
     */
    where?: FaqCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaqCards to fetch.
     */
    orderBy?: FaqCardOrderByWithRelationInput | FaqCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FaqCards.
     */
    cursor?: FaqCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaqCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaqCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FaqCards.
     */
    distinct?: FaqCardScalarFieldEnum | FaqCardScalarFieldEnum[]
  }

  /**
   * FaqCard findMany
   */
  export type FaqCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCard
     */
    select?: FaqCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqCard
     */
    omit?: FaqCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqCardInclude<ExtArgs> | null
    /**
     * Filter, which FaqCards to fetch.
     */
    where?: FaqCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaqCards to fetch.
     */
    orderBy?: FaqCardOrderByWithRelationInput | FaqCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FaqCards.
     */
    cursor?: FaqCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaqCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaqCards.
     */
    skip?: number
    distinct?: FaqCardScalarFieldEnum | FaqCardScalarFieldEnum[]
  }

  /**
   * FaqCard create
   */
  export type FaqCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCard
     */
    select?: FaqCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqCard
     */
    omit?: FaqCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqCardInclude<ExtArgs> | null
    /**
     * The data needed to create a FaqCard.
     */
    data: XOR<FaqCardCreateInput, FaqCardUncheckedCreateInput>
  }

  /**
   * FaqCard createMany
   */
  export type FaqCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FaqCards.
     */
    data: FaqCardCreateManyInput | FaqCardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FaqCard update
   */
  export type FaqCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCard
     */
    select?: FaqCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqCard
     */
    omit?: FaqCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqCardInclude<ExtArgs> | null
    /**
     * The data needed to update a FaqCard.
     */
    data: XOR<FaqCardUpdateInput, FaqCardUncheckedUpdateInput>
    /**
     * Choose, which FaqCard to update.
     */
    where: FaqCardWhereUniqueInput
  }

  /**
   * FaqCard updateMany
   */
  export type FaqCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FaqCards.
     */
    data: XOR<FaqCardUpdateManyMutationInput, FaqCardUncheckedUpdateManyInput>
    /**
     * Filter which FaqCards to update
     */
    where?: FaqCardWhereInput
    /**
     * Limit how many FaqCards to update.
     */
    limit?: number
  }

  /**
   * FaqCard upsert
   */
  export type FaqCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCard
     */
    select?: FaqCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqCard
     */
    omit?: FaqCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqCardInclude<ExtArgs> | null
    /**
     * The filter to search for the FaqCard to update in case it exists.
     */
    where: FaqCardWhereUniqueInput
    /**
     * In case the FaqCard found by the `where` argument doesn't exist, create a new FaqCard with this data.
     */
    create: XOR<FaqCardCreateInput, FaqCardUncheckedCreateInput>
    /**
     * In case the FaqCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FaqCardUpdateInput, FaqCardUncheckedUpdateInput>
  }

  /**
   * FaqCard delete
   */
  export type FaqCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCard
     */
    select?: FaqCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqCard
     */
    omit?: FaqCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqCardInclude<ExtArgs> | null
    /**
     * Filter which FaqCard to delete.
     */
    where: FaqCardWhereUniqueInput
  }

  /**
   * FaqCard deleteMany
   */
  export type FaqCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FaqCards to delete
     */
    where?: FaqCardWhereInput
    /**
     * Limit how many FaqCards to delete.
     */
    limit?: number
  }

  /**
   * FaqCard without action
   */
  export type FaqCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCard
     */
    select?: FaqCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqCard
     */
    omit?: FaqCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqCardInclude<ExtArgs> | null
  }


  /**
   * Model Option
   */

  export type AggregateOption = {
    _count: OptionCountAggregateOutputType | null
    _avg: OptionAvgAggregateOutputType | null
    _sum: OptionSumAggregateOutputType | null
    _min: OptionMinAggregateOutputType | null
    _max: OptionMaxAggregateOutputType | null
  }

  export type OptionAvgAggregateOutputType = {
    id: number | null
    position: number | null
  }

  export type OptionSumAggregateOutputType = {
    id: number | null
    position: number | null
  }

  export type OptionMinAggregateOutputType = {
    id: number | null
    published: boolean | null
    use_for_filter: boolean | null
    input_type: $Enums.InputType | null
    type: $Enums.OptionType | null
    label: string | null
    tooltip: string | null
    hash_tag: string | null
    value: string | null
    position: number | null
  }

  export type OptionMaxAggregateOutputType = {
    id: number | null
    published: boolean | null
    use_for_filter: boolean | null
    input_type: $Enums.InputType | null
    type: $Enums.OptionType | null
    label: string | null
    tooltip: string | null
    hash_tag: string | null
    value: string | null
    position: number | null
  }

  export type OptionCountAggregateOutputType = {
    id: number
    published: number
    use_for_filter: number
    input_type: number
    type: number
    label: number
    tooltip: number
    hash_tag: number
    value: number
    position: number
    _all: number
  }


  export type OptionAvgAggregateInputType = {
    id?: true
    position?: true
  }

  export type OptionSumAggregateInputType = {
    id?: true
    position?: true
  }

  export type OptionMinAggregateInputType = {
    id?: true
    published?: true
    use_for_filter?: true
    input_type?: true
    type?: true
    label?: true
    tooltip?: true
    hash_tag?: true
    value?: true
    position?: true
  }

  export type OptionMaxAggregateInputType = {
    id?: true
    published?: true
    use_for_filter?: true
    input_type?: true
    type?: true
    label?: true
    tooltip?: true
    hash_tag?: true
    value?: true
    position?: true
  }

  export type OptionCountAggregateInputType = {
    id?: true
    published?: true
    use_for_filter?: true
    input_type?: true
    type?: true
    label?: true
    tooltip?: true
    hash_tag?: true
    value?: true
    position?: true
    _all?: true
  }

  export type OptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Option to aggregate.
     */
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Options
    **/
    _count?: true | OptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OptionMaxAggregateInputType
  }

  export type GetOptionAggregateType<T extends OptionAggregateArgs> = {
        [P in keyof T & keyof AggregateOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOption[P]>
      : GetScalarType<T[P], AggregateOption[P]>
  }




  export type OptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OptionWhereInput
    orderBy?: OptionOrderByWithAggregationInput | OptionOrderByWithAggregationInput[]
    by: OptionScalarFieldEnum[] | OptionScalarFieldEnum
    having?: OptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OptionCountAggregateInputType | true
    _avg?: OptionAvgAggregateInputType
    _sum?: OptionSumAggregateInputType
    _min?: OptionMinAggregateInputType
    _max?: OptionMaxAggregateInputType
  }

  export type OptionGroupByOutputType = {
    id: number
    published: boolean
    use_for_filter: boolean
    input_type: $Enums.InputType
    type: $Enums.OptionType
    label: string
    tooltip: string | null
    hash_tag: string | null
    value: string
    position: number | null
    _count: OptionCountAggregateOutputType | null
    _avg: OptionAvgAggregateOutputType | null
    _sum: OptionSumAggregateOutputType | null
    _min: OptionMinAggregateOutputType | null
    _max: OptionMaxAggregateOutputType | null
  }

  type GetOptionGroupByPayload<T extends OptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OptionGroupByOutputType[P]>
            : GetScalarType<T[P], OptionGroupByOutputType[P]>
        }
      >
    >


  export type OptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    published?: boolean
    use_for_filter?: boolean
    input_type?: boolean
    type?: boolean
    label?: boolean
    tooltip?: boolean
    hash_tag?: boolean
    value?: boolean
    position?: boolean
    card_options?: boolean | Option$card_optionsArgs<ExtArgs>
    casino_options?: boolean | Option$casino_optionsArgs<ExtArgs>
    _count?: boolean | OptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["option"]>



  export type OptionSelectScalar = {
    id?: boolean
    published?: boolean
    use_for_filter?: boolean
    input_type?: boolean
    type?: boolean
    label?: boolean
    tooltip?: boolean
    hash_tag?: boolean
    value?: boolean
    position?: boolean
  }

  export type OptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "published" | "use_for_filter" | "input_type" | "type" | "label" | "tooltip" | "hash_tag" | "value" | "position", ExtArgs["result"]["option"]>
  export type OptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card_options?: boolean | Option$card_optionsArgs<ExtArgs>
    casino_options?: boolean | Option$casino_optionsArgs<ExtArgs>
    _count?: boolean | OptionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Option"
    objects: {
      card_options: Prisma.$CardOptionPayload<ExtArgs>[]
      casino_options: Prisma.$CasinoOptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      published: boolean
      use_for_filter: boolean
      input_type: $Enums.InputType
      type: $Enums.OptionType
      label: string
      tooltip: string | null
      hash_tag: string | null
      value: string
      position: number | null
    }, ExtArgs["result"]["option"]>
    composites: {}
  }

  type OptionGetPayload<S extends boolean | null | undefined | OptionDefaultArgs> = $Result.GetResult<Prisma.$OptionPayload, S>

  type OptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OptionCountAggregateInputType | true
    }

  export interface OptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Option'], meta: { name: 'Option' } }
    /**
     * Find zero or one Option that matches the filter.
     * @param {OptionFindUniqueArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OptionFindUniqueArgs>(args: SelectSubset<T, OptionFindUniqueArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Option that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OptionFindUniqueOrThrowArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OptionFindUniqueOrThrowArgs>(args: SelectSubset<T, OptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Option that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionFindFirstArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OptionFindFirstArgs>(args?: SelectSubset<T, OptionFindFirstArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Option that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionFindFirstOrThrowArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OptionFindFirstOrThrowArgs>(args?: SelectSubset<T, OptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Options that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Options
     * const options = await prisma.option.findMany()
     * 
     * // Get first 10 Options
     * const options = await prisma.option.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const optionWithIdOnly = await prisma.option.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OptionFindManyArgs>(args?: SelectSubset<T, OptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Option.
     * @param {OptionCreateArgs} args - Arguments to create a Option.
     * @example
     * // Create one Option
     * const Option = await prisma.option.create({
     *   data: {
     *     // ... data to create a Option
     *   }
     * })
     * 
     */
    create<T extends OptionCreateArgs>(args: SelectSubset<T, OptionCreateArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Options.
     * @param {OptionCreateManyArgs} args - Arguments to create many Options.
     * @example
     * // Create many Options
     * const option = await prisma.option.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OptionCreateManyArgs>(args?: SelectSubset<T, OptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Option.
     * @param {OptionDeleteArgs} args - Arguments to delete one Option.
     * @example
     * // Delete one Option
     * const Option = await prisma.option.delete({
     *   where: {
     *     // ... filter to delete one Option
     *   }
     * })
     * 
     */
    delete<T extends OptionDeleteArgs>(args: SelectSubset<T, OptionDeleteArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Option.
     * @param {OptionUpdateArgs} args - Arguments to update one Option.
     * @example
     * // Update one Option
     * const option = await prisma.option.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OptionUpdateArgs>(args: SelectSubset<T, OptionUpdateArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Options.
     * @param {OptionDeleteManyArgs} args - Arguments to filter Options to delete.
     * @example
     * // Delete a few Options
     * const { count } = await prisma.option.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OptionDeleteManyArgs>(args?: SelectSubset<T, OptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Options
     * const option = await prisma.option.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OptionUpdateManyArgs>(args: SelectSubset<T, OptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Option.
     * @param {OptionUpsertArgs} args - Arguments to update or create a Option.
     * @example
     * // Update or create a Option
     * const option = await prisma.option.upsert({
     *   create: {
     *     // ... data to create a Option
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Option we want to update
     *   }
     * })
     */
    upsert<T extends OptionUpsertArgs>(args: SelectSubset<T, OptionUpsertArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionCountArgs} args - Arguments to filter Options to count.
     * @example
     * // Count the number of Options
     * const count = await prisma.option.count({
     *   where: {
     *     // ... the filter for the Options we want to count
     *   }
     * })
    **/
    count<T extends OptionCountArgs>(
      args?: Subset<T, OptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Option.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OptionAggregateArgs>(args: Subset<T, OptionAggregateArgs>): Prisma.PrismaPromise<GetOptionAggregateType<T>>

    /**
     * Group by Option.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OptionGroupByArgs['orderBy'] }
        : { orderBy?: OptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Option model
   */
  readonly fields: OptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Option.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    card_options<T extends Option$card_optionsArgs<ExtArgs> = {}>(args?: Subset<T, Option$card_optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    casino_options<T extends Option$casino_optionsArgs<ExtArgs> = {}>(args?: Subset<T, Option$casino_optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasinoOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Option model
   */
  interface OptionFieldRefs {
    readonly id: FieldRef<"Option", 'Int'>
    readonly published: FieldRef<"Option", 'Boolean'>
    readonly use_for_filter: FieldRef<"Option", 'Boolean'>
    readonly input_type: FieldRef<"Option", 'InputType'>
    readonly type: FieldRef<"Option", 'OptionType'>
    readonly label: FieldRef<"Option", 'String'>
    readonly tooltip: FieldRef<"Option", 'String'>
    readonly hash_tag: FieldRef<"Option", 'String'>
    readonly value: FieldRef<"Option", 'String'>
    readonly position: FieldRef<"Option", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Option findUnique
   */
  export type OptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Option to fetch.
     */
    where: OptionWhereUniqueInput
  }

  /**
   * Option findUniqueOrThrow
   */
  export type OptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Option to fetch.
     */
    where: OptionWhereUniqueInput
  }

  /**
   * Option findFirst
   */
  export type OptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Option to fetch.
     */
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Options.
     */
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Options.
     */
    distinct?: OptionScalarFieldEnum | OptionScalarFieldEnum[]
  }

  /**
   * Option findFirstOrThrow
   */
  export type OptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Option to fetch.
     */
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Options.
     */
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Options.
     */
    distinct?: OptionScalarFieldEnum | OptionScalarFieldEnum[]
  }

  /**
   * Option findMany
   */
  export type OptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Options to fetch.
     */
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Options.
     */
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    distinct?: OptionScalarFieldEnum | OptionScalarFieldEnum[]
  }

  /**
   * Option create
   */
  export type OptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Option.
     */
    data: XOR<OptionCreateInput, OptionUncheckedCreateInput>
  }

  /**
   * Option createMany
   */
  export type OptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Options.
     */
    data: OptionCreateManyInput | OptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Option update
   */
  export type OptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Option.
     */
    data: XOR<OptionUpdateInput, OptionUncheckedUpdateInput>
    /**
     * Choose, which Option to update.
     */
    where: OptionWhereUniqueInput
  }

  /**
   * Option updateMany
   */
  export type OptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Options.
     */
    data: XOR<OptionUpdateManyMutationInput, OptionUncheckedUpdateManyInput>
    /**
     * Filter which Options to update
     */
    where?: OptionWhereInput
    /**
     * Limit how many Options to update.
     */
    limit?: number
  }

  /**
   * Option upsert
   */
  export type OptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Option to update in case it exists.
     */
    where: OptionWhereUniqueInput
    /**
     * In case the Option found by the `where` argument doesn't exist, create a new Option with this data.
     */
    create: XOR<OptionCreateInput, OptionUncheckedCreateInput>
    /**
     * In case the Option was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OptionUpdateInput, OptionUncheckedUpdateInput>
  }

  /**
   * Option delete
   */
  export type OptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter which Option to delete.
     */
    where: OptionWhereUniqueInput
  }

  /**
   * Option deleteMany
   */
  export type OptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Options to delete
     */
    where?: OptionWhereInput
    /**
     * Limit how many Options to delete.
     */
    limit?: number
  }

  /**
   * Option.card_options
   */
  export type Option$card_optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOption
     */
    select?: CardOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardOption
     */
    omit?: CardOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOptionInclude<ExtArgs> | null
    where?: CardOptionWhereInput
    orderBy?: CardOptionOrderByWithRelationInput | CardOptionOrderByWithRelationInput[]
    cursor?: CardOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardOptionScalarFieldEnum | CardOptionScalarFieldEnum[]
  }

  /**
   * Option.casino_options
   */
  export type Option$casino_optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasinoOption
     */
    select?: CasinoOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasinoOption
     */
    omit?: CasinoOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoOptionInclude<ExtArgs> | null
    where?: CasinoOptionWhereInput
    orderBy?: CasinoOptionOrderByWithRelationInput | CasinoOptionOrderByWithRelationInput[]
    cursor?: CasinoOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CasinoOptionScalarFieldEnum | CasinoOptionScalarFieldEnum[]
  }

  /**
   * Option without action
   */
  export type OptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
  }


  /**
   * Model CardOption
   */

  export type AggregateCardOption = {
    _count: CardOptionCountAggregateOutputType | null
    _avg: CardOptionAvgAggregateOutputType | null
    _sum: CardOptionSumAggregateOutputType | null
    _min: CardOptionMinAggregateOutputType | null
    _max: CardOptionMaxAggregateOutputType | null
  }

  export type CardOptionAvgAggregateOutputType = {
    id: number | null
    option_id: number | null
    card_id: number | null
  }

  export type CardOptionSumAggregateOutputType = {
    id: number | null
    option_id: number | null
    card_id: number | null
  }

  export type CardOptionMinAggregateOutputType = {
    id: number | null
    option_id: number | null
    card_id: number | null
    value: string | null
  }

  export type CardOptionMaxAggregateOutputType = {
    id: number | null
    option_id: number | null
    card_id: number | null
    value: string | null
  }

  export type CardOptionCountAggregateOutputType = {
    id: number
    option_id: number
    card_id: number
    value: number
    _all: number
  }


  export type CardOptionAvgAggregateInputType = {
    id?: true
    option_id?: true
    card_id?: true
  }

  export type CardOptionSumAggregateInputType = {
    id?: true
    option_id?: true
    card_id?: true
  }

  export type CardOptionMinAggregateInputType = {
    id?: true
    option_id?: true
    card_id?: true
    value?: true
  }

  export type CardOptionMaxAggregateInputType = {
    id?: true
    option_id?: true
    card_id?: true
    value?: true
  }

  export type CardOptionCountAggregateInputType = {
    id?: true
    option_id?: true
    card_id?: true
    value?: true
    _all?: true
  }

  export type CardOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardOption to aggregate.
     */
    where?: CardOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardOptions to fetch.
     */
    orderBy?: CardOptionOrderByWithRelationInput | CardOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CardOptions
    **/
    _count?: true | CardOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardOptionMaxAggregateInputType
  }

  export type GetCardOptionAggregateType<T extends CardOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateCardOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCardOption[P]>
      : GetScalarType<T[P], AggregateCardOption[P]>
  }




  export type CardOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardOptionWhereInput
    orderBy?: CardOptionOrderByWithAggregationInput | CardOptionOrderByWithAggregationInput[]
    by: CardOptionScalarFieldEnum[] | CardOptionScalarFieldEnum
    having?: CardOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardOptionCountAggregateInputType | true
    _avg?: CardOptionAvgAggregateInputType
    _sum?: CardOptionSumAggregateInputType
    _min?: CardOptionMinAggregateInputType
    _max?: CardOptionMaxAggregateInputType
  }

  export type CardOptionGroupByOutputType = {
    id: number
    option_id: number
    card_id: number
    value: string
    _count: CardOptionCountAggregateOutputType | null
    _avg: CardOptionAvgAggregateOutputType | null
    _sum: CardOptionSumAggregateOutputType | null
    _min: CardOptionMinAggregateOutputType | null
    _max: CardOptionMaxAggregateOutputType | null
  }

  type GetCardOptionGroupByPayload<T extends CardOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardOptionGroupByOutputType[P]>
            : GetScalarType<T[P], CardOptionGroupByOutputType[P]>
        }
      >
    >


  export type CardOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    option_id?: boolean
    card_id?: boolean
    value?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    entity?: boolean | OptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardOption"]>



  export type CardOptionSelectScalar = {
    id?: boolean
    option_id?: boolean
    card_id?: boolean
    value?: boolean
  }

  export type CardOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "option_id" | "card_id" | "value", ExtArgs["result"]["cardOption"]>
  export type CardOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    entity?: boolean | OptionDefaultArgs<ExtArgs>
  }

  export type $CardOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CardOption"
    objects: {
      card: Prisma.$CardPayload<ExtArgs>
      entity: Prisma.$OptionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      option_id: number
      card_id: number
      value: string
    }, ExtArgs["result"]["cardOption"]>
    composites: {}
  }

  type CardOptionGetPayload<S extends boolean | null | undefined | CardOptionDefaultArgs> = $Result.GetResult<Prisma.$CardOptionPayload, S>

  type CardOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CardOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CardOptionCountAggregateInputType | true
    }

  export interface CardOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CardOption'], meta: { name: 'CardOption' } }
    /**
     * Find zero or one CardOption that matches the filter.
     * @param {CardOptionFindUniqueArgs} args - Arguments to find a CardOption
     * @example
     * // Get one CardOption
     * const cardOption = await prisma.cardOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardOptionFindUniqueArgs>(args: SelectSubset<T, CardOptionFindUniqueArgs<ExtArgs>>): Prisma__CardOptionClient<$Result.GetResult<Prisma.$CardOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CardOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CardOptionFindUniqueOrThrowArgs} args - Arguments to find a CardOption
     * @example
     * // Get one CardOption
     * const cardOption = await prisma.cardOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, CardOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardOptionClient<$Result.GetResult<Prisma.$CardOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CardOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOptionFindFirstArgs} args - Arguments to find a CardOption
     * @example
     * // Get one CardOption
     * const cardOption = await prisma.cardOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardOptionFindFirstArgs>(args?: SelectSubset<T, CardOptionFindFirstArgs<ExtArgs>>): Prisma__CardOptionClient<$Result.GetResult<Prisma.$CardOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CardOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOptionFindFirstOrThrowArgs} args - Arguments to find a CardOption
     * @example
     * // Get one CardOption
     * const cardOption = await prisma.cardOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, CardOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardOptionClient<$Result.GetResult<Prisma.$CardOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CardOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CardOptions
     * const cardOptions = await prisma.cardOption.findMany()
     * 
     * // Get first 10 CardOptions
     * const cardOptions = await prisma.cardOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardOptionWithIdOnly = await prisma.cardOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CardOptionFindManyArgs>(args?: SelectSubset<T, CardOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CardOption.
     * @param {CardOptionCreateArgs} args - Arguments to create a CardOption.
     * @example
     * // Create one CardOption
     * const CardOption = await prisma.cardOption.create({
     *   data: {
     *     // ... data to create a CardOption
     *   }
     * })
     * 
     */
    create<T extends CardOptionCreateArgs>(args: SelectSubset<T, CardOptionCreateArgs<ExtArgs>>): Prisma__CardOptionClient<$Result.GetResult<Prisma.$CardOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CardOptions.
     * @param {CardOptionCreateManyArgs} args - Arguments to create many CardOptions.
     * @example
     * // Create many CardOptions
     * const cardOption = await prisma.cardOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardOptionCreateManyArgs>(args?: SelectSubset<T, CardOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CardOption.
     * @param {CardOptionDeleteArgs} args - Arguments to delete one CardOption.
     * @example
     * // Delete one CardOption
     * const CardOption = await prisma.cardOption.delete({
     *   where: {
     *     // ... filter to delete one CardOption
     *   }
     * })
     * 
     */
    delete<T extends CardOptionDeleteArgs>(args: SelectSubset<T, CardOptionDeleteArgs<ExtArgs>>): Prisma__CardOptionClient<$Result.GetResult<Prisma.$CardOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CardOption.
     * @param {CardOptionUpdateArgs} args - Arguments to update one CardOption.
     * @example
     * // Update one CardOption
     * const cardOption = await prisma.cardOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardOptionUpdateArgs>(args: SelectSubset<T, CardOptionUpdateArgs<ExtArgs>>): Prisma__CardOptionClient<$Result.GetResult<Prisma.$CardOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CardOptions.
     * @param {CardOptionDeleteManyArgs} args - Arguments to filter CardOptions to delete.
     * @example
     * // Delete a few CardOptions
     * const { count } = await prisma.cardOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardOptionDeleteManyArgs>(args?: SelectSubset<T, CardOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CardOptions
     * const cardOption = await prisma.cardOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardOptionUpdateManyArgs>(args: SelectSubset<T, CardOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CardOption.
     * @param {CardOptionUpsertArgs} args - Arguments to update or create a CardOption.
     * @example
     * // Update or create a CardOption
     * const cardOption = await prisma.cardOption.upsert({
     *   create: {
     *     // ... data to create a CardOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CardOption we want to update
     *   }
     * })
     */
    upsert<T extends CardOptionUpsertArgs>(args: SelectSubset<T, CardOptionUpsertArgs<ExtArgs>>): Prisma__CardOptionClient<$Result.GetResult<Prisma.$CardOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CardOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOptionCountArgs} args - Arguments to filter CardOptions to count.
     * @example
     * // Count the number of CardOptions
     * const count = await prisma.cardOption.count({
     *   where: {
     *     // ... the filter for the CardOptions we want to count
     *   }
     * })
    **/
    count<T extends CardOptionCountArgs>(
      args?: Subset<T, CardOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CardOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardOptionAggregateArgs>(args: Subset<T, CardOptionAggregateArgs>): Prisma.PrismaPromise<GetCardOptionAggregateType<T>>

    /**
     * Group by CardOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardOptionGroupByArgs['orderBy'] }
        : { orderBy?: CardOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CardOption model
   */
  readonly fields: CardOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CardOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    card<T extends CardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardDefaultArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    entity<T extends OptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OptionDefaultArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CardOption model
   */
  interface CardOptionFieldRefs {
    readonly id: FieldRef<"CardOption", 'Int'>
    readonly option_id: FieldRef<"CardOption", 'Int'>
    readonly card_id: FieldRef<"CardOption", 'Int'>
    readonly value: FieldRef<"CardOption", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CardOption findUnique
   */
  export type CardOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOption
     */
    select?: CardOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardOption
     */
    omit?: CardOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOptionInclude<ExtArgs> | null
    /**
     * Filter, which CardOption to fetch.
     */
    where: CardOptionWhereUniqueInput
  }

  /**
   * CardOption findUniqueOrThrow
   */
  export type CardOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOption
     */
    select?: CardOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardOption
     */
    omit?: CardOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOptionInclude<ExtArgs> | null
    /**
     * Filter, which CardOption to fetch.
     */
    where: CardOptionWhereUniqueInput
  }

  /**
   * CardOption findFirst
   */
  export type CardOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOption
     */
    select?: CardOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardOption
     */
    omit?: CardOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOptionInclude<ExtArgs> | null
    /**
     * Filter, which CardOption to fetch.
     */
    where?: CardOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardOptions to fetch.
     */
    orderBy?: CardOptionOrderByWithRelationInput | CardOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardOptions.
     */
    cursor?: CardOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardOptions.
     */
    distinct?: CardOptionScalarFieldEnum | CardOptionScalarFieldEnum[]
  }

  /**
   * CardOption findFirstOrThrow
   */
  export type CardOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOption
     */
    select?: CardOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardOption
     */
    omit?: CardOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOptionInclude<ExtArgs> | null
    /**
     * Filter, which CardOption to fetch.
     */
    where?: CardOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardOptions to fetch.
     */
    orderBy?: CardOptionOrderByWithRelationInput | CardOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardOptions.
     */
    cursor?: CardOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardOptions.
     */
    distinct?: CardOptionScalarFieldEnum | CardOptionScalarFieldEnum[]
  }

  /**
   * CardOption findMany
   */
  export type CardOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOption
     */
    select?: CardOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardOption
     */
    omit?: CardOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOptionInclude<ExtArgs> | null
    /**
     * Filter, which CardOptions to fetch.
     */
    where?: CardOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardOptions to fetch.
     */
    orderBy?: CardOptionOrderByWithRelationInput | CardOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CardOptions.
     */
    cursor?: CardOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardOptions.
     */
    skip?: number
    distinct?: CardOptionScalarFieldEnum | CardOptionScalarFieldEnum[]
  }

  /**
   * CardOption create
   */
  export type CardOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOption
     */
    select?: CardOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardOption
     */
    omit?: CardOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a CardOption.
     */
    data: XOR<CardOptionCreateInput, CardOptionUncheckedCreateInput>
  }

  /**
   * CardOption createMany
   */
  export type CardOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CardOptions.
     */
    data: CardOptionCreateManyInput | CardOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CardOption update
   */
  export type CardOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOption
     */
    select?: CardOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardOption
     */
    omit?: CardOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a CardOption.
     */
    data: XOR<CardOptionUpdateInput, CardOptionUncheckedUpdateInput>
    /**
     * Choose, which CardOption to update.
     */
    where: CardOptionWhereUniqueInput
  }

  /**
   * CardOption updateMany
   */
  export type CardOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CardOptions.
     */
    data: XOR<CardOptionUpdateManyMutationInput, CardOptionUncheckedUpdateManyInput>
    /**
     * Filter which CardOptions to update
     */
    where?: CardOptionWhereInput
    /**
     * Limit how many CardOptions to update.
     */
    limit?: number
  }

  /**
   * CardOption upsert
   */
  export type CardOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOption
     */
    select?: CardOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardOption
     */
    omit?: CardOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the CardOption to update in case it exists.
     */
    where: CardOptionWhereUniqueInput
    /**
     * In case the CardOption found by the `where` argument doesn't exist, create a new CardOption with this data.
     */
    create: XOR<CardOptionCreateInput, CardOptionUncheckedCreateInput>
    /**
     * In case the CardOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardOptionUpdateInput, CardOptionUncheckedUpdateInput>
  }

  /**
   * CardOption delete
   */
  export type CardOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOption
     */
    select?: CardOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardOption
     */
    omit?: CardOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOptionInclude<ExtArgs> | null
    /**
     * Filter which CardOption to delete.
     */
    where: CardOptionWhereUniqueInput
  }

  /**
   * CardOption deleteMany
   */
  export type CardOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardOptions to delete
     */
    where?: CardOptionWhereInput
    /**
     * Limit how many CardOptions to delete.
     */
    limit?: number
  }

  /**
   * CardOption without action
   */
  export type CardOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOption
     */
    select?: CardOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardOption
     */
    omit?: CardOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOptionInclude<ExtArgs> | null
  }


  /**
   * Model IconCard
   */

  export type AggregateIconCard = {
    _count: IconCardCountAggregateOutputType | null
    _avg: IconCardAvgAggregateOutputType | null
    _sum: IconCardSumAggregateOutputType | null
    _min: IconCardMinAggregateOutputType | null
    _max: IconCardMaxAggregateOutputType | null
  }

  export type IconCardAvgAggregateOutputType = {
    id: number | null
  }

  export type IconCardSumAggregateOutputType = {
    id: number | null
  }

  export type IconCardMinAggregateOutputType = {
    id: number | null
    published: boolean | null
    label: string | null
  }

  export type IconCardMaxAggregateOutputType = {
    id: number | null
    published: boolean | null
    label: string | null
  }

  export type IconCardCountAggregateOutputType = {
    id: number
    published: number
    label: number
    _all: number
  }


  export type IconCardAvgAggregateInputType = {
    id?: true
  }

  export type IconCardSumAggregateInputType = {
    id?: true
  }

  export type IconCardMinAggregateInputType = {
    id?: true
    published?: true
    label?: true
  }

  export type IconCardMaxAggregateInputType = {
    id?: true
    published?: true
    label?: true
  }

  export type IconCardCountAggregateInputType = {
    id?: true
    published?: true
    label?: true
    _all?: true
  }

  export type IconCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IconCard to aggregate.
     */
    where?: IconCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IconCards to fetch.
     */
    orderBy?: IconCardOrderByWithRelationInput | IconCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IconCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IconCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IconCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IconCards
    **/
    _count?: true | IconCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IconCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IconCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IconCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IconCardMaxAggregateInputType
  }

  export type GetIconCardAggregateType<T extends IconCardAggregateArgs> = {
        [P in keyof T & keyof AggregateIconCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIconCard[P]>
      : GetScalarType<T[P], AggregateIconCard[P]>
  }




  export type IconCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IconCardWhereInput
    orderBy?: IconCardOrderByWithAggregationInput | IconCardOrderByWithAggregationInput[]
    by: IconCardScalarFieldEnum[] | IconCardScalarFieldEnum
    having?: IconCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IconCardCountAggregateInputType | true
    _avg?: IconCardAvgAggregateInputType
    _sum?: IconCardSumAggregateInputType
    _min?: IconCardMinAggregateInputType
    _max?: IconCardMaxAggregateInputType
  }

  export type IconCardGroupByOutputType = {
    id: number
    published: boolean
    label: string
    _count: IconCardCountAggregateOutputType | null
    _avg: IconCardAvgAggregateOutputType | null
    _sum: IconCardSumAggregateOutputType | null
    _min: IconCardMinAggregateOutputType | null
    _max: IconCardMaxAggregateOutputType | null
  }

  type GetIconCardGroupByPayload<T extends IconCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IconCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IconCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IconCardGroupByOutputType[P]>
            : GetScalarType<T[P], IconCardGroupByOutputType[P]>
        }
      >
    >


  export type IconCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    published?: boolean
    label?: boolean
    images?: boolean | IconCard$imagesArgs<ExtArgs>
    _count?: boolean | IconCardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["iconCard"]>



  export type IconCardSelectScalar = {
    id?: boolean
    published?: boolean
    label?: boolean
  }

  export type IconCardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "published" | "label", ExtArgs["result"]["iconCard"]>
  export type IconCardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | IconCard$imagesArgs<ExtArgs>
    _count?: boolean | IconCardCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $IconCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IconCard"
    objects: {
      images: Prisma.$IconCardImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      published: boolean
      label: string
    }, ExtArgs["result"]["iconCard"]>
    composites: {}
  }

  type IconCardGetPayload<S extends boolean | null | undefined | IconCardDefaultArgs> = $Result.GetResult<Prisma.$IconCardPayload, S>

  type IconCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IconCardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IconCardCountAggregateInputType | true
    }

  export interface IconCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IconCard'], meta: { name: 'IconCard' } }
    /**
     * Find zero or one IconCard that matches the filter.
     * @param {IconCardFindUniqueArgs} args - Arguments to find a IconCard
     * @example
     * // Get one IconCard
     * const iconCard = await prisma.iconCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IconCardFindUniqueArgs>(args: SelectSubset<T, IconCardFindUniqueArgs<ExtArgs>>): Prisma__IconCardClient<$Result.GetResult<Prisma.$IconCardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one IconCard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IconCardFindUniqueOrThrowArgs} args - Arguments to find a IconCard
     * @example
     * // Get one IconCard
     * const iconCard = await prisma.iconCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IconCardFindUniqueOrThrowArgs>(args: SelectSubset<T, IconCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IconCardClient<$Result.GetResult<Prisma.$IconCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IconCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardFindFirstArgs} args - Arguments to find a IconCard
     * @example
     * // Get one IconCard
     * const iconCard = await prisma.iconCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IconCardFindFirstArgs>(args?: SelectSubset<T, IconCardFindFirstArgs<ExtArgs>>): Prisma__IconCardClient<$Result.GetResult<Prisma.$IconCardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IconCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardFindFirstOrThrowArgs} args - Arguments to find a IconCard
     * @example
     * // Get one IconCard
     * const iconCard = await prisma.iconCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IconCardFindFirstOrThrowArgs>(args?: SelectSubset<T, IconCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__IconCardClient<$Result.GetResult<Prisma.$IconCardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more IconCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IconCards
     * const iconCards = await prisma.iconCard.findMany()
     * 
     * // Get first 10 IconCards
     * const iconCards = await prisma.iconCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const iconCardWithIdOnly = await prisma.iconCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IconCardFindManyArgs>(args?: SelectSubset<T, IconCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IconCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a IconCard.
     * @param {IconCardCreateArgs} args - Arguments to create a IconCard.
     * @example
     * // Create one IconCard
     * const IconCard = await prisma.iconCard.create({
     *   data: {
     *     // ... data to create a IconCard
     *   }
     * })
     * 
     */
    create<T extends IconCardCreateArgs>(args: SelectSubset<T, IconCardCreateArgs<ExtArgs>>): Prisma__IconCardClient<$Result.GetResult<Prisma.$IconCardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many IconCards.
     * @param {IconCardCreateManyArgs} args - Arguments to create many IconCards.
     * @example
     * // Create many IconCards
     * const iconCard = await prisma.iconCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IconCardCreateManyArgs>(args?: SelectSubset<T, IconCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a IconCard.
     * @param {IconCardDeleteArgs} args - Arguments to delete one IconCard.
     * @example
     * // Delete one IconCard
     * const IconCard = await prisma.iconCard.delete({
     *   where: {
     *     // ... filter to delete one IconCard
     *   }
     * })
     * 
     */
    delete<T extends IconCardDeleteArgs>(args: SelectSubset<T, IconCardDeleteArgs<ExtArgs>>): Prisma__IconCardClient<$Result.GetResult<Prisma.$IconCardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one IconCard.
     * @param {IconCardUpdateArgs} args - Arguments to update one IconCard.
     * @example
     * // Update one IconCard
     * const iconCard = await prisma.iconCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IconCardUpdateArgs>(args: SelectSubset<T, IconCardUpdateArgs<ExtArgs>>): Prisma__IconCardClient<$Result.GetResult<Prisma.$IconCardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more IconCards.
     * @param {IconCardDeleteManyArgs} args - Arguments to filter IconCards to delete.
     * @example
     * // Delete a few IconCards
     * const { count } = await prisma.iconCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IconCardDeleteManyArgs>(args?: SelectSubset<T, IconCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IconCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IconCards
     * const iconCard = await prisma.iconCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IconCardUpdateManyArgs>(args: SelectSubset<T, IconCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IconCard.
     * @param {IconCardUpsertArgs} args - Arguments to update or create a IconCard.
     * @example
     * // Update or create a IconCard
     * const iconCard = await prisma.iconCard.upsert({
     *   create: {
     *     // ... data to create a IconCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IconCard we want to update
     *   }
     * })
     */
    upsert<T extends IconCardUpsertArgs>(args: SelectSubset<T, IconCardUpsertArgs<ExtArgs>>): Prisma__IconCardClient<$Result.GetResult<Prisma.$IconCardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of IconCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardCountArgs} args - Arguments to filter IconCards to count.
     * @example
     * // Count the number of IconCards
     * const count = await prisma.iconCard.count({
     *   where: {
     *     // ... the filter for the IconCards we want to count
     *   }
     * })
    **/
    count<T extends IconCardCountArgs>(
      args?: Subset<T, IconCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IconCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IconCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IconCardAggregateArgs>(args: Subset<T, IconCardAggregateArgs>): Prisma.PrismaPromise<GetIconCardAggregateType<T>>

    /**
     * Group by IconCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IconCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IconCardGroupByArgs['orderBy'] }
        : { orderBy?: IconCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IconCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIconCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IconCard model
   */
  readonly fields: IconCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IconCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IconCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    images<T extends IconCard$imagesArgs<ExtArgs> = {}>(args?: Subset<T, IconCard$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IconCardImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IconCard model
   */
  interface IconCardFieldRefs {
    readonly id: FieldRef<"IconCard", 'Int'>
    readonly published: FieldRef<"IconCard", 'Boolean'>
    readonly label: FieldRef<"IconCard", 'String'>
  }
    

  // Custom InputTypes
  /**
   * IconCard findUnique
   */
  export type IconCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCard
     */
    select?: IconCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCard
     */
    omit?: IconCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardInclude<ExtArgs> | null
    /**
     * Filter, which IconCard to fetch.
     */
    where: IconCardWhereUniqueInput
  }

  /**
   * IconCard findUniqueOrThrow
   */
  export type IconCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCard
     */
    select?: IconCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCard
     */
    omit?: IconCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardInclude<ExtArgs> | null
    /**
     * Filter, which IconCard to fetch.
     */
    where: IconCardWhereUniqueInput
  }

  /**
   * IconCard findFirst
   */
  export type IconCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCard
     */
    select?: IconCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCard
     */
    omit?: IconCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardInclude<ExtArgs> | null
    /**
     * Filter, which IconCard to fetch.
     */
    where?: IconCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IconCards to fetch.
     */
    orderBy?: IconCardOrderByWithRelationInput | IconCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IconCards.
     */
    cursor?: IconCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IconCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IconCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IconCards.
     */
    distinct?: IconCardScalarFieldEnum | IconCardScalarFieldEnum[]
  }

  /**
   * IconCard findFirstOrThrow
   */
  export type IconCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCard
     */
    select?: IconCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCard
     */
    omit?: IconCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardInclude<ExtArgs> | null
    /**
     * Filter, which IconCard to fetch.
     */
    where?: IconCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IconCards to fetch.
     */
    orderBy?: IconCardOrderByWithRelationInput | IconCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IconCards.
     */
    cursor?: IconCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IconCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IconCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IconCards.
     */
    distinct?: IconCardScalarFieldEnum | IconCardScalarFieldEnum[]
  }

  /**
   * IconCard findMany
   */
  export type IconCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCard
     */
    select?: IconCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCard
     */
    omit?: IconCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardInclude<ExtArgs> | null
    /**
     * Filter, which IconCards to fetch.
     */
    where?: IconCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IconCards to fetch.
     */
    orderBy?: IconCardOrderByWithRelationInput | IconCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IconCards.
     */
    cursor?: IconCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IconCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IconCards.
     */
    skip?: number
    distinct?: IconCardScalarFieldEnum | IconCardScalarFieldEnum[]
  }

  /**
   * IconCard create
   */
  export type IconCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCard
     */
    select?: IconCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCard
     */
    omit?: IconCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardInclude<ExtArgs> | null
    /**
     * The data needed to create a IconCard.
     */
    data: XOR<IconCardCreateInput, IconCardUncheckedCreateInput>
  }

  /**
   * IconCard createMany
   */
  export type IconCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IconCards.
     */
    data: IconCardCreateManyInput | IconCardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IconCard update
   */
  export type IconCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCard
     */
    select?: IconCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCard
     */
    omit?: IconCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardInclude<ExtArgs> | null
    /**
     * The data needed to update a IconCard.
     */
    data: XOR<IconCardUpdateInput, IconCardUncheckedUpdateInput>
    /**
     * Choose, which IconCard to update.
     */
    where: IconCardWhereUniqueInput
  }

  /**
   * IconCard updateMany
   */
  export type IconCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IconCards.
     */
    data: XOR<IconCardUpdateManyMutationInput, IconCardUncheckedUpdateManyInput>
    /**
     * Filter which IconCards to update
     */
    where?: IconCardWhereInput
    /**
     * Limit how many IconCards to update.
     */
    limit?: number
  }

  /**
   * IconCard upsert
   */
  export type IconCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCard
     */
    select?: IconCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCard
     */
    omit?: IconCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardInclude<ExtArgs> | null
    /**
     * The filter to search for the IconCard to update in case it exists.
     */
    where: IconCardWhereUniqueInput
    /**
     * In case the IconCard found by the `where` argument doesn't exist, create a new IconCard with this data.
     */
    create: XOR<IconCardCreateInput, IconCardUncheckedCreateInput>
    /**
     * In case the IconCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IconCardUpdateInput, IconCardUncheckedUpdateInput>
  }

  /**
   * IconCard delete
   */
  export type IconCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCard
     */
    select?: IconCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCard
     */
    omit?: IconCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardInclude<ExtArgs> | null
    /**
     * Filter which IconCard to delete.
     */
    where: IconCardWhereUniqueInput
  }

  /**
   * IconCard deleteMany
   */
  export type IconCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IconCards to delete
     */
    where?: IconCardWhereInput
    /**
     * Limit how many IconCards to delete.
     */
    limit?: number
  }

  /**
   * IconCard.images
   */
  export type IconCard$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCardImage
     */
    select?: IconCardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCardImage
     */
    omit?: IconCardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardImageInclude<ExtArgs> | null
    where?: IconCardImageWhereInput
    orderBy?: IconCardImageOrderByWithRelationInput | IconCardImageOrderByWithRelationInput[]
    cursor?: IconCardImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IconCardImageScalarFieldEnum | IconCardImageScalarFieldEnum[]
  }

  /**
   * IconCard without action
   */
  export type IconCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCard
     */
    select?: IconCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCard
     */
    omit?: IconCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardInclude<ExtArgs> | null
  }


  /**
   * Model IconCardImage
   */

  export type AggregateIconCardImage = {
    _count: IconCardImageCountAggregateOutputType | null
    _avg: IconCardImageAvgAggregateOutputType | null
    _sum: IconCardImageSumAggregateOutputType | null
    _min: IconCardImageMinAggregateOutputType | null
    _max: IconCardImageMaxAggregateOutputType | null
  }

  export type IconCardImageAvgAggregateOutputType = {
    id: number | null
    icon_card_id: number | null
    position: number | null
  }

  export type IconCardImageSumAggregateOutputType = {
    id: number | null
    icon_card_id: number | null
    position: number | null
  }

  export type IconCardImageMinAggregateOutputType = {
    id: number | null
    icon_card_id: number | null
    alt: string | null
    image: string | null
    position: number | null
  }

  export type IconCardImageMaxAggregateOutputType = {
    id: number | null
    icon_card_id: number | null
    alt: string | null
    image: string | null
    position: number | null
  }

  export type IconCardImageCountAggregateOutputType = {
    id: number
    icon_card_id: number
    alt: number
    image: number
    position: number
    _all: number
  }


  export type IconCardImageAvgAggregateInputType = {
    id?: true
    icon_card_id?: true
    position?: true
  }

  export type IconCardImageSumAggregateInputType = {
    id?: true
    icon_card_id?: true
    position?: true
  }

  export type IconCardImageMinAggregateInputType = {
    id?: true
    icon_card_id?: true
    alt?: true
    image?: true
    position?: true
  }

  export type IconCardImageMaxAggregateInputType = {
    id?: true
    icon_card_id?: true
    alt?: true
    image?: true
    position?: true
  }

  export type IconCardImageCountAggregateInputType = {
    id?: true
    icon_card_id?: true
    alt?: true
    image?: true
    position?: true
    _all?: true
  }

  export type IconCardImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IconCardImage to aggregate.
     */
    where?: IconCardImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IconCardImages to fetch.
     */
    orderBy?: IconCardImageOrderByWithRelationInput | IconCardImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IconCardImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IconCardImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IconCardImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IconCardImages
    **/
    _count?: true | IconCardImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IconCardImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IconCardImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IconCardImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IconCardImageMaxAggregateInputType
  }

  export type GetIconCardImageAggregateType<T extends IconCardImageAggregateArgs> = {
        [P in keyof T & keyof AggregateIconCardImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIconCardImage[P]>
      : GetScalarType<T[P], AggregateIconCardImage[P]>
  }




  export type IconCardImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IconCardImageWhereInput
    orderBy?: IconCardImageOrderByWithAggregationInput | IconCardImageOrderByWithAggregationInput[]
    by: IconCardImageScalarFieldEnum[] | IconCardImageScalarFieldEnum
    having?: IconCardImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IconCardImageCountAggregateInputType | true
    _avg?: IconCardImageAvgAggregateInputType
    _sum?: IconCardImageSumAggregateInputType
    _min?: IconCardImageMinAggregateInputType
    _max?: IconCardImageMaxAggregateInputType
  }

  export type IconCardImageGroupByOutputType = {
    id: number
    icon_card_id: number
    alt: string
    image: string
    position: number | null
    _count: IconCardImageCountAggregateOutputType | null
    _avg: IconCardImageAvgAggregateOutputType | null
    _sum: IconCardImageSumAggregateOutputType | null
    _min: IconCardImageMinAggregateOutputType | null
    _max: IconCardImageMaxAggregateOutputType | null
  }

  type GetIconCardImageGroupByPayload<T extends IconCardImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IconCardImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IconCardImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IconCardImageGroupByOutputType[P]>
            : GetScalarType<T[P], IconCardImageGroupByOutputType[P]>
        }
      >
    >


  export type IconCardImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    icon_card_id?: boolean
    alt?: boolean
    image?: boolean
    position?: boolean
    icon_card?: boolean | IconCardDefaultArgs<ExtArgs>
    cards?: boolean | IconCardImage$cardsArgs<ExtArgs>
    _count?: boolean | IconCardImageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["iconCardImage"]>



  export type IconCardImageSelectScalar = {
    id?: boolean
    icon_card_id?: boolean
    alt?: boolean
    image?: boolean
    position?: boolean
  }

  export type IconCardImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "icon_card_id" | "alt" | "image" | "position", ExtArgs["result"]["iconCardImage"]>
  export type IconCardImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    icon_card?: boolean | IconCardDefaultArgs<ExtArgs>
    cards?: boolean | IconCardImage$cardsArgs<ExtArgs>
    _count?: boolean | IconCardImageCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $IconCardImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IconCardImage"
    objects: {
      icon_card: Prisma.$IconCardPayload<ExtArgs>
      cards: Prisma.$CardIconImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      icon_card_id: number
      alt: string
      image: string
      position: number | null
    }, ExtArgs["result"]["iconCardImage"]>
    composites: {}
  }

  type IconCardImageGetPayload<S extends boolean | null | undefined | IconCardImageDefaultArgs> = $Result.GetResult<Prisma.$IconCardImagePayload, S>

  type IconCardImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IconCardImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IconCardImageCountAggregateInputType | true
    }

  export interface IconCardImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IconCardImage'], meta: { name: 'IconCardImage' } }
    /**
     * Find zero or one IconCardImage that matches the filter.
     * @param {IconCardImageFindUniqueArgs} args - Arguments to find a IconCardImage
     * @example
     * // Get one IconCardImage
     * const iconCardImage = await prisma.iconCardImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IconCardImageFindUniqueArgs>(args: SelectSubset<T, IconCardImageFindUniqueArgs<ExtArgs>>): Prisma__IconCardImageClient<$Result.GetResult<Prisma.$IconCardImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one IconCardImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IconCardImageFindUniqueOrThrowArgs} args - Arguments to find a IconCardImage
     * @example
     * // Get one IconCardImage
     * const iconCardImage = await prisma.iconCardImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IconCardImageFindUniqueOrThrowArgs>(args: SelectSubset<T, IconCardImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IconCardImageClient<$Result.GetResult<Prisma.$IconCardImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IconCardImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardImageFindFirstArgs} args - Arguments to find a IconCardImage
     * @example
     * // Get one IconCardImage
     * const iconCardImage = await prisma.iconCardImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IconCardImageFindFirstArgs>(args?: SelectSubset<T, IconCardImageFindFirstArgs<ExtArgs>>): Prisma__IconCardImageClient<$Result.GetResult<Prisma.$IconCardImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IconCardImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardImageFindFirstOrThrowArgs} args - Arguments to find a IconCardImage
     * @example
     * // Get one IconCardImage
     * const iconCardImage = await prisma.iconCardImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IconCardImageFindFirstOrThrowArgs>(args?: SelectSubset<T, IconCardImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__IconCardImageClient<$Result.GetResult<Prisma.$IconCardImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more IconCardImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IconCardImages
     * const iconCardImages = await prisma.iconCardImage.findMany()
     * 
     * // Get first 10 IconCardImages
     * const iconCardImages = await prisma.iconCardImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const iconCardImageWithIdOnly = await prisma.iconCardImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IconCardImageFindManyArgs>(args?: SelectSubset<T, IconCardImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IconCardImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a IconCardImage.
     * @param {IconCardImageCreateArgs} args - Arguments to create a IconCardImage.
     * @example
     * // Create one IconCardImage
     * const IconCardImage = await prisma.iconCardImage.create({
     *   data: {
     *     // ... data to create a IconCardImage
     *   }
     * })
     * 
     */
    create<T extends IconCardImageCreateArgs>(args: SelectSubset<T, IconCardImageCreateArgs<ExtArgs>>): Prisma__IconCardImageClient<$Result.GetResult<Prisma.$IconCardImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many IconCardImages.
     * @param {IconCardImageCreateManyArgs} args - Arguments to create many IconCardImages.
     * @example
     * // Create many IconCardImages
     * const iconCardImage = await prisma.iconCardImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IconCardImageCreateManyArgs>(args?: SelectSubset<T, IconCardImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a IconCardImage.
     * @param {IconCardImageDeleteArgs} args - Arguments to delete one IconCardImage.
     * @example
     * // Delete one IconCardImage
     * const IconCardImage = await prisma.iconCardImage.delete({
     *   where: {
     *     // ... filter to delete one IconCardImage
     *   }
     * })
     * 
     */
    delete<T extends IconCardImageDeleteArgs>(args: SelectSubset<T, IconCardImageDeleteArgs<ExtArgs>>): Prisma__IconCardImageClient<$Result.GetResult<Prisma.$IconCardImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one IconCardImage.
     * @param {IconCardImageUpdateArgs} args - Arguments to update one IconCardImage.
     * @example
     * // Update one IconCardImage
     * const iconCardImage = await prisma.iconCardImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IconCardImageUpdateArgs>(args: SelectSubset<T, IconCardImageUpdateArgs<ExtArgs>>): Prisma__IconCardImageClient<$Result.GetResult<Prisma.$IconCardImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more IconCardImages.
     * @param {IconCardImageDeleteManyArgs} args - Arguments to filter IconCardImages to delete.
     * @example
     * // Delete a few IconCardImages
     * const { count } = await prisma.iconCardImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IconCardImageDeleteManyArgs>(args?: SelectSubset<T, IconCardImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IconCardImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IconCardImages
     * const iconCardImage = await prisma.iconCardImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IconCardImageUpdateManyArgs>(args: SelectSubset<T, IconCardImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IconCardImage.
     * @param {IconCardImageUpsertArgs} args - Arguments to update or create a IconCardImage.
     * @example
     * // Update or create a IconCardImage
     * const iconCardImage = await prisma.iconCardImage.upsert({
     *   create: {
     *     // ... data to create a IconCardImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IconCardImage we want to update
     *   }
     * })
     */
    upsert<T extends IconCardImageUpsertArgs>(args: SelectSubset<T, IconCardImageUpsertArgs<ExtArgs>>): Prisma__IconCardImageClient<$Result.GetResult<Prisma.$IconCardImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of IconCardImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardImageCountArgs} args - Arguments to filter IconCardImages to count.
     * @example
     * // Count the number of IconCardImages
     * const count = await prisma.iconCardImage.count({
     *   where: {
     *     // ... the filter for the IconCardImages we want to count
     *   }
     * })
    **/
    count<T extends IconCardImageCountArgs>(
      args?: Subset<T, IconCardImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IconCardImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IconCardImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IconCardImageAggregateArgs>(args: Subset<T, IconCardImageAggregateArgs>): Prisma.PrismaPromise<GetIconCardImageAggregateType<T>>

    /**
     * Group by IconCardImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IconCardImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IconCardImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IconCardImageGroupByArgs['orderBy'] }
        : { orderBy?: IconCardImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IconCardImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIconCardImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IconCardImage model
   */
  readonly fields: IconCardImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IconCardImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IconCardImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    icon_card<T extends IconCardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IconCardDefaultArgs<ExtArgs>>): Prisma__IconCardClient<$Result.GetResult<Prisma.$IconCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cards<T extends IconCardImage$cardsArgs<ExtArgs> = {}>(args?: Subset<T, IconCardImage$cardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardIconImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IconCardImage model
   */
  interface IconCardImageFieldRefs {
    readonly id: FieldRef<"IconCardImage", 'Int'>
    readonly icon_card_id: FieldRef<"IconCardImage", 'Int'>
    readonly alt: FieldRef<"IconCardImage", 'String'>
    readonly image: FieldRef<"IconCardImage", 'String'>
    readonly position: FieldRef<"IconCardImage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * IconCardImage findUnique
   */
  export type IconCardImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCardImage
     */
    select?: IconCardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCardImage
     */
    omit?: IconCardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardImageInclude<ExtArgs> | null
    /**
     * Filter, which IconCardImage to fetch.
     */
    where: IconCardImageWhereUniqueInput
  }

  /**
   * IconCardImage findUniqueOrThrow
   */
  export type IconCardImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCardImage
     */
    select?: IconCardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCardImage
     */
    omit?: IconCardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardImageInclude<ExtArgs> | null
    /**
     * Filter, which IconCardImage to fetch.
     */
    where: IconCardImageWhereUniqueInput
  }

  /**
   * IconCardImage findFirst
   */
  export type IconCardImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCardImage
     */
    select?: IconCardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCardImage
     */
    omit?: IconCardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardImageInclude<ExtArgs> | null
    /**
     * Filter, which IconCardImage to fetch.
     */
    where?: IconCardImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IconCardImages to fetch.
     */
    orderBy?: IconCardImageOrderByWithRelationInput | IconCardImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IconCardImages.
     */
    cursor?: IconCardImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IconCardImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IconCardImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IconCardImages.
     */
    distinct?: IconCardImageScalarFieldEnum | IconCardImageScalarFieldEnum[]
  }

  /**
   * IconCardImage findFirstOrThrow
   */
  export type IconCardImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCardImage
     */
    select?: IconCardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCardImage
     */
    omit?: IconCardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardImageInclude<ExtArgs> | null
    /**
     * Filter, which IconCardImage to fetch.
     */
    where?: IconCardImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IconCardImages to fetch.
     */
    orderBy?: IconCardImageOrderByWithRelationInput | IconCardImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IconCardImages.
     */
    cursor?: IconCardImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IconCardImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IconCardImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IconCardImages.
     */
    distinct?: IconCardImageScalarFieldEnum | IconCardImageScalarFieldEnum[]
  }

  /**
   * IconCardImage findMany
   */
  export type IconCardImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCardImage
     */
    select?: IconCardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCardImage
     */
    omit?: IconCardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardImageInclude<ExtArgs> | null
    /**
     * Filter, which IconCardImages to fetch.
     */
    where?: IconCardImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IconCardImages to fetch.
     */
    orderBy?: IconCardImageOrderByWithRelationInput | IconCardImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IconCardImages.
     */
    cursor?: IconCardImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IconCardImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IconCardImages.
     */
    skip?: number
    distinct?: IconCardImageScalarFieldEnum | IconCardImageScalarFieldEnum[]
  }

  /**
   * IconCardImage create
   */
  export type IconCardImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCardImage
     */
    select?: IconCardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCardImage
     */
    omit?: IconCardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardImageInclude<ExtArgs> | null
    /**
     * The data needed to create a IconCardImage.
     */
    data: XOR<IconCardImageCreateInput, IconCardImageUncheckedCreateInput>
  }

  /**
   * IconCardImage createMany
   */
  export type IconCardImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IconCardImages.
     */
    data: IconCardImageCreateManyInput | IconCardImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IconCardImage update
   */
  export type IconCardImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCardImage
     */
    select?: IconCardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCardImage
     */
    omit?: IconCardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardImageInclude<ExtArgs> | null
    /**
     * The data needed to update a IconCardImage.
     */
    data: XOR<IconCardImageUpdateInput, IconCardImageUncheckedUpdateInput>
    /**
     * Choose, which IconCardImage to update.
     */
    where: IconCardImageWhereUniqueInput
  }

  /**
   * IconCardImage updateMany
   */
  export type IconCardImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IconCardImages.
     */
    data: XOR<IconCardImageUpdateManyMutationInput, IconCardImageUncheckedUpdateManyInput>
    /**
     * Filter which IconCardImages to update
     */
    where?: IconCardImageWhereInput
    /**
     * Limit how many IconCardImages to update.
     */
    limit?: number
  }

  /**
   * IconCardImage upsert
   */
  export type IconCardImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCardImage
     */
    select?: IconCardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCardImage
     */
    omit?: IconCardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardImageInclude<ExtArgs> | null
    /**
     * The filter to search for the IconCardImage to update in case it exists.
     */
    where: IconCardImageWhereUniqueInput
    /**
     * In case the IconCardImage found by the `where` argument doesn't exist, create a new IconCardImage with this data.
     */
    create: XOR<IconCardImageCreateInput, IconCardImageUncheckedCreateInput>
    /**
     * In case the IconCardImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IconCardImageUpdateInput, IconCardImageUncheckedUpdateInput>
  }

  /**
   * IconCardImage delete
   */
  export type IconCardImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCardImage
     */
    select?: IconCardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCardImage
     */
    omit?: IconCardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardImageInclude<ExtArgs> | null
    /**
     * Filter which IconCardImage to delete.
     */
    where: IconCardImageWhereUniqueInput
  }

  /**
   * IconCardImage deleteMany
   */
  export type IconCardImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IconCardImages to delete
     */
    where?: IconCardImageWhereInput
    /**
     * Limit how many IconCardImages to delete.
     */
    limit?: number
  }

  /**
   * IconCardImage.cards
   */
  export type IconCardImage$cardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardIconImage
     */
    select?: CardIconImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardIconImage
     */
    omit?: CardIconImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIconImageInclude<ExtArgs> | null
    where?: CardIconImageWhereInput
    orderBy?: CardIconImageOrderByWithRelationInput | CardIconImageOrderByWithRelationInput[]
    cursor?: CardIconImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardIconImageScalarFieldEnum | CardIconImageScalarFieldEnum[]
  }

  /**
   * IconCardImage without action
   */
  export type IconCardImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IconCardImage
     */
    select?: IconCardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IconCardImage
     */
    omit?: IconCardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IconCardImageInclude<ExtArgs> | null
  }


  /**
   * Model CardIconImage
   */

  export type AggregateCardIconImage = {
    _count: CardIconImageCountAggregateOutputType | null
    _avg: CardIconImageAvgAggregateOutputType | null
    _sum: CardIconImageSumAggregateOutputType | null
    _min: CardIconImageMinAggregateOutputType | null
    _max: CardIconImageMaxAggregateOutputType | null
  }

  export type CardIconImageAvgAggregateOutputType = {
    id: number | null
    card_id: number | null
    icon_card_image_id: number | null
  }

  export type CardIconImageSumAggregateOutputType = {
    id: number | null
    card_id: number | null
    icon_card_image_id: number | null
  }

  export type CardIconImageMinAggregateOutputType = {
    id: number | null
    card_id: number | null
    icon_card_image_id: number | null
  }

  export type CardIconImageMaxAggregateOutputType = {
    id: number | null
    card_id: number | null
    icon_card_image_id: number | null
  }

  export type CardIconImageCountAggregateOutputType = {
    id: number
    card_id: number
    icon_card_image_id: number
    _all: number
  }


  export type CardIconImageAvgAggregateInputType = {
    id?: true
    card_id?: true
    icon_card_image_id?: true
  }

  export type CardIconImageSumAggregateInputType = {
    id?: true
    card_id?: true
    icon_card_image_id?: true
  }

  export type CardIconImageMinAggregateInputType = {
    id?: true
    card_id?: true
    icon_card_image_id?: true
  }

  export type CardIconImageMaxAggregateInputType = {
    id?: true
    card_id?: true
    icon_card_image_id?: true
  }

  export type CardIconImageCountAggregateInputType = {
    id?: true
    card_id?: true
    icon_card_image_id?: true
    _all?: true
  }

  export type CardIconImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardIconImage to aggregate.
     */
    where?: CardIconImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardIconImages to fetch.
     */
    orderBy?: CardIconImageOrderByWithRelationInput | CardIconImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardIconImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardIconImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardIconImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CardIconImages
    **/
    _count?: true | CardIconImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardIconImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardIconImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardIconImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardIconImageMaxAggregateInputType
  }

  export type GetCardIconImageAggregateType<T extends CardIconImageAggregateArgs> = {
        [P in keyof T & keyof AggregateCardIconImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCardIconImage[P]>
      : GetScalarType<T[P], AggregateCardIconImage[P]>
  }




  export type CardIconImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardIconImageWhereInput
    orderBy?: CardIconImageOrderByWithAggregationInput | CardIconImageOrderByWithAggregationInput[]
    by: CardIconImageScalarFieldEnum[] | CardIconImageScalarFieldEnum
    having?: CardIconImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardIconImageCountAggregateInputType | true
    _avg?: CardIconImageAvgAggregateInputType
    _sum?: CardIconImageSumAggregateInputType
    _min?: CardIconImageMinAggregateInputType
    _max?: CardIconImageMaxAggregateInputType
  }

  export type CardIconImageGroupByOutputType = {
    id: number
    card_id: number
    icon_card_image_id: number
    _count: CardIconImageCountAggregateOutputType | null
    _avg: CardIconImageAvgAggregateOutputType | null
    _sum: CardIconImageSumAggregateOutputType | null
    _min: CardIconImageMinAggregateOutputType | null
    _max: CardIconImageMaxAggregateOutputType | null
  }

  type GetCardIconImageGroupByPayload<T extends CardIconImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardIconImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardIconImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardIconImageGroupByOutputType[P]>
            : GetScalarType<T[P], CardIconImageGroupByOutputType[P]>
        }
      >
    >


  export type CardIconImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    card_id?: boolean
    icon_card_image_id?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    icon_card_image?: boolean | IconCardImageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardIconImage"]>



  export type CardIconImageSelectScalar = {
    id?: boolean
    card_id?: boolean
    icon_card_image_id?: boolean
  }

  export type CardIconImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "card_id" | "icon_card_image_id", ExtArgs["result"]["cardIconImage"]>
  export type CardIconImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    icon_card_image?: boolean | IconCardImageDefaultArgs<ExtArgs>
  }

  export type $CardIconImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CardIconImage"
    objects: {
      card: Prisma.$CardPayload<ExtArgs>
      icon_card_image: Prisma.$IconCardImagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      card_id: number
      icon_card_image_id: number
    }, ExtArgs["result"]["cardIconImage"]>
    composites: {}
  }

  type CardIconImageGetPayload<S extends boolean | null | undefined | CardIconImageDefaultArgs> = $Result.GetResult<Prisma.$CardIconImagePayload, S>

  type CardIconImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CardIconImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CardIconImageCountAggregateInputType | true
    }

  export interface CardIconImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CardIconImage'], meta: { name: 'CardIconImage' } }
    /**
     * Find zero or one CardIconImage that matches the filter.
     * @param {CardIconImageFindUniqueArgs} args - Arguments to find a CardIconImage
     * @example
     * // Get one CardIconImage
     * const cardIconImage = await prisma.cardIconImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardIconImageFindUniqueArgs>(args: SelectSubset<T, CardIconImageFindUniqueArgs<ExtArgs>>): Prisma__CardIconImageClient<$Result.GetResult<Prisma.$CardIconImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CardIconImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CardIconImageFindUniqueOrThrowArgs} args - Arguments to find a CardIconImage
     * @example
     * // Get one CardIconImage
     * const cardIconImage = await prisma.cardIconImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardIconImageFindUniqueOrThrowArgs>(args: SelectSubset<T, CardIconImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardIconImageClient<$Result.GetResult<Prisma.$CardIconImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CardIconImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardIconImageFindFirstArgs} args - Arguments to find a CardIconImage
     * @example
     * // Get one CardIconImage
     * const cardIconImage = await prisma.cardIconImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardIconImageFindFirstArgs>(args?: SelectSubset<T, CardIconImageFindFirstArgs<ExtArgs>>): Prisma__CardIconImageClient<$Result.GetResult<Prisma.$CardIconImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CardIconImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardIconImageFindFirstOrThrowArgs} args - Arguments to find a CardIconImage
     * @example
     * // Get one CardIconImage
     * const cardIconImage = await prisma.cardIconImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardIconImageFindFirstOrThrowArgs>(args?: SelectSubset<T, CardIconImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardIconImageClient<$Result.GetResult<Prisma.$CardIconImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CardIconImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardIconImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CardIconImages
     * const cardIconImages = await prisma.cardIconImage.findMany()
     * 
     * // Get first 10 CardIconImages
     * const cardIconImages = await prisma.cardIconImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardIconImageWithIdOnly = await prisma.cardIconImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CardIconImageFindManyArgs>(args?: SelectSubset<T, CardIconImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardIconImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CardIconImage.
     * @param {CardIconImageCreateArgs} args - Arguments to create a CardIconImage.
     * @example
     * // Create one CardIconImage
     * const CardIconImage = await prisma.cardIconImage.create({
     *   data: {
     *     // ... data to create a CardIconImage
     *   }
     * })
     * 
     */
    create<T extends CardIconImageCreateArgs>(args: SelectSubset<T, CardIconImageCreateArgs<ExtArgs>>): Prisma__CardIconImageClient<$Result.GetResult<Prisma.$CardIconImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CardIconImages.
     * @param {CardIconImageCreateManyArgs} args - Arguments to create many CardIconImages.
     * @example
     * // Create many CardIconImages
     * const cardIconImage = await prisma.cardIconImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardIconImageCreateManyArgs>(args?: SelectSubset<T, CardIconImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CardIconImage.
     * @param {CardIconImageDeleteArgs} args - Arguments to delete one CardIconImage.
     * @example
     * // Delete one CardIconImage
     * const CardIconImage = await prisma.cardIconImage.delete({
     *   where: {
     *     // ... filter to delete one CardIconImage
     *   }
     * })
     * 
     */
    delete<T extends CardIconImageDeleteArgs>(args: SelectSubset<T, CardIconImageDeleteArgs<ExtArgs>>): Prisma__CardIconImageClient<$Result.GetResult<Prisma.$CardIconImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CardIconImage.
     * @param {CardIconImageUpdateArgs} args - Arguments to update one CardIconImage.
     * @example
     * // Update one CardIconImage
     * const cardIconImage = await prisma.cardIconImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardIconImageUpdateArgs>(args: SelectSubset<T, CardIconImageUpdateArgs<ExtArgs>>): Prisma__CardIconImageClient<$Result.GetResult<Prisma.$CardIconImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CardIconImages.
     * @param {CardIconImageDeleteManyArgs} args - Arguments to filter CardIconImages to delete.
     * @example
     * // Delete a few CardIconImages
     * const { count } = await prisma.cardIconImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardIconImageDeleteManyArgs>(args?: SelectSubset<T, CardIconImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardIconImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardIconImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CardIconImages
     * const cardIconImage = await prisma.cardIconImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardIconImageUpdateManyArgs>(args: SelectSubset<T, CardIconImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CardIconImage.
     * @param {CardIconImageUpsertArgs} args - Arguments to update or create a CardIconImage.
     * @example
     * // Update or create a CardIconImage
     * const cardIconImage = await prisma.cardIconImage.upsert({
     *   create: {
     *     // ... data to create a CardIconImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CardIconImage we want to update
     *   }
     * })
     */
    upsert<T extends CardIconImageUpsertArgs>(args: SelectSubset<T, CardIconImageUpsertArgs<ExtArgs>>): Prisma__CardIconImageClient<$Result.GetResult<Prisma.$CardIconImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CardIconImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardIconImageCountArgs} args - Arguments to filter CardIconImages to count.
     * @example
     * // Count the number of CardIconImages
     * const count = await prisma.cardIconImage.count({
     *   where: {
     *     // ... the filter for the CardIconImages we want to count
     *   }
     * })
    **/
    count<T extends CardIconImageCountArgs>(
      args?: Subset<T, CardIconImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardIconImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CardIconImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardIconImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardIconImageAggregateArgs>(args: Subset<T, CardIconImageAggregateArgs>): Prisma.PrismaPromise<GetCardIconImageAggregateType<T>>

    /**
     * Group by CardIconImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardIconImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardIconImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardIconImageGroupByArgs['orderBy'] }
        : { orderBy?: CardIconImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardIconImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardIconImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CardIconImage model
   */
  readonly fields: CardIconImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CardIconImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardIconImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    card<T extends CardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardDefaultArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    icon_card_image<T extends IconCardImageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IconCardImageDefaultArgs<ExtArgs>>): Prisma__IconCardImageClient<$Result.GetResult<Prisma.$IconCardImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CardIconImage model
   */
  interface CardIconImageFieldRefs {
    readonly id: FieldRef<"CardIconImage", 'Int'>
    readonly card_id: FieldRef<"CardIconImage", 'Int'>
    readonly icon_card_image_id: FieldRef<"CardIconImage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CardIconImage findUnique
   */
  export type CardIconImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardIconImage
     */
    select?: CardIconImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardIconImage
     */
    omit?: CardIconImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIconImageInclude<ExtArgs> | null
    /**
     * Filter, which CardIconImage to fetch.
     */
    where: CardIconImageWhereUniqueInput
  }

  /**
   * CardIconImage findUniqueOrThrow
   */
  export type CardIconImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardIconImage
     */
    select?: CardIconImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardIconImage
     */
    omit?: CardIconImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIconImageInclude<ExtArgs> | null
    /**
     * Filter, which CardIconImage to fetch.
     */
    where: CardIconImageWhereUniqueInput
  }

  /**
   * CardIconImage findFirst
   */
  export type CardIconImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardIconImage
     */
    select?: CardIconImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardIconImage
     */
    omit?: CardIconImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIconImageInclude<ExtArgs> | null
    /**
     * Filter, which CardIconImage to fetch.
     */
    where?: CardIconImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardIconImages to fetch.
     */
    orderBy?: CardIconImageOrderByWithRelationInput | CardIconImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardIconImages.
     */
    cursor?: CardIconImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardIconImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardIconImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardIconImages.
     */
    distinct?: CardIconImageScalarFieldEnum | CardIconImageScalarFieldEnum[]
  }

  /**
   * CardIconImage findFirstOrThrow
   */
  export type CardIconImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardIconImage
     */
    select?: CardIconImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardIconImage
     */
    omit?: CardIconImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIconImageInclude<ExtArgs> | null
    /**
     * Filter, which CardIconImage to fetch.
     */
    where?: CardIconImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardIconImages to fetch.
     */
    orderBy?: CardIconImageOrderByWithRelationInput | CardIconImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardIconImages.
     */
    cursor?: CardIconImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardIconImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardIconImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardIconImages.
     */
    distinct?: CardIconImageScalarFieldEnum | CardIconImageScalarFieldEnum[]
  }

  /**
   * CardIconImage findMany
   */
  export type CardIconImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardIconImage
     */
    select?: CardIconImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardIconImage
     */
    omit?: CardIconImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIconImageInclude<ExtArgs> | null
    /**
     * Filter, which CardIconImages to fetch.
     */
    where?: CardIconImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardIconImages to fetch.
     */
    orderBy?: CardIconImageOrderByWithRelationInput | CardIconImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CardIconImages.
     */
    cursor?: CardIconImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardIconImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardIconImages.
     */
    skip?: number
    distinct?: CardIconImageScalarFieldEnum | CardIconImageScalarFieldEnum[]
  }

  /**
   * CardIconImage create
   */
  export type CardIconImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardIconImage
     */
    select?: CardIconImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardIconImage
     */
    omit?: CardIconImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIconImageInclude<ExtArgs> | null
    /**
     * The data needed to create a CardIconImage.
     */
    data: XOR<CardIconImageCreateInput, CardIconImageUncheckedCreateInput>
  }

  /**
   * CardIconImage createMany
   */
  export type CardIconImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CardIconImages.
     */
    data: CardIconImageCreateManyInput | CardIconImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CardIconImage update
   */
  export type CardIconImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardIconImage
     */
    select?: CardIconImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardIconImage
     */
    omit?: CardIconImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIconImageInclude<ExtArgs> | null
    /**
     * The data needed to update a CardIconImage.
     */
    data: XOR<CardIconImageUpdateInput, CardIconImageUncheckedUpdateInput>
    /**
     * Choose, which CardIconImage to update.
     */
    where: CardIconImageWhereUniqueInput
  }

  /**
   * CardIconImage updateMany
   */
  export type CardIconImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CardIconImages.
     */
    data: XOR<CardIconImageUpdateManyMutationInput, CardIconImageUncheckedUpdateManyInput>
    /**
     * Filter which CardIconImages to update
     */
    where?: CardIconImageWhereInput
    /**
     * Limit how many CardIconImages to update.
     */
    limit?: number
  }

  /**
   * CardIconImage upsert
   */
  export type CardIconImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardIconImage
     */
    select?: CardIconImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardIconImage
     */
    omit?: CardIconImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIconImageInclude<ExtArgs> | null
    /**
     * The filter to search for the CardIconImage to update in case it exists.
     */
    where: CardIconImageWhereUniqueInput
    /**
     * In case the CardIconImage found by the `where` argument doesn't exist, create a new CardIconImage with this data.
     */
    create: XOR<CardIconImageCreateInput, CardIconImageUncheckedCreateInput>
    /**
     * In case the CardIconImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardIconImageUpdateInput, CardIconImageUncheckedUpdateInput>
  }

  /**
   * CardIconImage delete
   */
  export type CardIconImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardIconImage
     */
    select?: CardIconImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardIconImage
     */
    omit?: CardIconImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIconImageInclude<ExtArgs> | null
    /**
     * Filter which CardIconImage to delete.
     */
    where: CardIconImageWhereUniqueInput
  }

  /**
   * CardIconImage deleteMany
   */
  export type CardIconImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardIconImages to delete
     */
    where?: CardIconImageWhereInput
    /**
     * Limit how many CardIconImages to delete.
     */
    limit?: number
  }

  /**
   * CardIconImage without action
   */
  export type CardIconImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardIconImage
     */
    select?: CardIconImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardIconImage
     */
    omit?: CardIconImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIconImageInclude<ExtArgs> | null
  }


  /**
   * Model CardImage
   */

  export type AggregateCardImage = {
    _count: CardImageCountAggregateOutputType | null
    _avg: CardImageAvgAggregateOutputType | null
    _sum: CardImageSumAggregateOutputType | null
    _min: CardImageMinAggregateOutputType | null
    _max: CardImageMaxAggregateOutputType | null
  }

  export type CardImageAvgAggregateOutputType = {
    id: number | null
    card_id: number | null
  }

  export type CardImageSumAggregateOutputType = {
    id: number | null
    card_id: number | null
  }

  export type CardImageMinAggregateOutputType = {
    id: number | null
    card_id: number | null
    src: string | null
  }

  export type CardImageMaxAggregateOutputType = {
    id: number | null
    card_id: number | null
    src: string | null
  }

  export type CardImageCountAggregateOutputType = {
    id: number
    card_id: number
    src: number
    _all: number
  }


  export type CardImageAvgAggregateInputType = {
    id?: true
    card_id?: true
  }

  export type CardImageSumAggregateInputType = {
    id?: true
    card_id?: true
  }

  export type CardImageMinAggregateInputType = {
    id?: true
    card_id?: true
    src?: true
  }

  export type CardImageMaxAggregateInputType = {
    id?: true
    card_id?: true
    src?: true
  }

  export type CardImageCountAggregateInputType = {
    id?: true
    card_id?: true
    src?: true
    _all?: true
  }

  export type CardImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardImage to aggregate.
     */
    where?: CardImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardImages to fetch.
     */
    orderBy?: CardImageOrderByWithRelationInput | CardImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CardImages
    **/
    _count?: true | CardImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardImageMaxAggregateInputType
  }

  export type GetCardImageAggregateType<T extends CardImageAggregateArgs> = {
        [P in keyof T & keyof AggregateCardImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCardImage[P]>
      : GetScalarType<T[P], AggregateCardImage[P]>
  }




  export type CardImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardImageWhereInput
    orderBy?: CardImageOrderByWithAggregationInput | CardImageOrderByWithAggregationInput[]
    by: CardImageScalarFieldEnum[] | CardImageScalarFieldEnum
    having?: CardImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardImageCountAggregateInputType | true
    _avg?: CardImageAvgAggregateInputType
    _sum?: CardImageSumAggregateInputType
    _min?: CardImageMinAggregateInputType
    _max?: CardImageMaxAggregateInputType
  }

  export type CardImageGroupByOutputType = {
    id: number
    card_id: number
    src: string
    _count: CardImageCountAggregateOutputType | null
    _avg: CardImageAvgAggregateOutputType | null
    _sum: CardImageSumAggregateOutputType | null
    _min: CardImageMinAggregateOutputType | null
    _max: CardImageMaxAggregateOutputType | null
  }

  type GetCardImageGroupByPayload<T extends CardImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardImageGroupByOutputType[P]>
            : GetScalarType<T[P], CardImageGroupByOutputType[P]>
        }
      >
    >


  export type CardImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    card_id?: boolean
    src?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardImage"]>



  export type CardImageSelectScalar = {
    id?: boolean
    card_id?: boolean
    src?: boolean
  }

  export type CardImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "card_id" | "src", ExtArgs["result"]["cardImage"]>
  export type CardImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
  }

  export type $CardImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CardImage"
    objects: {
      card: Prisma.$CardPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      card_id: number
      src: string
    }, ExtArgs["result"]["cardImage"]>
    composites: {}
  }

  type CardImageGetPayload<S extends boolean | null | undefined | CardImageDefaultArgs> = $Result.GetResult<Prisma.$CardImagePayload, S>

  type CardImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CardImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CardImageCountAggregateInputType | true
    }

  export interface CardImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CardImage'], meta: { name: 'CardImage' } }
    /**
     * Find zero or one CardImage that matches the filter.
     * @param {CardImageFindUniqueArgs} args - Arguments to find a CardImage
     * @example
     * // Get one CardImage
     * const cardImage = await prisma.cardImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardImageFindUniqueArgs>(args: SelectSubset<T, CardImageFindUniqueArgs<ExtArgs>>): Prisma__CardImageClient<$Result.GetResult<Prisma.$CardImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CardImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CardImageFindUniqueOrThrowArgs} args - Arguments to find a CardImage
     * @example
     * // Get one CardImage
     * const cardImage = await prisma.cardImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardImageFindUniqueOrThrowArgs>(args: SelectSubset<T, CardImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardImageClient<$Result.GetResult<Prisma.$CardImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CardImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardImageFindFirstArgs} args - Arguments to find a CardImage
     * @example
     * // Get one CardImage
     * const cardImage = await prisma.cardImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardImageFindFirstArgs>(args?: SelectSubset<T, CardImageFindFirstArgs<ExtArgs>>): Prisma__CardImageClient<$Result.GetResult<Prisma.$CardImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CardImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardImageFindFirstOrThrowArgs} args - Arguments to find a CardImage
     * @example
     * // Get one CardImage
     * const cardImage = await prisma.cardImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardImageFindFirstOrThrowArgs>(args?: SelectSubset<T, CardImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardImageClient<$Result.GetResult<Prisma.$CardImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CardImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CardImages
     * const cardImages = await prisma.cardImage.findMany()
     * 
     * // Get first 10 CardImages
     * const cardImages = await prisma.cardImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardImageWithIdOnly = await prisma.cardImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CardImageFindManyArgs>(args?: SelectSubset<T, CardImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CardImage.
     * @param {CardImageCreateArgs} args - Arguments to create a CardImage.
     * @example
     * // Create one CardImage
     * const CardImage = await prisma.cardImage.create({
     *   data: {
     *     // ... data to create a CardImage
     *   }
     * })
     * 
     */
    create<T extends CardImageCreateArgs>(args: SelectSubset<T, CardImageCreateArgs<ExtArgs>>): Prisma__CardImageClient<$Result.GetResult<Prisma.$CardImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CardImages.
     * @param {CardImageCreateManyArgs} args - Arguments to create many CardImages.
     * @example
     * // Create many CardImages
     * const cardImage = await prisma.cardImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardImageCreateManyArgs>(args?: SelectSubset<T, CardImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CardImage.
     * @param {CardImageDeleteArgs} args - Arguments to delete one CardImage.
     * @example
     * // Delete one CardImage
     * const CardImage = await prisma.cardImage.delete({
     *   where: {
     *     // ... filter to delete one CardImage
     *   }
     * })
     * 
     */
    delete<T extends CardImageDeleteArgs>(args: SelectSubset<T, CardImageDeleteArgs<ExtArgs>>): Prisma__CardImageClient<$Result.GetResult<Prisma.$CardImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CardImage.
     * @param {CardImageUpdateArgs} args - Arguments to update one CardImage.
     * @example
     * // Update one CardImage
     * const cardImage = await prisma.cardImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardImageUpdateArgs>(args: SelectSubset<T, CardImageUpdateArgs<ExtArgs>>): Prisma__CardImageClient<$Result.GetResult<Prisma.$CardImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CardImages.
     * @param {CardImageDeleteManyArgs} args - Arguments to filter CardImages to delete.
     * @example
     * // Delete a few CardImages
     * const { count } = await prisma.cardImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardImageDeleteManyArgs>(args?: SelectSubset<T, CardImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CardImages
     * const cardImage = await prisma.cardImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardImageUpdateManyArgs>(args: SelectSubset<T, CardImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CardImage.
     * @param {CardImageUpsertArgs} args - Arguments to update or create a CardImage.
     * @example
     * // Update or create a CardImage
     * const cardImage = await prisma.cardImage.upsert({
     *   create: {
     *     // ... data to create a CardImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CardImage we want to update
     *   }
     * })
     */
    upsert<T extends CardImageUpsertArgs>(args: SelectSubset<T, CardImageUpsertArgs<ExtArgs>>): Prisma__CardImageClient<$Result.GetResult<Prisma.$CardImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CardImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardImageCountArgs} args - Arguments to filter CardImages to count.
     * @example
     * // Count the number of CardImages
     * const count = await prisma.cardImage.count({
     *   where: {
     *     // ... the filter for the CardImages we want to count
     *   }
     * })
    **/
    count<T extends CardImageCountArgs>(
      args?: Subset<T, CardImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CardImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardImageAggregateArgs>(args: Subset<T, CardImageAggregateArgs>): Prisma.PrismaPromise<GetCardImageAggregateType<T>>

    /**
     * Group by CardImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardImageGroupByArgs['orderBy'] }
        : { orderBy?: CardImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CardImage model
   */
  readonly fields: CardImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CardImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    card<T extends CardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardDefaultArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CardImage model
   */
  interface CardImageFieldRefs {
    readonly id: FieldRef<"CardImage", 'Int'>
    readonly card_id: FieldRef<"CardImage", 'Int'>
    readonly src: FieldRef<"CardImage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CardImage findUnique
   */
  export type CardImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardImage
     */
    select?: CardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardImage
     */
    omit?: CardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardImageInclude<ExtArgs> | null
    /**
     * Filter, which CardImage to fetch.
     */
    where: CardImageWhereUniqueInput
  }

  /**
   * CardImage findUniqueOrThrow
   */
  export type CardImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardImage
     */
    select?: CardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardImage
     */
    omit?: CardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardImageInclude<ExtArgs> | null
    /**
     * Filter, which CardImage to fetch.
     */
    where: CardImageWhereUniqueInput
  }

  /**
   * CardImage findFirst
   */
  export type CardImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardImage
     */
    select?: CardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardImage
     */
    omit?: CardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardImageInclude<ExtArgs> | null
    /**
     * Filter, which CardImage to fetch.
     */
    where?: CardImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardImages to fetch.
     */
    orderBy?: CardImageOrderByWithRelationInput | CardImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardImages.
     */
    cursor?: CardImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardImages.
     */
    distinct?: CardImageScalarFieldEnum | CardImageScalarFieldEnum[]
  }

  /**
   * CardImage findFirstOrThrow
   */
  export type CardImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardImage
     */
    select?: CardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardImage
     */
    omit?: CardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardImageInclude<ExtArgs> | null
    /**
     * Filter, which CardImage to fetch.
     */
    where?: CardImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardImages to fetch.
     */
    orderBy?: CardImageOrderByWithRelationInput | CardImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardImages.
     */
    cursor?: CardImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardImages.
     */
    distinct?: CardImageScalarFieldEnum | CardImageScalarFieldEnum[]
  }

  /**
   * CardImage findMany
   */
  export type CardImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardImage
     */
    select?: CardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardImage
     */
    omit?: CardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardImageInclude<ExtArgs> | null
    /**
     * Filter, which CardImages to fetch.
     */
    where?: CardImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardImages to fetch.
     */
    orderBy?: CardImageOrderByWithRelationInput | CardImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CardImages.
     */
    cursor?: CardImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardImages.
     */
    skip?: number
    distinct?: CardImageScalarFieldEnum | CardImageScalarFieldEnum[]
  }

  /**
   * CardImage create
   */
  export type CardImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardImage
     */
    select?: CardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardImage
     */
    omit?: CardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardImageInclude<ExtArgs> | null
    /**
     * The data needed to create a CardImage.
     */
    data: XOR<CardImageCreateInput, CardImageUncheckedCreateInput>
  }

  /**
   * CardImage createMany
   */
  export type CardImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CardImages.
     */
    data: CardImageCreateManyInput | CardImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CardImage update
   */
  export type CardImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardImage
     */
    select?: CardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardImage
     */
    omit?: CardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardImageInclude<ExtArgs> | null
    /**
     * The data needed to update a CardImage.
     */
    data: XOR<CardImageUpdateInput, CardImageUncheckedUpdateInput>
    /**
     * Choose, which CardImage to update.
     */
    where: CardImageWhereUniqueInput
  }

  /**
   * CardImage updateMany
   */
  export type CardImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CardImages.
     */
    data: XOR<CardImageUpdateManyMutationInput, CardImageUncheckedUpdateManyInput>
    /**
     * Filter which CardImages to update
     */
    where?: CardImageWhereInput
    /**
     * Limit how many CardImages to update.
     */
    limit?: number
  }

  /**
   * CardImage upsert
   */
  export type CardImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardImage
     */
    select?: CardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardImage
     */
    omit?: CardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardImageInclude<ExtArgs> | null
    /**
     * The filter to search for the CardImage to update in case it exists.
     */
    where: CardImageWhereUniqueInput
    /**
     * In case the CardImage found by the `where` argument doesn't exist, create a new CardImage with this data.
     */
    create: XOR<CardImageCreateInput, CardImageUncheckedCreateInput>
    /**
     * In case the CardImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardImageUpdateInput, CardImageUncheckedUpdateInput>
  }

  /**
   * CardImage delete
   */
  export type CardImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardImage
     */
    select?: CardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardImage
     */
    omit?: CardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardImageInclude<ExtArgs> | null
    /**
     * Filter which CardImage to delete.
     */
    where: CardImageWhereUniqueInput
  }

  /**
   * CardImage deleteMany
   */
  export type CardImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardImages to delete
     */
    where?: CardImageWhereInput
    /**
     * Limit how many CardImages to delete.
     */
    limit?: number
  }

  /**
   * CardImage without action
   */
  export type CardImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardImage
     */
    select?: CardImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardImage
     */
    omit?: CardImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardImageInclude<ExtArgs> | null
  }


  /**
   * Model Page
   */

  export type AggregatePage = {
    _count: PageCountAggregateOutputType | null
    _avg: PageAvgAggregateOutputType | null
    _sum: PageSumAggregateOutputType | null
    _min: PageMinAggregateOutputType | null
    _max: PageMaxAggregateOutputType | null
  }

  export type PageAvgAggregateOutputType = {
    id: number | null
  }

  export type PageSumAggregateOutputType = {
    id: number | null
  }

  export type PageMinAggregateOutputType = {
    id: number | null
    published: boolean | null
    label: string | null
    slug: string | null
    meta_title: string | null
    meta_description: string | null
    meta_keywords: string | null
    meta_noindex_nofollow: boolean | null
  }

  export type PageMaxAggregateOutputType = {
    id: number | null
    published: boolean | null
    label: string | null
    slug: string | null
    meta_title: string | null
    meta_description: string | null
    meta_keywords: string | null
    meta_noindex_nofollow: boolean | null
  }

  export type PageCountAggregateOutputType = {
    id: number
    published: number
    label: number
    slug: number
    meta_title: number
    meta_description: number
    meta_keywords: number
    meta_noindex_nofollow: number
    _all: number
  }


  export type PageAvgAggregateInputType = {
    id?: true
  }

  export type PageSumAggregateInputType = {
    id?: true
  }

  export type PageMinAggregateInputType = {
    id?: true
    published?: true
    label?: true
    slug?: true
    meta_title?: true
    meta_description?: true
    meta_keywords?: true
    meta_noindex_nofollow?: true
  }

  export type PageMaxAggregateInputType = {
    id?: true
    published?: true
    label?: true
    slug?: true
    meta_title?: true
    meta_description?: true
    meta_keywords?: true
    meta_noindex_nofollow?: true
  }

  export type PageCountAggregateInputType = {
    id?: true
    published?: true
    label?: true
    slug?: true
    meta_title?: true
    meta_description?: true
    meta_keywords?: true
    meta_noindex_nofollow?: true
    _all?: true
  }

  export type PageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Page to aggregate.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pages
    **/
    _count?: true | PageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PageMaxAggregateInputType
  }

  export type GetPageAggregateType<T extends PageAggregateArgs> = {
        [P in keyof T & keyof AggregatePage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePage[P]>
      : GetScalarType<T[P], AggregatePage[P]>
  }




  export type PageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageWhereInput
    orderBy?: PageOrderByWithAggregationInput | PageOrderByWithAggregationInput[]
    by: PageScalarFieldEnum[] | PageScalarFieldEnum
    having?: PageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PageCountAggregateInputType | true
    _avg?: PageAvgAggregateInputType
    _sum?: PageSumAggregateInputType
    _min?: PageMinAggregateInputType
    _max?: PageMaxAggregateInputType
  }

  export type PageGroupByOutputType = {
    id: number
    published: boolean
    label: string
    slug: string
    meta_title: string
    meta_description: string
    meta_keywords: string
    meta_noindex_nofollow: boolean
    _count: PageCountAggregateOutputType | null
    _avg: PageAvgAggregateOutputType | null
    _sum: PageSumAggregateOutputType | null
    _min: PageMinAggregateOutputType | null
    _max: PageMaxAggregateOutputType | null
  }

  type GetPageGroupByPayload<T extends PageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PageGroupByOutputType[P]>
            : GetScalarType<T[P], PageGroupByOutputType[P]>
        }
      >
    >


  export type PageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    published?: boolean
    label?: boolean
    slug?: boolean
    meta_title?: boolean
    meta_description?: boolean
    meta_keywords?: boolean
    meta_noindex_nofollow?: boolean
    builds?: boolean | Page$buildsArgs<ExtArgs>
    _count?: boolean | PageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["page"]>



  export type PageSelectScalar = {
    id?: boolean
    published?: boolean
    label?: boolean
    slug?: boolean
    meta_title?: boolean
    meta_description?: boolean
    meta_keywords?: boolean
    meta_noindex_nofollow?: boolean
  }

  export type PageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "published" | "label" | "slug" | "meta_title" | "meta_description" | "meta_keywords" | "meta_noindex_nofollow", ExtArgs["result"]["page"]>
  export type PageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    builds?: boolean | Page$buildsArgs<ExtArgs>
    _count?: boolean | PageCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Page"
    objects: {
      builds: Prisma.$BuildPagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      published: boolean
      label: string
      slug: string
      meta_title: string
      meta_description: string
      meta_keywords: string
      meta_noindex_nofollow: boolean
    }, ExtArgs["result"]["page"]>
    composites: {}
  }

  type PageGetPayload<S extends boolean | null | undefined | PageDefaultArgs> = $Result.GetResult<Prisma.$PagePayload, S>

  type PageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PageCountAggregateInputType | true
    }

  export interface PageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Page'], meta: { name: 'Page' } }
    /**
     * Find zero or one Page that matches the filter.
     * @param {PageFindUniqueArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PageFindUniqueArgs>(args: SelectSubset<T, PageFindUniqueArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Page that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PageFindUniqueOrThrowArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PageFindUniqueOrThrowArgs>(args: SelectSubset<T, PageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Page that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindFirstArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PageFindFirstArgs>(args?: SelectSubset<T, PageFindFirstArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Page that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindFirstOrThrowArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PageFindFirstOrThrowArgs>(args?: SelectSubset<T, PageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pages
     * const pages = await prisma.page.findMany()
     * 
     * // Get first 10 Pages
     * const pages = await prisma.page.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pageWithIdOnly = await prisma.page.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PageFindManyArgs>(args?: SelectSubset<T, PageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Page.
     * @param {PageCreateArgs} args - Arguments to create a Page.
     * @example
     * // Create one Page
     * const Page = await prisma.page.create({
     *   data: {
     *     // ... data to create a Page
     *   }
     * })
     * 
     */
    create<T extends PageCreateArgs>(args: SelectSubset<T, PageCreateArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pages.
     * @param {PageCreateManyArgs} args - Arguments to create many Pages.
     * @example
     * // Create many Pages
     * const page = await prisma.page.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PageCreateManyArgs>(args?: SelectSubset<T, PageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Page.
     * @param {PageDeleteArgs} args - Arguments to delete one Page.
     * @example
     * // Delete one Page
     * const Page = await prisma.page.delete({
     *   where: {
     *     // ... filter to delete one Page
     *   }
     * })
     * 
     */
    delete<T extends PageDeleteArgs>(args: SelectSubset<T, PageDeleteArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Page.
     * @param {PageUpdateArgs} args - Arguments to update one Page.
     * @example
     * // Update one Page
     * const page = await prisma.page.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PageUpdateArgs>(args: SelectSubset<T, PageUpdateArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pages.
     * @param {PageDeleteManyArgs} args - Arguments to filter Pages to delete.
     * @example
     * // Delete a few Pages
     * const { count } = await prisma.page.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PageDeleteManyArgs>(args?: SelectSubset<T, PageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pages
     * const page = await prisma.page.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PageUpdateManyArgs>(args: SelectSubset<T, PageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Page.
     * @param {PageUpsertArgs} args - Arguments to update or create a Page.
     * @example
     * // Update or create a Page
     * const page = await prisma.page.upsert({
     *   create: {
     *     // ... data to create a Page
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Page we want to update
     *   }
     * })
     */
    upsert<T extends PageUpsertArgs>(args: SelectSubset<T, PageUpsertArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageCountArgs} args - Arguments to filter Pages to count.
     * @example
     * // Count the number of Pages
     * const count = await prisma.page.count({
     *   where: {
     *     // ... the filter for the Pages we want to count
     *   }
     * })
    **/
    count<T extends PageCountArgs>(
      args?: Subset<T, PageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Page.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PageAggregateArgs>(args: Subset<T, PageAggregateArgs>): Prisma.PrismaPromise<GetPageAggregateType<T>>

    /**
     * Group by Page.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PageGroupByArgs['orderBy'] }
        : { orderBy?: PageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Page model
   */
  readonly fields: PageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Page.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    builds<T extends Page$buildsArgs<ExtArgs> = {}>(args?: Subset<T, Page$buildsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildPagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Page model
   */
  interface PageFieldRefs {
    readonly id: FieldRef<"Page", 'Int'>
    readonly published: FieldRef<"Page", 'Boolean'>
    readonly label: FieldRef<"Page", 'String'>
    readonly slug: FieldRef<"Page", 'String'>
    readonly meta_title: FieldRef<"Page", 'String'>
    readonly meta_description: FieldRef<"Page", 'String'>
    readonly meta_keywords: FieldRef<"Page", 'String'>
    readonly meta_noindex_nofollow: FieldRef<"Page", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Page findUnique
   */
  export type PageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page findUniqueOrThrow
   */
  export type PageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page findFirst
   */
  export type PageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pages.
     */
    distinct?: PageScalarFieldEnum | PageScalarFieldEnum[]
  }

  /**
   * Page findFirstOrThrow
   */
  export type PageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pages.
     */
    distinct?: PageScalarFieldEnum | PageScalarFieldEnum[]
  }

  /**
   * Page findMany
   */
  export type PageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Pages to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    distinct?: PageScalarFieldEnum | PageScalarFieldEnum[]
  }

  /**
   * Page create
   */
  export type PageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * The data needed to create a Page.
     */
    data: XOR<PageCreateInput, PageUncheckedCreateInput>
  }

  /**
   * Page createMany
   */
  export type PageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pages.
     */
    data: PageCreateManyInput | PageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Page update
   */
  export type PageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * The data needed to update a Page.
     */
    data: XOR<PageUpdateInput, PageUncheckedUpdateInput>
    /**
     * Choose, which Page to update.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page updateMany
   */
  export type PageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pages.
     */
    data: XOR<PageUpdateManyMutationInput, PageUncheckedUpdateManyInput>
    /**
     * Filter which Pages to update
     */
    where?: PageWhereInput
    /**
     * Limit how many Pages to update.
     */
    limit?: number
  }

  /**
   * Page upsert
   */
  export type PageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * The filter to search for the Page to update in case it exists.
     */
    where: PageWhereUniqueInput
    /**
     * In case the Page found by the `where` argument doesn't exist, create a new Page with this data.
     */
    create: XOR<PageCreateInput, PageUncheckedCreateInput>
    /**
     * In case the Page was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PageUpdateInput, PageUncheckedUpdateInput>
  }

  /**
   * Page delete
   */
  export type PageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter which Page to delete.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page deleteMany
   */
  export type PageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pages to delete
     */
    where?: PageWhereInput
    /**
     * Limit how many Pages to delete.
     */
    limit?: number
  }

  /**
   * Page.builds
   */
  export type Page$buildsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildPage
     */
    select?: BuildPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildPage
     */
    omit?: BuildPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildPageInclude<ExtArgs> | null
    where?: BuildPageWhereInput
    orderBy?: BuildPageOrderByWithRelationInput | BuildPageOrderByWithRelationInput[]
    cursor?: BuildPageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuildPageScalarFieldEnum | BuildPageScalarFieldEnum[]
  }

  /**
   * Page without action
   */
  export type PageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
  }


  /**
   * Model Builder
   */

  export type AggregateBuilder = {
    _count: BuilderCountAggregateOutputType | null
    _avg: BuilderAvgAggregateOutputType | null
    _sum: BuilderSumAggregateOutputType | null
    _min: BuilderMinAggregateOutputType | null
    _max: BuilderMaxAggregateOutputType | null
  }

  export type BuilderAvgAggregateOutputType = {
    id: number | null
  }

  export type BuilderSumAggregateOutputType = {
    id: number | null
  }

  export type BuilderMinAggregateOutputType = {
    id: number | null
    build_type: $Enums.BuildType | null
    label: string | null
  }

  export type BuilderMaxAggregateOutputType = {
    id: number | null
    build_type: $Enums.BuildType | null
    label: string | null
  }

  export type BuilderCountAggregateOutputType = {
    id: number
    build_type: number
    label: number
    _all: number
  }


  export type BuilderAvgAggregateInputType = {
    id?: true
  }

  export type BuilderSumAggregateInputType = {
    id?: true
  }

  export type BuilderMinAggregateInputType = {
    id?: true
    build_type?: true
    label?: true
  }

  export type BuilderMaxAggregateInputType = {
    id?: true
    build_type?: true
    label?: true
  }

  export type BuilderCountAggregateInputType = {
    id?: true
    build_type?: true
    label?: true
    _all?: true
  }

  export type BuilderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Builder to aggregate.
     */
    where?: BuilderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Builders to fetch.
     */
    orderBy?: BuilderOrderByWithRelationInput | BuilderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuilderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Builders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Builders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Builders
    **/
    _count?: true | BuilderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuilderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuilderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuilderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuilderMaxAggregateInputType
  }

  export type GetBuilderAggregateType<T extends BuilderAggregateArgs> = {
        [P in keyof T & keyof AggregateBuilder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuilder[P]>
      : GetScalarType<T[P], AggregateBuilder[P]>
  }




  export type BuilderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuilderWhereInput
    orderBy?: BuilderOrderByWithAggregationInput | BuilderOrderByWithAggregationInput[]
    by: BuilderScalarFieldEnum[] | BuilderScalarFieldEnum
    having?: BuilderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuilderCountAggregateInputType | true
    _avg?: BuilderAvgAggregateInputType
    _sum?: BuilderSumAggregateInputType
    _min?: BuilderMinAggregateInputType
    _max?: BuilderMaxAggregateInputType
  }

  export type BuilderGroupByOutputType = {
    id: number
    build_type: $Enums.BuildType
    label: string
    _count: BuilderCountAggregateOutputType | null
    _avg: BuilderAvgAggregateOutputType | null
    _sum: BuilderSumAggregateOutputType | null
    _min: BuilderMinAggregateOutputType | null
    _max: BuilderMaxAggregateOutputType | null
  }

  type GetBuilderGroupByPayload<T extends BuilderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuilderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuilderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuilderGroupByOutputType[P]>
            : GetScalarType<T[P], BuilderGroupByOutputType[P]>
        }
      >
    >


  export type BuilderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    build_type?: boolean
    label?: boolean
    pages?: boolean | Builder$pagesArgs<ExtArgs>
    _count?: boolean | BuilderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["builder"]>



  export type BuilderSelectScalar = {
    id?: boolean
    build_type?: boolean
    label?: boolean
  }

  export type BuilderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "build_type" | "label", ExtArgs["result"]["builder"]>
  export type BuilderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pages?: boolean | Builder$pagesArgs<ExtArgs>
    _count?: boolean | BuilderCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BuilderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Builder"
    objects: {
      pages: Prisma.$BuildPagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      build_type: $Enums.BuildType
      label: string
    }, ExtArgs["result"]["builder"]>
    composites: {}
  }

  type BuilderGetPayload<S extends boolean | null | undefined | BuilderDefaultArgs> = $Result.GetResult<Prisma.$BuilderPayload, S>

  type BuilderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuilderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuilderCountAggregateInputType | true
    }

  export interface BuilderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Builder'], meta: { name: 'Builder' } }
    /**
     * Find zero or one Builder that matches the filter.
     * @param {BuilderFindUniqueArgs} args - Arguments to find a Builder
     * @example
     * // Get one Builder
     * const builder = await prisma.builder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuilderFindUniqueArgs>(args: SelectSubset<T, BuilderFindUniqueArgs<ExtArgs>>): Prisma__BuilderClient<$Result.GetResult<Prisma.$BuilderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Builder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuilderFindUniqueOrThrowArgs} args - Arguments to find a Builder
     * @example
     * // Get one Builder
     * const builder = await prisma.builder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuilderFindUniqueOrThrowArgs>(args: SelectSubset<T, BuilderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuilderClient<$Result.GetResult<Prisma.$BuilderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Builder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuilderFindFirstArgs} args - Arguments to find a Builder
     * @example
     * // Get one Builder
     * const builder = await prisma.builder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuilderFindFirstArgs>(args?: SelectSubset<T, BuilderFindFirstArgs<ExtArgs>>): Prisma__BuilderClient<$Result.GetResult<Prisma.$BuilderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Builder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuilderFindFirstOrThrowArgs} args - Arguments to find a Builder
     * @example
     * // Get one Builder
     * const builder = await prisma.builder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuilderFindFirstOrThrowArgs>(args?: SelectSubset<T, BuilderFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuilderClient<$Result.GetResult<Prisma.$BuilderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Builders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuilderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Builders
     * const builders = await prisma.builder.findMany()
     * 
     * // Get first 10 Builders
     * const builders = await prisma.builder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const builderWithIdOnly = await prisma.builder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuilderFindManyArgs>(args?: SelectSubset<T, BuilderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuilderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Builder.
     * @param {BuilderCreateArgs} args - Arguments to create a Builder.
     * @example
     * // Create one Builder
     * const Builder = await prisma.builder.create({
     *   data: {
     *     // ... data to create a Builder
     *   }
     * })
     * 
     */
    create<T extends BuilderCreateArgs>(args: SelectSubset<T, BuilderCreateArgs<ExtArgs>>): Prisma__BuilderClient<$Result.GetResult<Prisma.$BuilderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Builders.
     * @param {BuilderCreateManyArgs} args - Arguments to create many Builders.
     * @example
     * // Create many Builders
     * const builder = await prisma.builder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuilderCreateManyArgs>(args?: SelectSubset<T, BuilderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Builder.
     * @param {BuilderDeleteArgs} args - Arguments to delete one Builder.
     * @example
     * // Delete one Builder
     * const Builder = await prisma.builder.delete({
     *   where: {
     *     // ... filter to delete one Builder
     *   }
     * })
     * 
     */
    delete<T extends BuilderDeleteArgs>(args: SelectSubset<T, BuilderDeleteArgs<ExtArgs>>): Prisma__BuilderClient<$Result.GetResult<Prisma.$BuilderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Builder.
     * @param {BuilderUpdateArgs} args - Arguments to update one Builder.
     * @example
     * // Update one Builder
     * const builder = await prisma.builder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuilderUpdateArgs>(args: SelectSubset<T, BuilderUpdateArgs<ExtArgs>>): Prisma__BuilderClient<$Result.GetResult<Prisma.$BuilderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Builders.
     * @param {BuilderDeleteManyArgs} args - Arguments to filter Builders to delete.
     * @example
     * // Delete a few Builders
     * const { count } = await prisma.builder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuilderDeleteManyArgs>(args?: SelectSubset<T, BuilderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Builders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuilderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Builders
     * const builder = await prisma.builder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuilderUpdateManyArgs>(args: SelectSubset<T, BuilderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Builder.
     * @param {BuilderUpsertArgs} args - Arguments to update or create a Builder.
     * @example
     * // Update or create a Builder
     * const builder = await prisma.builder.upsert({
     *   create: {
     *     // ... data to create a Builder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Builder we want to update
     *   }
     * })
     */
    upsert<T extends BuilderUpsertArgs>(args: SelectSubset<T, BuilderUpsertArgs<ExtArgs>>): Prisma__BuilderClient<$Result.GetResult<Prisma.$BuilderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Builders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuilderCountArgs} args - Arguments to filter Builders to count.
     * @example
     * // Count the number of Builders
     * const count = await prisma.builder.count({
     *   where: {
     *     // ... the filter for the Builders we want to count
     *   }
     * })
    **/
    count<T extends BuilderCountArgs>(
      args?: Subset<T, BuilderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuilderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Builder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuilderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuilderAggregateArgs>(args: Subset<T, BuilderAggregateArgs>): Prisma.PrismaPromise<GetBuilderAggregateType<T>>

    /**
     * Group by Builder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuilderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuilderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuilderGroupByArgs['orderBy'] }
        : { orderBy?: BuilderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuilderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuilderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Builder model
   */
  readonly fields: BuilderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Builder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuilderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pages<T extends Builder$pagesArgs<ExtArgs> = {}>(args?: Subset<T, Builder$pagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildPagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Builder model
   */
  interface BuilderFieldRefs {
    readonly id: FieldRef<"Builder", 'Int'>
    readonly build_type: FieldRef<"Builder", 'BuildType'>
    readonly label: FieldRef<"Builder", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Builder findUnique
   */
  export type BuilderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Builder
     */
    select?: BuilderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Builder
     */
    omit?: BuilderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuilderInclude<ExtArgs> | null
    /**
     * Filter, which Builder to fetch.
     */
    where: BuilderWhereUniqueInput
  }

  /**
   * Builder findUniqueOrThrow
   */
  export type BuilderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Builder
     */
    select?: BuilderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Builder
     */
    omit?: BuilderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuilderInclude<ExtArgs> | null
    /**
     * Filter, which Builder to fetch.
     */
    where: BuilderWhereUniqueInput
  }

  /**
   * Builder findFirst
   */
  export type BuilderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Builder
     */
    select?: BuilderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Builder
     */
    omit?: BuilderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuilderInclude<ExtArgs> | null
    /**
     * Filter, which Builder to fetch.
     */
    where?: BuilderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Builders to fetch.
     */
    orderBy?: BuilderOrderByWithRelationInput | BuilderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Builders.
     */
    cursor?: BuilderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Builders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Builders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Builders.
     */
    distinct?: BuilderScalarFieldEnum | BuilderScalarFieldEnum[]
  }

  /**
   * Builder findFirstOrThrow
   */
  export type BuilderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Builder
     */
    select?: BuilderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Builder
     */
    omit?: BuilderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuilderInclude<ExtArgs> | null
    /**
     * Filter, which Builder to fetch.
     */
    where?: BuilderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Builders to fetch.
     */
    orderBy?: BuilderOrderByWithRelationInput | BuilderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Builders.
     */
    cursor?: BuilderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Builders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Builders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Builders.
     */
    distinct?: BuilderScalarFieldEnum | BuilderScalarFieldEnum[]
  }

  /**
   * Builder findMany
   */
  export type BuilderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Builder
     */
    select?: BuilderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Builder
     */
    omit?: BuilderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuilderInclude<ExtArgs> | null
    /**
     * Filter, which Builders to fetch.
     */
    where?: BuilderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Builders to fetch.
     */
    orderBy?: BuilderOrderByWithRelationInput | BuilderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Builders.
     */
    cursor?: BuilderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Builders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Builders.
     */
    skip?: number
    distinct?: BuilderScalarFieldEnum | BuilderScalarFieldEnum[]
  }

  /**
   * Builder create
   */
  export type BuilderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Builder
     */
    select?: BuilderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Builder
     */
    omit?: BuilderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuilderInclude<ExtArgs> | null
    /**
     * The data needed to create a Builder.
     */
    data: XOR<BuilderCreateInput, BuilderUncheckedCreateInput>
  }

  /**
   * Builder createMany
   */
  export type BuilderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Builders.
     */
    data: BuilderCreateManyInput | BuilderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Builder update
   */
  export type BuilderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Builder
     */
    select?: BuilderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Builder
     */
    omit?: BuilderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuilderInclude<ExtArgs> | null
    /**
     * The data needed to update a Builder.
     */
    data: XOR<BuilderUpdateInput, BuilderUncheckedUpdateInput>
    /**
     * Choose, which Builder to update.
     */
    where: BuilderWhereUniqueInput
  }

  /**
   * Builder updateMany
   */
  export type BuilderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Builders.
     */
    data: XOR<BuilderUpdateManyMutationInput, BuilderUncheckedUpdateManyInput>
    /**
     * Filter which Builders to update
     */
    where?: BuilderWhereInput
    /**
     * Limit how many Builders to update.
     */
    limit?: number
  }

  /**
   * Builder upsert
   */
  export type BuilderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Builder
     */
    select?: BuilderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Builder
     */
    omit?: BuilderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuilderInclude<ExtArgs> | null
    /**
     * The filter to search for the Builder to update in case it exists.
     */
    where: BuilderWhereUniqueInput
    /**
     * In case the Builder found by the `where` argument doesn't exist, create a new Builder with this data.
     */
    create: XOR<BuilderCreateInput, BuilderUncheckedCreateInput>
    /**
     * In case the Builder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuilderUpdateInput, BuilderUncheckedUpdateInput>
  }

  /**
   * Builder delete
   */
  export type BuilderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Builder
     */
    select?: BuilderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Builder
     */
    omit?: BuilderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuilderInclude<ExtArgs> | null
    /**
     * Filter which Builder to delete.
     */
    where: BuilderWhereUniqueInput
  }

  /**
   * Builder deleteMany
   */
  export type BuilderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Builders to delete
     */
    where?: BuilderWhereInput
    /**
     * Limit how many Builders to delete.
     */
    limit?: number
  }

  /**
   * Builder.pages
   */
  export type Builder$pagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildPage
     */
    select?: BuildPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildPage
     */
    omit?: BuildPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildPageInclude<ExtArgs> | null
    where?: BuildPageWhereInput
    orderBy?: BuildPageOrderByWithRelationInput | BuildPageOrderByWithRelationInput[]
    cursor?: BuildPageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuildPageScalarFieldEnum | BuildPageScalarFieldEnum[]
  }

  /**
   * Builder without action
   */
  export type BuilderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Builder
     */
    select?: BuilderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Builder
     */
    omit?: BuilderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuilderInclude<ExtArgs> | null
  }


  /**
   * Model BuildPage
   */

  export type AggregateBuildPage = {
    _count: BuildPageCountAggregateOutputType | null
    _avg: BuildPageAvgAggregateOutputType | null
    _sum: BuildPageSumAggregateOutputType | null
    _min: BuildPageMinAggregateOutputType | null
    _max: BuildPageMaxAggregateOutputType | null
  }

  export type BuildPageAvgAggregateOutputType = {
    id: number | null
    build_id: number | null
    page_id: number | null
    position: number | null
  }

  export type BuildPageSumAggregateOutputType = {
    id: number | null
    build_id: number | null
    page_id: number | null
    position: number | null
  }

  export type BuildPageMinAggregateOutputType = {
    id: number | null
    build_id: number | null
    page_id: number | null
    position: number | null
    field_values: string | null
    card_type: string | null
  }

  export type BuildPageMaxAggregateOutputType = {
    id: number | null
    build_id: number | null
    page_id: number | null
    position: number | null
    field_values: string | null
    card_type: string | null
  }

  export type BuildPageCountAggregateOutputType = {
    id: number
    build_id: number
    page_id: number
    position: number
    field_values: number
    card_type: number
    _all: number
  }


  export type BuildPageAvgAggregateInputType = {
    id?: true
    build_id?: true
    page_id?: true
    position?: true
  }

  export type BuildPageSumAggregateInputType = {
    id?: true
    build_id?: true
    page_id?: true
    position?: true
  }

  export type BuildPageMinAggregateInputType = {
    id?: true
    build_id?: true
    page_id?: true
    position?: true
    field_values?: true
    card_type?: true
  }

  export type BuildPageMaxAggregateInputType = {
    id?: true
    build_id?: true
    page_id?: true
    position?: true
    field_values?: true
    card_type?: true
  }

  export type BuildPageCountAggregateInputType = {
    id?: true
    build_id?: true
    page_id?: true
    position?: true
    field_values?: true
    card_type?: true
    _all?: true
  }

  export type BuildPageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuildPage to aggregate.
     */
    where?: BuildPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildPages to fetch.
     */
    orderBy?: BuildPageOrderByWithRelationInput | BuildPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuildPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BuildPages
    **/
    _count?: true | BuildPageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuildPageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuildPageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuildPageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuildPageMaxAggregateInputType
  }

  export type GetBuildPageAggregateType<T extends BuildPageAggregateArgs> = {
        [P in keyof T & keyof AggregateBuildPage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuildPage[P]>
      : GetScalarType<T[P], AggregateBuildPage[P]>
  }




  export type BuildPageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildPageWhereInput
    orderBy?: BuildPageOrderByWithAggregationInput | BuildPageOrderByWithAggregationInput[]
    by: BuildPageScalarFieldEnum[] | BuildPageScalarFieldEnum
    having?: BuildPageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuildPageCountAggregateInputType | true
    _avg?: BuildPageAvgAggregateInputType
    _sum?: BuildPageSumAggregateInputType
    _min?: BuildPageMinAggregateInputType
    _max?: BuildPageMaxAggregateInputType
  }

  export type BuildPageGroupByOutputType = {
    id: number
    build_id: number
    page_id: number
    position: number
    field_values: string
    card_type: string | null
    _count: BuildPageCountAggregateOutputType | null
    _avg: BuildPageAvgAggregateOutputType | null
    _sum: BuildPageSumAggregateOutputType | null
    _min: BuildPageMinAggregateOutputType | null
    _max: BuildPageMaxAggregateOutputType | null
  }

  type GetBuildPageGroupByPayload<T extends BuildPageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuildPageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuildPageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuildPageGroupByOutputType[P]>
            : GetScalarType<T[P], BuildPageGroupByOutputType[P]>
        }
      >
    >


  export type BuildPageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    build_id?: boolean
    page_id?: boolean
    position?: boolean
    field_values?: boolean
    card_type?: boolean
    build?: boolean | BuilderDefaultArgs<ExtArgs>
    page?: boolean | PageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buildPage"]>



  export type BuildPageSelectScalar = {
    id?: boolean
    build_id?: boolean
    page_id?: boolean
    position?: boolean
    field_values?: boolean
    card_type?: boolean
  }

  export type BuildPageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "build_id" | "page_id" | "position" | "field_values" | "card_type", ExtArgs["result"]["buildPage"]>
  export type BuildPageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    build?: boolean | BuilderDefaultArgs<ExtArgs>
    page?: boolean | PageDefaultArgs<ExtArgs>
  }

  export type $BuildPagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BuildPage"
    objects: {
      build: Prisma.$BuilderPayload<ExtArgs>
      page: Prisma.$PagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      build_id: number
      page_id: number
      position: number
      field_values: string
      card_type: string | null
    }, ExtArgs["result"]["buildPage"]>
    composites: {}
  }

  type BuildPageGetPayload<S extends boolean | null | undefined | BuildPageDefaultArgs> = $Result.GetResult<Prisma.$BuildPagePayload, S>

  type BuildPageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuildPageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuildPageCountAggregateInputType | true
    }

  export interface BuildPageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BuildPage'], meta: { name: 'BuildPage' } }
    /**
     * Find zero or one BuildPage that matches the filter.
     * @param {BuildPageFindUniqueArgs} args - Arguments to find a BuildPage
     * @example
     * // Get one BuildPage
     * const buildPage = await prisma.buildPage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuildPageFindUniqueArgs>(args: SelectSubset<T, BuildPageFindUniqueArgs<ExtArgs>>): Prisma__BuildPageClient<$Result.GetResult<Prisma.$BuildPagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BuildPage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuildPageFindUniqueOrThrowArgs} args - Arguments to find a BuildPage
     * @example
     * // Get one BuildPage
     * const buildPage = await prisma.buildPage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuildPageFindUniqueOrThrowArgs>(args: SelectSubset<T, BuildPageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuildPageClient<$Result.GetResult<Prisma.$BuildPagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuildPage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildPageFindFirstArgs} args - Arguments to find a BuildPage
     * @example
     * // Get one BuildPage
     * const buildPage = await prisma.buildPage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuildPageFindFirstArgs>(args?: SelectSubset<T, BuildPageFindFirstArgs<ExtArgs>>): Prisma__BuildPageClient<$Result.GetResult<Prisma.$BuildPagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuildPage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildPageFindFirstOrThrowArgs} args - Arguments to find a BuildPage
     * @example
     * // Get one BuildPage
     * const buildPage = await prisma.buildPage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuildPageFindFirstOrThrowArgs>(args?: SelectSubset<T, BuildPageFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuildPageClient<$Result.GetResult<Prisma.$BuildPagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BuildPages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildPageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BuildPages
     * const buildPages = await prisma.buildPage.findMany()
     * 
     * // Get first 10 BuildPages
     * const buildPages = await prisma.buildPage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buildPageWithIdOnly = await prisma.buildPage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuildPageFindManyArgs>(args?: SelectSubset<T, BuildPageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildPagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BuildPage.
     * @param {BuildPageCreateArgs} args - Arguments to create a BuildPage.
     * @example
     * // Create one BuildPage
     * const BuildPage = await prisma.buildPage.create({
     *   data: {
     *     // ... data to create a BuildPage
     *   }
     * })
     * 
     */
    create<T extends BuildPageCreateArgs>(args: SelectSubset<T, BuildPageCreateArgs<ExtArgs>>): Prisma__BuildPageClient<$Result.GetResult<Prisma.$BuildPagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BuildPages.
     * @param {BuildPageCreateManyArgs} args - Arguments to create many BuildPages.
     * @example
     * // Create many BuildPages
     * const buildPage = await prisma.buildPage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuildPageCreateManyArgs>(args?: SelectSubset<T, BuildPageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BuildPage.
     * @param {BuildPageDeleteArgs} args - Arguments to delete one BuildPage.
     * @example
     * // Delete one BuildPage
     * const BuildPage = await prisma.buildPage.delete({
     *   where: {
     *     // ... filter to delete one BuildPage
     *   }
     * })
     * 
     */
    delete<T extends BuildPageDeleteArgs>(args: SelectSubset<T, BuildPageDeleteArgs<ExtArgs>>): Prisma__BuildPageClient<$Result.GetResult<Prisma.$BuildPagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BuildPage.
     * @param {BuildPageUpdateArgs} args - Arguments to update one BuildPage.
     * @example
     * // Update one BuildPage
     * const buildPage = await prisma.buildPage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuildPageUpdateArgs>(args: SelectSubset<T, BuildPageUpdateArgs<ExtArgs>>): Prisma__BuildPageClient<$Result.GetResult<Prisma.$BuildPagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BuildPages.
     * @param {BuildPageDeleteManyArgs} args - Arguments to filter BuildPages to delete.
     * @example
     * // Delete a few BuildPages
     * const { count } = await prisma.buildPage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuildPageDeleteManyArgs>(args?: SelectSubset<T, BuildPageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BuildPages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildPageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BuildPages
     * const buildPage = await prisma.buildPage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuildPageUpdateManyArgs>(args: SelectSubset<T, BuildPageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BuildPage.
     * @param {BuildPageUpsertArgs} args - Arguments to update or create a BuildPage.
     * @example
     * // Update or create a BuildPage
     * const buildPage = await prisma.buildPage.upsert({
     *   create: {
     *     // ... data to create a BuildPage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BuildPage we want to update
     *   }
     * })
     */
    upsert<T extends BuildPageUpsertArgs>(args: SelectSubset<T, BuildPageUpsertArgs<ExtArgs>>): Prisma__BuildPageClient<$Result.GetResult<Prisma.$BuildPagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BuildPages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildPageCountArgs} args - Arguments to filter BuildPages to count.
     * @example
     * // Count the number of BuildPages
     * const count = await prisma.buildPage.count({
     *   where: {
     *     // ... the filter for the BuildPages we want to count
     *   }
     * })
    **/
    count<T extends BuildPageCountArgs>(
      args?: Subset<T, BuildPageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuildPageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BuildPage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildPageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuildPageAggregateArgs>(args: Subset<T, BuildPageAggregateArgs>): Prisma.PrismaPromise<GetBuildPageAggregateType<T>>

    /**
     * Group by BuildPage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildPageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuildPageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuildPageGroupByArgs['orderBy'] }
        : { orderBy?: BuildPageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuildPageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuildPageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BuildPage model
   */
  readonly fields: BuildPageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BuildPage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuildPageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    build<T extends BuilderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BuilderDefaultArgs<ExtArgs>>): Prisma__BuilderClient<$Result.GetResult<Prisma.$BuilderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    page<T extends PageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PageDefaultArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BuildPage model
   */
  interface BuildPageFieldRefs {
    readonly id: FieldRef<"BuildPage", 'Int'>
    readonly build_id: FieldRef<"BuildPage", 'Int'>
    readonly page_id: FieldRef<"BuildPage", 'Int'>
    readonly position: FieldRef<"BuildPage", 'Int'>
    readonly field_values: FieldRef<"BuildPage", 'String'>
    readonly card_type: FieldRef<"BuildPage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BuildPage findUnique
   */
  export type BuildPageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildPage
     */
    select?: BuildPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildPage
     */
    omit?: BuildPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildPageInclude<ExtArgs> | null
    /**
     * Filter, which BuildPage to fetch.
     */
    where: BuildPageWhereUniqueInput
  }

  /**
   * BuildPage findUniqueOrThrow
   */
  export type BuildPageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildPage
     */
    select?: BuildPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildPage
     */
    omit?: BuildPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildPageInclude<ExtArgs> | null
    /**
     * Filter, which BuildPage to fetch.
     */
    where: BuildPageWhereUniqueInput
  }

  /**
   * BuildPage findFirst
   */
  export type BuildPageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildPage
     */
    select?: BuildPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildPage
     */
    omit?: BuildPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildPageInclude<ExtArgs> | null
    /**
     * Filter, which BuildPage to fetch.
     */
    where?: BuildPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildPages to fetch.
     */
    orderBy?: BuildPageOrderByWithRelationInput | BuildPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuildPages.
     */
    cursor?: BuildPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuildPages.
     */
    distinct?: BuildPageScalarFieldEnum | BuildPageScalarFieldEnum[]
  }

  /**
   * BuildPage findFirstOrThrow
   */
  export type BuildPageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildPage
     */
    select?: BuildPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildPage
     */
    omit?: BuildPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildPageInclude<ExtArgs> | null
    /**
     * Filter, which BuildPage to fetch.
     */
    where?: BuildPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildPages to fetch.
     */
    orderBy?: BuildPageOrderByWithRelationInput | BuildPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuildPages.
     */
    cursor?: BuildPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuildPages.
     */
    distinct?: BuildPageScalarFieldEnum | BuildPageScalarFieldEnum[]
  }

  /**
   * BuildPage findMany
   */
  export type BuildPageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildPage
     */
    select?: BuildPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildPage
     */
    omit?: BuildPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildPageInclude<ExtArgs> | null
    /**
     * Filter, which BuildPages to fetch.
     */
    where?: BuildPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuildPages to fetch.
     */
    orderBy?: BuildPageOrderByWithRelationInput | BuildPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BuildPages.
     */
    cursor?: BuildPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuildPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuildPages.
     */
    skip?: number
    distinct?: BuildPageScalarFieldEnum | BuildPageScalarFieldEnum[]
  }

  /**
   * BuildPage create
   */
  export type BuildPageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildPage
     */
    select?: BuildPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildPage
     */
    omit?: BuildPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildPageInclude<ExtArgs> | null
    /**
     * The data needed to create a BuildPage.
     */
    data: XOR<BuildPageCreateInput, BuildPageUncheckedCreateInput>
  }

  /**
   * BuildPage createMany
   */
  export type BuildPageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BuildPages.
     */
    data: BuildPageCreateManyInput | BuildPageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BuildPage update
   */
  export type BuildPageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildPage
     */
    select?: BuildPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildPage
     */
    omit?: BuildPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildPageInclude<ExtArgs> | null
    /**
     * The data needed to update a BuildPage.
     */
    data: XOR<BuildPageUpdateInput, BuildPageUncheckedUpdateInput>
    /**
     * Choose, which BuildPage to update.
     */
    where: BuildPageWhereUniqueInput
  }

  /**
   * BuildPage updateMany
   */
  export type BuildPageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BuildPages.
     */
    data: XOR<BuildPageUpdateManyMutationInput, BuildPageUncheckedUpdateManyInput>
    /**
     * Filter which BuildPages to update
     */
    where?: BuildPageWhereInput
    /**
     * Limit how many BuildPages to update.
     */
    limit?: number
  }

  /**
   * BuildPage upsert
   */
  export type BuildPageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildPage
     */
    select?: BuildPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildPage
     */
    omit?: BuildPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildPageInclude<ExtArgs> | null
    /**
     * The filter to search for the BuildPage to update in case it exists.
     */
    where: BuildPageWhereUniqueInput
    /**
     * In case the BuildPage found by the `where` argument doesn't exist, create a new BuildPage with this data.
     */
    create: XOR<BuildPageCreateInput, BuildPageUncheckedCreateInput>
    /**
     * In case the BuildPage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuildPageUpdateInput, BuildPageUncheckedUpdateInput>
  }

  /**
   * BuildPage delete
   */
  export type BuildPageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildPage
     */
    select?: BuildPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildPage
     */
    omit?: BuildPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildPageInclude<ExtArgs> | null
    /**
     * Filter which BuildPage to delete.
     */
    where: BuildPageWhereUniqueInput
  }

  /**
   * BuildPage deleteMany
   */
  export type BuildPageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuildPages to delete
     */
    where?: BuildPageWhereInput
    /**
     * Limit how many BuildPages to delete.
     */
    limit?: number
  }

  /**
   * BuildPage without action
   */
  export type BuildPageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildPage
     */
    select?: BuildPageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuildPage
     */
    omit?: BuildPageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildPageInclude<ExtArgs> | null
  }


  /**
   * Model Casino
   */

  export type AggregateCasino = {
    _count: CasinoCountAggregateOutputType | null
    _avg: CasinoAvgAggregateOutputType | null
    _sum: CasinoSumAggregateOutputType | null
    _min: CasinoMinAggregateOutputType | null
    _max: CasinoMaxAggregateOutputType | null
  }

  export type CasinoAvgAggregateOutputType = {
    id: number | null
  }

  export type CasinoSumAggregateOutputType = {
    id: number | null
  }

  export type CasinoMinAggregateOutputType = {
    id: number | null
    published: boolean | null
    name: string | null
    tooltip: string | null
    image: string | null
    referral_key: string | null
    referral_link: string | null
    full_review_label: string | null
    full_review_link: string | null
  }

  export type CasinoMaxAggregateOutputType = {
    id: number | null
    published: boolean | null
    name: string | null
    tooltip: string | null
    image: string | null
    referral_key: string | null
    referral_link: string | null
    full_review_label: string | null
    full_review_link: string | null
  }

  export type CasinoCountAggregateOutputType = {
    id: number
    published: number
    name: number
    tooltip: number
    image: number
    referral_key: number
    referral_link: number
    full_review_label: number
    full_review_link: number
    _all: number
  }


  export type CasinoAvgAggregateInputType = {
    id?: true
  }

  export type CasinoSumAggregateInputType = {
    id?: true
  }

  export type CasinoMinAggregateInputType = {
    id?: true
    published?: true
    name?: true
    tooltip?: true
    image?: true
    referral_key?: true
    referral_link?: true
    full_review_label?: true
    full_review_link?: true
  }

  export type CasinoMaxAggregateInputType = {
    id?: true
    published?: true
    name?: true
    tooltip?: true
    image?: true
    referral_key?: true
    referral_link?: true
    full_review_label?: true
    full_review_link?: true
  }

  export type CasinoCountAggregateInputType = {
    id?: true
    published?: true
    name?: true
    tooltip?: true
    image?: true
    referral_key?: true
    referral_link?: true
    full_review_label?: true
    full_review_link?: true
    _all?: true
  }

  export type CasinoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Casino to aggregate.
     */
    where?: CasinoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Casinos to fetch.
     */
    orderBy?: CasinoOrderByWithRelationInput | CasinoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CasinoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Casinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Casinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Casinos
    **/
    _count?: true | CasinoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CasinoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CasinoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CasinoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CasinoMaxAggregateInputType
  }

  export type GetCasinoAggregateType<T extends CasinoAggregateArgs> = {
        [P in keyof T & keyof AggregateCasino]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCasino[P]>
      : GetScalarType<T[P], AggregateCasino[P]>
  }




  export type CasinoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CasinoWhereInput
    orderBy?: CasinoOrderByWithAggregationInput | CasinoOrderByWithAggregationInput[]
    by: CasinoScalarFieldEnum[] | CasinoScalarFieldEnum
    having?: CasinoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CasinoCountAggregateInputType | true
    _avg?: CasinoAvgAggregateInputType
    _sum?: CasinoSumAggregateInputType
    _min?: CasinoMinAggregateInputType
    _max?: CasinoMaxAggregateInputType
  }

  export type CasinoGroupByOutputType = {
    id: number
    published: boolean
    name: string
    tooltip: string | null
    image: string
    referral_key: string
    referral_link: string | null
    full_review_label: string | null
    full_review_link: string | null
    _count: CasinoCountAggregateOutputType | null
    _avg: CasinoAvgAggregateOutputType | null
    _sum: CasinoSumAggregateOutputType | null
    _min: CasinoMinAggregateOutputType | null
    _max: CasinoMaxAggregateOutputType | null
  }

  type GetCasinoGroupByPayload<T extends CasinoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CasinoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CasinoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CasinoGroupByOutputType[P]>
            : GetScalarType<T[P], CasinoGroupByOutputType[P]>
        }
      >
    >


  export type CasinoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    published?: boolean
    name?: boolean
    tooltip?: boolean
    image?: boolean
    referral_key?: boolean
    referral_link?: boolean
    full_review_label?: boolean
    full_review_link?: boolean
    options?: boolean | Casino$optionsArgs<ExtArgs>
    _count?: boolean | CasinoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["casino"]>



  export type CasinoSelectScalar = {
    id?: boolean
    published?: boolean
    name?: boolean
    tooltip?: boolean
    image?: boolean
    referral_key?: boolean
    referral_link?: boolean
    full_review_label?: boolean
    full_review_link?: boolean
  }

  export type CasinoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "published" | "name" | "tooltip" | "image" | "referral_key" | "referral_link" | "full_review_label" | "full_review_link", ExtArgs["result"]["casino"]>
  export type CasinoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | Casino$optionsArgs<ExtArgs>
    _count?: boolean | CasinoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CasinoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Casino"
    objects: {
      options: Prisma.$CasinoOptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      published: boolean
      name: string
      tooltip: string | null
      image: string
      referral_key: string
      referral_link: string | null
      full_review_label: string | null
      full_review_link: string | null
    }, ExtArgs["result"]["casino"]>
    composites: {}
  }

  type CasinoGetPayload<S extends boolean | null | undefined | CasinoDefaultArgs> = $Result.GetResult<Prisma.$CasinoPayload, S>

  type CasinoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CasinoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CasinoCountAggregateInputType | true
    }

  export interface CasinoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Casino'], meta: { name: 'Casino' } }
    /**
     * Find zero or one Casino that matches the filter.
     * @param {CasinoFindUniqueArgs} args - Arguments to find a Casino
     * @example
     * // Get one Casino
     * const casino = await prisma.casino.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CasinoFindUniqueArgs>(args: SelectSubset<T, CasinoFindUniqueArgs<ExtArgs>>): Prisma__CasinoClient<$Result.GetResult<Prisma.$CasinoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Casino that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CasinoFindUniqueOrThrowArgs} args - Arguments to find a Casino
     * @example
     * // Get one Casino
     * const casino = await prisma.casino.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CasinoFindUniqueOrThrowArgs>(args: SelectSubset<T, CasinoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CasinoClient<$Result.GetResult<Prisma.$CasinoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Casino that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoFindFirstArgs} args - Arguments to find a Casino
     * @example
     * // Get one Casino
     * const casino = await prisma.casino.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CasinoFindFirstArgs>(args?: SelectSubset<T, CasinoFindFirstArgs<ExtArgs>>): Prisma__CasinoClient<$Result.GetResult<Prisma.$CasinoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Casino that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoFindFirstOrThrowArgs} args - Arguments to find a Casino
     * @example
     * // Get one Casino
     * const casino = await prisma.casino.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CasinoFindFirstOrThrowArgs>(args?: SelectSubset<T, CasinoFindFirstOrThrowArgs<ExtArgs>>): Prisma__CasinoClient<$Result.GetResult<Prisma.$CasinoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Casinos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Casinos
     * const casinos = await prisma.casino.findMany()
     * 
     * // Get first 10 Casinos
     * const casinos = await prisma.casino.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const casinoWithIdOnly = await prisma.casino.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CasinoFindManyArgs>(args?: SelectSubset<T, CasinoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasinoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Casino.
     * @param {CasinoCreateArgs} args - Arguments to create a Casino.
     * @example
     * // Create one Casino
     * const Casino = await prisma.casino.create({
     *   data: {
     *     // ... data to create a Casino
     *   }
     * })
     * 
     */
    create<T extends CasinoCreateArgs>(args: SelectSubset<T, CasinoCreateArgs<ExtArgs>>): Prisma__CasinoClient<$Result.GetResult<Prisma.$CasinoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Casinos.
     * @param {CasinoCreateManyArgs} args - Arguments to create many Casinos.
     * @example
     * // Create many Casinos
     * const casino = await prisma.casino.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CasinoCreateManyArgs>(args?: SelectSubset<T, CasinoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Casino.
     * @param {CasinoDeleteArgs} args - Arguments to delete one Casino.
     * @example
     * // Delete one Casino
     * const Casino = await prisma.casino.delete({
     *   where: {
     *     // ... filter to delete one Casino
     *   }
     * })
     * 
     */
    delete<T extends CasinoDeleteArgs>(args: SelectSubset<T, CasinoDeleteArgs<ExtArgs>>): Prisma__CasinoClient<$Result.GetResult<Prisma.$CasinoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Casino.
     * @param {CasinoUpdateArgs} args - Arguments to update one Casino.
     * @example
     * // Update one Casino
     * const casino = await prisma.casino.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CasinoUpdateArgs>(args: SelectSubset<T, CasinoUpdateArgs<ExtArgs>>): Prisma__CasinoClient<$Result.GetResult<Prisma.$CasinoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Casinos.
     * @param {CasinoDeleteManyArgs} args - Arguments to filter Casinos to delete.
     * @example
     * // Delete a few Casinos
     * const { count } = await prisma.casino.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CasinoDeleteManyArgs>(args?: SelectSubset<T, CasinoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Casinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Casinos
     * const casino = await prisma.casino.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CasinoUpdateManyArgs>(args: SelectSubset<T, CasinoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Casino.
     * @param {CasinoUpsertArgs} args - Arguments to update or create a Casino.
     * @example
     * // Update or create a Casino
     * const casino = await prisma.casino.upsert({
     *   create: {
     *     // ... data to create a Casino
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Casino we want to update
     *   }
     * })
     */
    upsert<T extends CasinoUpsertArgs>(args: SelectSubset<T, CasinoUpsertArgs<ExtArgs>>): Prisma__CasinoClient<$Result.GetResult<Prisma.$CasinoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Casinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoCountArgs} args - Arguments to filter Casinos to count.
     * @example
     * // Count the number of Casinos
     * const count = await prisma.casino.count({
     *   where: {
     *     // ... the filter for the Casinos we want to count
     *   }
     * })
    **/
    count<T extends CasinoCountArgs>(
      args?: Subset<T, CasinoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CasinoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Casino.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CasinoAggregateArgs>(args: Subset<T, CasinoAggregateArgs>): Prisma.PrismaPromise<GetCasinoAggregateType<T>>

    /**
     * Group by Casino.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CasinoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CasinoGroupByArgs['orderBy'] }
        : { orderBy?: CasinoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CasinoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCasinoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Casino model
   */
  readonly fields: CasinoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Casino.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CasinoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    options<T extends Casino$optionsArgs<ExtArgs> = {}>(args?: Subset<T, Casino$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasinoOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Casino model
   */
  interface CasinoFieldRefs {
    readonly id: FieldRef<"Casino", 'Int'>
    readonly published: FieldRef<"Casino", 'Boolean'>
    readonly name: FieldRef<"Casino", 'String'>
    readonly tooltip: FieldRef<"Casino", 'String'>
    readonly image: FieldRef<"Casino", 'String'>
    readonly referral_key: FieldRef<"Casino", 'String'>
    readonly referral_link: FieldRef<"Casino", 'String'>
    readonly full_review_label: FieldRef<"Casino", 'String'>
    readonly full_review_link: FieldRef<"Casino", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Casino findUnique
   */
  export type CasinoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Casino
     */
    select?: CasinoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Casino
     */
    omit?: CasinoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoInclude<ExtArgs> | null
    /**
     * Filter, which Casino to fetch.
     */
    where: CasinoWhereUniqueInput
  }

  /**
   * Casino findUniqueOrThrow
   */
  export type CasinoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Casino
     */
    select?: CasinoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Casino
     */
    omit?: CasinoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoInclude<ExtArgs> | null
    /**
     * Filter, which Casino to fetch.
     */
    where: CasinoWhereUniqueInput
  }

  /**
   * Casino findFirst
   */
  export type CasinoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Casino
     */
    select?: CasinoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Casino
     */
    omit?: CasinoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoInclude<ExtArgs> | null
    /**
     * Filter, which Casino to fetch.
     */
    where?: CasinoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Casinos to fetch.
     */
    orderBy?: CasinoOrderByWithRelationInput | CasinoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Casinos.
     */
    cursor?: CasinoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Casinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Casinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Casinos.
     */
    distinct?: CasinoScalarFieldEnum | CasinoScalarFieldEnum[]
  }

  /**
   * Casino findFirstOrThrow
   */
  export type CasinoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Casino
     */
    select?: CasinoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Casino
     */
    omit?: CasinoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoInclude<ExtArgs> | null
    /**
     * Filter, which Casino to fetch.
     */
    where?: CasinoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Casinos to fetch.
     */
    orderBy?: CasinoOrderByWithRelationInput | CasinoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Casinos.
     */
    cursor?: CasinoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Casinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Casinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Casinos.
     */
    distinct?: CasinoScalarFieldEnum | CasinoScalarFieldEnum[]
  }

  /**
   * Casino findMany
   */
  export type CasinoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Casino
     */
    select?: CasinoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Casino
     */
    omit?: CasinoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoInclude<ExtArgs> | null
    /**
     * Filter, which Casinos to fetch.
     */
    where?: CasinoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Casinos to fetch.
     */
    orderBy?: CasinoOrderByWithRelationInput | CasinoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Casinos.
     */
    cursor?: CasinoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Casinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Casinos.
     */
    skip?: number
    distinct?: CasinoScalarFieldEnum | CasinoScalarFieldEnum[]
  }

  /**
   * Casino create
   */
  export type CasinoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Casino
     */
    select?: CasinoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Casino
     */
    omit?: CasinoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoInclude<ExtArgs> | null
    /**
     * The data needed to create a Casino.
     */
    data: XOR<CasinoCreateInput, CasinoUncheckedCreateInput>
  }

  /**
   * Casino createMany
   */
  export type CasinoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Casinos.
     */
    data: CasinoCreateManyInput | CasinoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Casino update
   */
  export type CasinoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Casino
     */
    select?: CasinoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Casino
     */
    omit?: CasinoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoInclude<ExtArgs> | null
    /**
     * The data needed to update a Casino.
     */
    data: XOR<CasinoUpdateInput, CasinoUncheckedUpdateInput>
    /**
     * Choose, which Casino to update.
     */
    where: CasinoWhereUniqueInput
  }

  /**
   * Casino updateMany
   */
  export type CasinoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Casinos.
     */
    data: XOR<CasinoUpdateManyMutationInput, CasinoUncheckedUpdateManyInput>
    /**
     * Filter which Casinos to update
     */
    where?: CasinoWhereInput
    /**
     * Limit how many Casinos to update.
     */
    limit?: number
  }

  /**
   * Casino upsert
   */
  export type CasinoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Casino
     */
    select?: CasinoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Casino
     */
    omit?: CasinoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoInclude<ExtArgs> | null
    /**
     * The filter to search for the Casino to update in case it exists.
     */
    where: CasinoWhereUniqueInput
    /**
     * In case the Casino found by the `where` argument doesn't exist, create a new Casino with this data.
     */
    create: XOR<CasinoCreateInput, CasinoUncheckedCreateInput>
    /**
     * In case the Casino was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CasinoUpdateInput, CasinoUncheckedUpdateInput>
  }

  /**
   * Casino delete
   */
  export type CasinoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Casino
     */
    select?: CasinoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Casino
     */
    omit?: CasinoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoInclude<ExtArgs> | null
    /**
     * Filter which Casino to delete.
     */
    where: CasinoWhereUniqueInput
  }

  /**
   * Casino deleteMany
   */
  export type CasinoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Casinos to delete
     */
    where?: CasinoWhereInput
    /**
     * Limit how many Casinos to delete.
     */
    limit?: number
  }

  /**
   * Casino.options
   */
  export type Casino$optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasinoOption
     */
    select?: CasinoOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasinoOption
     */
    omit?: CasinoOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoOptionInclude<ExtArgs> | null
    where?: CasinoOptionWhereInput
    orderBy?: CasinoOptionOrderByWithRelationInput | CasinoOptionOrderByWithRelationInput[]
    cursor?: CasinoOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CasinoOptionScalarFieldEnum | CasinoOptionScalarFieldEnum[]
  }

  /**
   * Casino without action
   */
  export type CasinoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Casino
     */
    select?: CasinoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Casino
     */
    omit?: CasinoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoInclude<ExtArgs> | null
  }


  /**
   * Model CasinoOption
   */

  export type AggregateCasinoOption = {
    _count: CasinoOptionCountAggregateOutputType | null
    _avg: CasinoOptionAvgAggregateOutputType | null
    _sum: CasinoOptionSumAggregateOutputType | null
    _min: CasinoOptionMinAggregateOutputType | null
    _max: CasinoOptionMaxAggregateOutputType | null
  }

  export type CasinoOptionAvgAggregateOutputType = {
    id: number | null
    option_id: number | null
    casino_id: number | null
  }

  export type CasinoOptionSumAggregateOutputType = {
    id: number | null
    option_id: number | null
    casino_id: number | null
  }

  export type CasinoOptionMinAggregateOutputType = {
    id: number | null
    option_id: number | null
    casino_id: number | null
    value: string | null
  }

  export type CasinoOptionMaxAggregateOutputType = {
    id: number | null
    option_id: number | null
    casino_id: number | null
    value: string | null
  }

  export type CasinoOptionCountAggregateOutputType = {
    id: number
    option_id: number
    casino_id: number
    value: number
    _all: number
  }


  export type CasinoOptionAvgAggregateInputType = {
    id?: true
    option_id?: true
    casino_id?: true
  }

  export type CasinoOptionSumAggregateInputType = {
    id?: true
    option_id?: true
    casino_id?: true
  }

  export type CasinoOptionMinAggregateInputType = {
    id?: true
    option_id?: true
    casino_id?: true
    value?: true
  }

  export type CasinoOptionMaxAggregateInputType = {
    id?: true
    option_id?: true
    casino_id?: true
    value?: true
  }

  export type CasinoOptionCountAggregateInputType = {
    id?: true
    option_id?: true
    casino_id?: true
    value?: true
    _all?: true
  }

  export type CasinoOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CasinoOption to aggregate.
     */
    where?: CasinoOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CasinoOptions to fetch.
     */
    orderBy?: CasinoOptionOrderByWithRelationInput | CasinoOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CasinoOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CasinoOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CasinoOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CasinoOptions
    **/
    _count?: true | CasinoOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CasinoOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CasinoOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CasinoOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CasinoOptionMaxAggregateInputType
  }

  export type GetCasinoOptionAggregateType<T extends CasinoOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateCasinoOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCasinoOption[P]>
      : GetScalarType<T[P], AggregateCasinoOption[P]>
  }




  export type CasinoOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CasinoOptionWhereInput
    orderBy?: CasinoOptionOrderByWithAggregationInput | CasinoOptionOrderByWithAggregationInput[]
    by: CasinoOptionScalarFieldEnum[] | CasinoOptionScalarFieldEnum
    having?: CasinoOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CasinoOptionCountAggregateInputType | true
    _avg?: CasinoOptionAvgAggregateInputType
    _sum?: CasinoOptionSumAggregateInputType
    _min?: CasinoOptionMinAggregateInputType
    _max?: CasinoOptionMaxAggregateInputType
  }

  export type CasinoOptionGroupByOutputType = {
    id: number
    option_id: number
    casino_id: number
    value: string
    _count: CasinoOptionCountAggregateOutputType | null
    _avg: CasinoOptionAvgAggregateOutputType | null
    _sum: CasinoOptionSumAggregateOutputType | null
    _min: CasinoOptionMinAggregateOutputType | null
    _max: CasinoOptionMaxAggregateOutputType | null
  }

  type GetCasinoOptionGroupByPayload<T extends CasinoOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CasinoOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CasinoOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CasinoOptionGroupByOutputType[P]>
            : GetScalarType<T[P], CasinoOptionGroupByOutputType[P]>
        }
      >
    >


  export type CasinoOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    option_id?: boolean
    casino_id?: boolean
    value?: boolean
    casino?: boolean | CasinoDefaultArgs<ExtArgs>
    entity?: boolean | OptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["casinoOption"]>



  export type CasinoOptionSelectScalar = {
    id?: boolean
    option_id?: boolean
    casino_id?: boolean
    value?: boolean
  }

  export type CasinoOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "option_id" | "casino_id" | "value", ExtArgs["result"]["casinoOption"]>
  export type CasinoOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    casino?: boolean | CasinoDefaultArgs<ExtArgs>
    entity?: boolean | OptionDefaultArgs<ExtArgs>
  }

  export type $CasinoOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CasinoOption"
    objects: {
      casino: Prisma.$CasinoPayload<ExtArgs>
      entity: Prisma.$OptionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      option_id: number
      casino_id: number
      value: string
    }, ExtArgs["result"]["casinoOption"]>
    composites: {}
  }

  type CasinoOptionGetPayload<S extends boolean | null | undefined | CasinoOptionDefaultArgs> = $Result.GetResult<Prisma.$CasinoOptionPayload, S>

  type CasinoOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CasinoOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CasinoOptionCountAggregateInputType | true
    }

  export interface CasinoOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CasinoOption'], meta: { name: 'CasinoOption' } }
    /**
     * Find zero or one CasinoOption that matches the filter.
     * @param {CasinoOptionFindUniqueArgs} args - Arguments to find a CasinoOption
     * @example
     * // Get one CasinoOption
     * const casinoOption = await prisma.casinoOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CasinoOptionFindUniqueArgs>(args: SelectSubset<T, CasinoOptionFindUniqueArgs<ExtArgs>>): Prisma__CasinoOptionClient<$Result.GetResult<Prisma.$CasinoOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CasinoOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CasinoOptionFindUniqueOrThrowArgs} args - Arguments to find a CasinoOption
     * @example
     * // Get one CasinoOption
     * const casinoOption = await prisma.casinoOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CasinoOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, CasinoOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CasinoOptionClient<$Result.GetResult<Prisma.$CasinoOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CasinoOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoOptionFindFirstArgs} args - Arguments to find a CasinoOption
     * @example
     * // Get one CasinoOption
     * const casinoOption = await prisma.casinoOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CasinoOptionFindFirstArgs>(args?: SelectSubset<T, CasinoOptionFindFirstArgs<ExtArgs>>): Prisma__CasinoOptionClient<$Result.GetResult<Prisma.$CasinoOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CasinoOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoOptionFindFirstOrThrowArgs} args - Arguments to find a CasinoOption
     * @example
     * // Get one CasinoOption
     * const casinoOption = await prisma.casinoOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CasinoOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, CasinoOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CasinoOptionClient<$Result.GetResult<Prisma.$CasinoOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CasinoOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CasinoOptions
     * const casinoOptions = await prisma.casinoOption.findMany()
     * 
     * // Get first 10 CasinoOptions
     * const casinoOptions = await prisma.casinoOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const casinoOptionWithIdOnly = await prisma.casinoOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CasinoOptionFindManyArgs>(args?: SelectSubset<T, CasinoOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasinoOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CasinoOption.
     * @param {CasinoOptionCreateArgs} args - Arguments to create a CasinoOption.
     * @example
     * // Create one CasinoOption
     * const CasinoOption = await prisma.casinoOption.create({
     *   data: {
     *     // ... data to create a CasinoOption
     *   }
     * })
     * 
     */
    create<T extends CasinoOptionCreateArgs>(args: SelectSubset<T, CasinoOptionCreateArgs<ExtArgs>>): Prisma__CasinoOptionClient<$Result.GetResult<Prisma.$CasinoOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CasinoOptions.
     * @param {CasinoOptionCreateManyArgs} args - Arguments to create many CasinoOptions.
     * @example
     * // Create many CasinoOptions
     * const casinoOption = await prisma.casinoOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CasinoOptionCreateManyArgs>(args?: SelectSubset<T, CasinoOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CasinoOption.
     * @param {CasinoOptionDeleteArgs} args - Arguments to delete one CasinoOption.
     * @example
     * // Delete one CasinoOption
     * const CasinoOption = await prisma.casinoOption.delete({
     *   where: {
     *     // ... filter to delete one CasinoOption
     *   }
     * })
     * 
     */
    delete<T extends CasinoOptionDeleteArgs>(args: SelectSubset<T, CasinoOptionDeleteArgs<ExtArgs>>): Prisma__CasinoOptionClient<$Result.GetResult<Prisma.$CasinoOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CasinoOption.
     * @param {CasinoOptionUpdateArgs} args - Arguments to update one CasinoOption.
     * @example
     * // Update one CasinoOption
     * const casinoOption = await prisma.casinoOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CasinoOptionUpdateArgs>(args: SelectSubset<T, CasinoOptionUpdateArgs<ExtArgs>>): Prisma__CasinoOptionClient<$Result.GetResult<Prisma.$CasinoOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CasinoOptions.
     * @param {CasinoOptionDeleteManyArgs} args - Arguments to filter CasinoOptions to delete.
     * @example
     * // Delete a few CasinoOptions
     * const { count } = await prisma.casinoOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CasinoOptionDeleteManyArgs>(args?: SelectSubset<T, CasinoOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CasinoOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CasinoOptions
     * const casinoOption = await prisma.casinoOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CasinoOptionUpdateManyArgs>(args: SelectSubset<T, CasinoOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CasinoOption.
     * @param {CasinoOptionUpsertArgs} args - Arguments to update or create a CasinoOption.
     * @example
     * // Update or create a CasinoOption
     * const casinoOption = await prisma.casinoOption.upsert({
     *   create: {
     *     // ... data to create a CasinoOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CasinoOption we want to update
     *   }
     * })
     */
    upsert<T extends CasinoOptionUpsertArgs>(args: SelectSubset<T, CasinoOptionUpsertArgs<ExtArgs>>): Prisma__CasinoOptionClient<$Result.GetResult<Prisma.$CasinoOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CasinoOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoOptionCountArgs} args - Arguments to filter CasinoOptions to count.
     * @example
     * // Count the number of CasinoOptions
     * const count = await prisma.casinoOption.count({
     *   where: {
     *     // ... the filter for the CasinoOptions we want to count
     *   }
     * })
    **/
    count<T extends CasinoOptionCountArgs>(
      args?: Subset<T, CasinoOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CasinoOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CasinoOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CasinoOptionAggregateArgs>(args: Subset<T, CasinoOptionAggregateArgs>): Prisma.PrismaPromise<GetCasinoOptionAggregateType<T>>

    /**
     * Group by CasinoOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasinoOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CasinoOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CasinoOptionGroupByArgs['orderBy'] }
        : { orderBy?: CasinoOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CasinoOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCasinoOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CasinoOption model
   */
  readonly fields: CasinoOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CasinoOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CasinoOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    casino<T extends CasinoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CasinoDefaultArgs<ExtArgs>>): Prisma__CasinoClient<$Result.GetResult<Prisma.$CasinoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    entity<T extends OptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OptionDefaultArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CasinoOption model
   */
  interface CasinoOptionFieldRefs {
    readonly id: FieldRef<"CasinoOption", 'Int'>
    readonly option_id: FieldRef<"CasinoOption", 'Int'>
    readonly casino_id: FieldRef<"CasinoOption", 'Int'>
    readonly value: FieldRef<"CasinoOption", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CasinoOption findUnique
   */
  export type CasinoOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasinoOption
     */
    select?: CasinoOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasinoOption
     */
    omit?: CasinoOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoOptionInclude<ExtArgs> | null
    /**
     * Filter, which CasinoOption to fetch.
     */
    where: CasinoOptionWhereUniqueInput
  }

  /**
   * CasinoOption findUniqueOrThrow
   */
  export type CasinoOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasinoOption
     */
    select?: CasinoOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasinoOption
     */
    omit?: CasinoOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoOptionInclude<ExtArgs> | null
    /**
     * Filter, which CasinoOption to fetch.
     */
    where: CasinoOptionWhereUniqueInput
  }

  /**
   * CasinoOption findFirst
   */
  export type CasinoOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasinoOption
     */
    select?: CasinoOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasinoOption
     */
    omit?: CasinoOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoOptionInclude<ExtArgs> | null
    /**
     * Filter, which CasinoOption to fetch.
     */
    where?: CasinoOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CasinoOptions to fetch.
     */
    orderBy?: CasinoOptionOrderByWithRelationInput | CasinoOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CasinoOptions.
     */
    cursor?: CasinoOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CasinoOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CasinoOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CasinoOptions.
     */
    distinct?: CasinoOptionScalarFieldEnum | CasinoOptionScalarFieldEnum[]
  }

  /**
   * CasinoOption findFirstOrThrow
   */
  export type CasinoOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasinoOption
     */
    select?: CasinoOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasinoOption
     */
    omit?: CasinoOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoOptionInclude<ExtArgs> | null
    /**
     * Filter, which CasinoOption to fetch.
     */
    where?: CasinoOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CasinoOptions to fetch.
     */
    orderBy?: CasinoOptionOrderByWithRelationInput | CasinoOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CasinoOptions.
     */
    cursor?: CasinoOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CasinoOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CasinoOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CasinoOptions.
     */
    distinct?: CasinoOptionScalarFieldEnum | CasinoOptionScalarFieldEnum[]
  }

  /**
   * CasinoOption findMany
   */
  export type CasinoOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasinoOption
     */
    select?: CasinoOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasinoOption
     */
    omit?: CasinoOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoOptionInclude<ExtArgs> | null
    /**
     * Filter, which CasinoOptions to fetch.
     */
    where?: CasinoOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CasinoOptions to fetch.
     */
    orderBy?: CasinoOptionOrderByWithRelationInput | CasinoOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CasinoOptions.
     */
    cursor?: CasinoOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CasinoOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CasinoOptions.
     */
    skip?: number
    distinct?: CasinoOptionScalarFieldEnum | CasinoOptionScalarFieldEnum[]
  }

  /**
   * CasinoOption create
   */
  export type CasinoOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasinoOption
     */
    select?: CasinoOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasinoOption
     */
    omit?: CasinoOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a CasinoOption.
     */
    data: XOR<CasinoOptionCreateInput, CasinoOptionUncheckedCreateInput>
  }

  /**
   * CasinoOption createMany
   */
  export type CasinoOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CasinoOptions.
     */
    data: CasinoOptionCreateManyInput | CasinoOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CasinoOption update
   */
  export type CasinoOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasinoOption
     */
    select?: CasinoOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasinoOption
     */
    omit?: CasinoOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a CasinoOption.
     */
    data: XOR<CasinoOptionUpdateInput, CasinoOptionUncheckedUpdateInput>
    /**
     * Choose, which CasinoOption to update.
     */
    where: CasinoOptionWhereUniqueInput
  }

  /**
   * CasinoOption updateMany
   */
  export type CasinoOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CasinoOptions.
     */
    data: XOR<CasinoOptionUpdateManyMutationInput, CasinoOptionUncheckedUpdateManyInput>
    /**
     * Filter which CasinoOptions to update
     */
    where?: CasinoOptionWhereInput
    /**
     * Limit how many CasinoOptions to update.
     */
    limit?: number
  }

  /**
   * CasinoOption upsert
   */
  export type CasinoOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasinoOption
     */
    select?: CasinoOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasinoOption
     */
    omit?: CasinoOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the CasinoOption to update in case it exists.
     */
    where: CasinoOptionWhereUniqueInput
    /**
     * In case the CasinoOption found by the `where` argument doesn't exist, create a new CasinoOption with this data.
     */
    create: XOR<CasinoOptionCreateInput, CasinoOptionUncheckedCreateInput>
    /**
     * In case the CasinoOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CasinoOptionUpdateInput, CasinoOptionUncheckedUpdateInput>
  }

  /**
   * CasinoOption delete
   */
  export type CasinoOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasinoOption
     */
    select?: CasinoOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasinoOption
     */
    omit?: CasinoOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoOptionInclude<ExtArgs> | null
    /**
     * Filter which CasinoOption to delete.
     */
    where: CasinoOptionWhereUniqueInput
  }

  /**
   * CasinoOption deleteMany
   */
  export type CasinoOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CasinoOptions to delete
     */
    where?: CasinoOptionWhereInput
    /**
     * Limit how many CasinoOptions to delete.
     */
    limit?: number
  }

  /**
   * CasinoOption without action
   */
  export type CasinoOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasinoOption
     */
    select?: CasinoOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasinoOption
     */
    omit?: CasinoOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasinoOptionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AttachmentScalarFieldEnum: {
    id: 'id',
    entity: 'entity',
    entity_id: 'entity_id',
    group: 'group',
    src: 'src',
    position: 'position'
  };

  export type AttachmentScalarFieldEnum = (typeof AttachmentScalarFieldEnum)[keyof typeof AttachmentScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    password: 'password',
    role: 'role',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MenuScalarFieldEnum: {
    id: 'id',
    type: 'type',
    published: 'published',
    label: 'label',
    link: 'link',
    parent_id: 'parent_id',
    position: 'position'
  };

  export type MenuScalarFieldEnum = (typeof MenuScalarFieldEnum)[keyof typeof MenuScalarFieldEnum]


  export const SettingScalarFieldEnum: {
    id: 'id',
    code: 'code',
    input_type: 'input_type',
    value: 'value',
    label: 'label'
  };

  export type SettingScalarFieldEnum = (typeof SettingScalarFieldEnum)[keyof typeof SettingScalarFieldEnum]


  export const RobotScalarFieldEnum: {
    id: 'id',
    user_agent: 'user_agent',
    allow: 'allow',
    disallow: 'disallow'
  };

  export type RobotScalarFieldEnum = (typeof RobotScalarFieldEnum)[keyof typeof RobotScalarFieldEnum]


  export const CategoryCardScalarFieldEnum: {
    id: 'id',
    published: 'published',
    label: 'label'
  };

  export type CategoryCardScalarFieldEnum = (typeof CategoryCardScalarFieldEnum)[keyof typeof CategoryCardScalarFieldEnum]


  export const CardScalarFieldEnum: {
    id: 'id',
    published: 'published',
    type: 'type',
    category_card_id: 'category_card_id',
    label: 'label',
    sub_label: 'sub_label',
    referal_key: 'referal_key',
    referal_link: 'referal_link',
    play_with_real_money: 'play_with_real_money',
    play_for_free: 'play_for_free',
    terms_and_condition: 'terms_and_condition'
  };

  export type CardScalarFieldEnum = (typeof CardScalarFieldEnum)[keyof typeof CardScalarFieldEnum]


  export const FaqScalarFieldEnum: {
    id: 'id',
    published: 'published',
    question: 'question',
    answer: 'answer',
    position: 'position'
  };

  export type FaqScalarFieldEnum = (typeof FaqScalarFieldEnum)[keyof typeof FaqScalarFieldEnum]


  export const FaqCardScalarFieldEnum: {
    id: 'id',
    faq_id: 'faq_id',
    card_id: 'card_id',
    position: 'position'
  };

  export type FaqCardScalarFieldEnum = (typeof FaqCardScalarFieldEnum)[keyof typeof FaqCardScalarFieldEnum]


  export const OptionScalarFieldEnum: {
    id: 'id',
    published: 'published',
    use_for_filter: 'use_for_filter',
    input_type: 'input_type',
    type: 'type',
    label: 'label',
    tooltip: 'tooltip',
    hash_tag: 'hash_tag',
    value: 'value',
    position: 'position'
  };

  export type OptionScalarFieldEnum = (typeof OptionScalarFieldEnum)[keyof typeof OptionScalarFieldEnum]


  export const CardOptionScalarFieldEnum: {
    id: 'id',
    option_id: 'option_id',
    card_id: 'card_id',
    value: 'value'
  };

  export type CardOptionScalarFieldEnum = (typeof CardOptionScalarFieldEnum)[keyof typeof CardOptionScalarFieldEnum]


  export const IconCardScalarFieldEnum: {
    id: 'id',
    published: 'published',
    label: 'label'
  };

  export type IconCardScalarFieldEnum = (typeof IconCardScalarFieldEnum)[keyof typeof IconCardScalarFieldEnum]


  export const IconCardImageScalarFieldEnum: {
    id: 'id',
    icon_card_id: 'icon_card_id',
    alt: 'alt',
    image: 'image',
    position: 'position'
  };

  export type IconCardImageScalarFieldEnum = (typeof IconCardImageScalarFieldEnum)[keyof typeof IconCardImageScalarFieldEnum]


  export const CardIconImageScalarFieldEnum: {
    id: 'id',
    card_id: 'card_id',
    icon_card_image_id: 'icon_card_image_id'
  };

  export type CardIconImageScalarFieldEnum = (typeof CardIconImageScalarFieldEnum)[keyof typeof CardIconImageScalarFieldEnum]


  export const CardImageScalarFieldEnum: {
    id: 'id',
    card_id: 'card_id',
    src: 'src'
  };

  export type CardImageScalarFieldEnum = (typeof CardImageScalarFieldEnum)[keyof typeof CardImageScalarFieldEnum]


  export const PageScalarFieldEnum: {
    id: 'id',
    published: 'published',
    label: 'label',
    slug: 'slug',
    meta_title: 'meta_title',
    meta_description: 'meta_description',
    meta_keywords: 'meta_keywords',
    meta_noindex_nofollow: 'meta_noindex_nofollow'
  };

  export type PageScalarFieldEnum = (typeof PageScalarFieldEnum)[keyof typeof PageScalarFieldEnum]


  export const BuilderScalarFieldEnum: {
    id: 'id',
    build_type: 'build_type',
    label: 'label'
  };

  export type BuilderScalarFieldEnum = (typeof BuilderScalarFieldEnum)[keyof typeof BuilderScalarFieldEnum]


  export const BuildPageScalarFieldEnum: {
    id: 'id',
    build_id: 'build_id',
    page_id: 'page_id',
    position: 'position',
    field_values: 'field_values',
    card_type: 'card_type'
  };

  export type BuildPageScalarFieldEnum = (typeof BuildPageScalarFieldEnum)[keyof typeof BuildPageScalarFieldEnum]


  export const CasinoScalarFieldEnum: {
    id: 'id',
    published: 'published',
    name: 'name',
    tooltip: 'tooltip',
    image: 'image',
    referral_key: 'referral_key',
    referral_link: 'referral_link',
    full_review_label: 'full_review_label',
    full_review_link: 'full_review_link'
  };

  export type CasinoScalarFieldEnum = (typeof CasinoScalarFieldEnum)[keyof typeof CasinoScalarFieldEnum]


  export const CasinoOptionScalarFieldEnum: {
    id: 'id',
    option_id: 'option_id',
    casino_id: 'casino_id',
    value: 'value'
  };

  export type CasinoOptionScalarFieldEnum = (typeof CasinoOptionScalarFieldEnum)[keyof typeof CasinoOptionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const AttachmentOrderByRelevanceFieldEnum: {
    entity: 'entity',
    group: 'group',
    src: 'src'
  };

  export type AttachmentOrderByRelevanceFieldEnum = (typeof AttachmentOrderByRelevanceFieldEnum)[keyof typeof AttachmentOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    image: 'image'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const MenuOrderByRelevanceFieldEnum: {
    label: 'label',
    link: 'link'
  };

  export type MenuOrderByRelevanceFieldEnum = (typeof MenuOrderByRelevanceFieldEnum)[keyof typeof MenuOrderByRelevanceFieldEnum]


  export const SettingOrderByRelevanceFieldEnum: {
    code: 'code',
    value: 'value',
    label: 'label'
  };

  export type SettingOrderByRelevanceFieldEnum = (typeof SettingOrderByRelevanceFieldEnum)[keyof typeof SettingOrderByRelevanceFieldEnum]


  export const RobotOrderByRelevanceFieldEnum: {
    user_agent: 'user_agent',
    allow: 'allow',
    disallow: 'disallow'
  };

  export type RobotOrderByRelevanceFieldEnum = (typeof RobotOrderByRelevanceFieldEnum)[keyof typeof RobotOrderByRelevanceFieldEnum]


  export const CategoryCardOrderByRelevanceFieldEnum: {
    label: 'label'
  };

  export type CategoryCardOrderByRelevanceFieldEnum = (typeof CategoryCardOrderByRelevanceFieldEnum)[keyof typeof CategoryCardOrderByRelevanceFieldEnum]


  export const CardOrderByRelevanceFieldEnum: {
    label: 'label',
    sub_label: 'sub_label',
    referal_key: 'referal_key',
    referal_link: 'referal_link',
    play_with_real_money: 'play_with_real_money',
    play_for_free: 'play_for_free',
    terms_and_condition: 'terms_and_condition'
  };

  export type CardOrderByRelevanceFieldEnum = (typeof CardOrderByRelevanceFieldEnum)[keyof typeof CardOrderByRelevanceFieldEnum]


  export const FaqOrderByRelevanceFieldEnum: {
    question: 'question',
    answer: 'answer'
  };

  export type FaqOrderByRelevanceFieldEnum = (typeof FaqOrderByRelevanceFieldEnum)[keyof typeof FaqOrderByRelevanceFieldEnum]


  export const OptionOrderByRelevanceFieldEnum: {
    label: 'label',
    tooltip: 'tooltip',
    hash_tag: 'hash_tag',
    value: 'value'
  };

  export type OptionOrderByRelevanceFieldEnum = (typeof OptionOrderByRelevanceFieldEnum)[keyof typeof OptionOrderByRelevanceFieldEnum]


  export const CardOptionOrderByRelevanceFieldEnum: {
    value: 'value'
  };

  export type CardOptionOrderByRelevanceFieldEnum = (typeof CardOptionOrderByRelevanceFieldEnum)[keyof typeof CardOptionOrderByRelevanceFieldEnum]


  export const IconCardOrderByRelevanceFieldEnum: {
    label: 'label'
  };

  export type IconCardOrderByRelevanceFieldEnum = (typeof IconCardOrderByRelevanceFieldEnum)[keyof typeof IconCardOrderByRelevanceFieldEnum]


  export const IconCardImageOrderByRelevanceFieldEnum: {
    alt: 'alt',
    image: 'image'
  };

  export type IconCardImageOrderByRelevanceFieldEnum = (typeof IconCardImageOrderByRelevanceFieldEnum)[keyof typeof IconCardImageOrderByRelevanceFieldEnum]


  export const CardImageOrderByRelevanceFieldEnum: {
    src: 'src'
  };

  export type CardImageOrderByRelevanceFieldEnum = (typeof CardImageOrderByRelevanceFieldEnum)[keyof typeof CardImageOrderByRelevanceFieldEnum]


  export const PageOrderByRelevanceFieldEnum: {
    label: 'label',
    slug: 'slug',
    meta_title: 'meta_title',
    meta_description: 'meta_description',
    meta_keywords: 'meta_keywords'
  };

  export type PageOrderByRelevanceFieldEnum = (typeof PageOrderByRelevanceFieldEnum)[keyof typeof PageOrderByRelevanceFieldEnum]


  export const BuilderOrderByRelevanceFieldEnum: {
    label: 'label'
  };

  export type BuilderOrderByRelevanceFieldEnum = (typeof BuilderOrderByRelevanceFieldEnum)[keyof typeof BuilderOrderByRelevanceFieldEnum]


  export const BuildPageOrderByRelevanceFieldEnum: {
    field_values: 'field_values',
    card_type: 'card_type'
  };

  export type BuildPageOrderByRelevanceFieldEnum = (typeof BuildPageOrderByRelevanceFieldEnum)[keyof typeof BuildPageOrderByRelevanceFieldEnum]


  export const CasinoOrderByRelevanceFieldEnum: {
    name: 'name',
    tooltip: 'tooltip',
    image: 'image',
    referral_key: 'referral_key',
    referral_link: 'referral_link',
    full_review_label: 'full_review_label',
    full_review_link: 'full_review_link'
  };

  export type CasinoOrderByRelevanceFieldEnum = (typeof CasinoOrderByRelevanceFieldEnum)[keyof typeof CasinoOrderByRelevanceFieldEnum]


  export const CasinoOptionOrderByRelevanceFieldEnum: {
    value: 'value'
  };

  export type CasinoOptionOrderByRelevanceFieldEnum = (typeof CasinoOptionOrderByRelevanceFieldEnum)[keyof typeof CasinoOptionOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'MenuType'
   */
  export type EnumMenuTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MenuType'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'InputType'
   */
  export type EnumInputTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InputType'>
    


  /**
   * Reference to a field of type 'CardType'
   */
  export type EnumCardTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CardType'>
    


  /**
   * Reference to a field of type 'OptionType'
   */
  export type EnumOptionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OptionType'>
    


  /**
   * Reference to a field of type 'BuildType'
   */
  export type EnumBuildTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BuildType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AttachmentWhereInput = {
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    id?: IntFilter<"Attachment"> | number
    entity?: StringFilter<"Attachment"> | string
    entity_id?: IntFilter<"Attachment"> | number
    group?: StringFilter<"Attachment"> | string
    src?: StringFilter<"Attachment"> | string
    position?: IntNullableFilter<"Attachment"> | number | null
  }

  export type AttachmentOrderByWithRelationInput = {
    id?: SortOrder
    entity?: SortOrder
    entity_id?: SortOrder
    group?: SortOrder
    src?: SortOrder
    position?: SortOrderInput | SortOrder
    _relevance?: AttachmentOrderByRelevanceInput
  }

  export type AttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    entity?: StringFilter<"Attachment"> | string
    entity_id?: IntFilter<"Attachment"> | number
    group?: StringFilter<"Attachment"> | string
    src?: StringFilter<"Attachment"> | string
    position?: IntNullableFilter<"Attachment"> | number | null
  }, "id">

  export type AttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    entity?: SortOrder
    entity_id?: SortOrder
    group?: SortOrder
    src?: SortOrder
    position?: SortOrderInput | SortOrder
    _count?: AttachmentCountOrderByAggregateInput
    _avg?: AttachmentAvgOrderByAggregateInput
    _max?: AttachmentMaxOrderByAggregateInput
    _min?: AttachmentMinOrderByAggregateInput
    _sum?: AttachmentSumOrderByAggregateInput
  }

  export type AttachmentScalarWhereWithAggregatesInput = {
    AND?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    OR?: AttachmentScalarWhereWithAggregatesInput[]
    NOT?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Attachment"> | number
    entity?: StringWithAggregatesFilter<"Attachment"> | string
    entity_id?: IntWithAggregatesFilter<"Attachment"> | number
    group?: StringWithAggregatesFilter<"Attachment"> | string
    src?: StringWithAggregatesFilter<"Attachment"> | string
    position?: IntNullableWithAggregatesFilter<"Attachment"> | number | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type MenuWhereInput = {
    AND?: MenuWhereInput | MenuWhereInput[]
    OR?: MenuWhereInput[]
    NOT?: MenuWhereInput | MenuWhereInput[]
    id?: IntFilter<"Menu"> | number
    type?: EnumMenuTypeFilter<"Menu"> | $Enums.MenuType
    published?: BoolFilter<"Menu"> | boolean
    label?: StringFilter<"Menu"> | string
    link?: StringFilter<"Menu"> | string
    parent_id?: IntNullableFilter<"Menu"> | number | null
    position?: IntFilter<"Menu"> | number
    parent?: XOR<MenuNullableScalarRelationFilter, MenuWhereInput> | null
    children?: MenuListRelationFilter
  }

  export type MenuOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    published?: SortOrder
    label?: SortOrder
    link?: SortOrder
    parent_id?: SortOrderInput | SortOrder
    position?: SortOrder
    parent?: MenuOrderByWithRelationInput
    children?: MenuOrderByRelationAggregateInput
    _relevance?: MenuOrderByRelevanceInput
  }

  export type MenuWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MenuWhereInput | MenuWhereInput[]
    OR?: MenuWhereInput[]
    NOT?: MenuWhereInput | MenuWhereInput[]
    type?: EnumMenuTypeFilter<"Menu"> | $Enums.MenuType
    published?: BoolFilter<"Menu"> | boolean
    label?: StringFilter<"Menu"> | string
    link?: StringFilter<"Menu"> | string
    parent_id?: IntNullableFilter<"Menu"> | number | null
    position?: IntFilter<"Menu"> | number
    parent?: XOR<MenuNullableScalarRelationFilter, MenuWhereInput> | null
    children?: MenuListRelationFilter
  }, "id">

  export type MenuOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    published?: SortOrder
    label?: SortOrder
    link?: SortOrder
    parent_id?: SortOrderInput | SortOrder
    position?: SortOrder
    _count?: MenuCountOrderByAggregateInput
    _avg?: MenuAvgOrderByAggregateInput
    _max?: MenuMaxOrderByAggregateInput
    _min?: MenuMinOrderByAggregateInput
    _sum?: MenuSumOrderByAggregateInput
  }

  export type MenuScalarWhereWithAggregatesInput = {
    AND?: MenuScalarWhereWithAggregatesInput | MenuScalarWhereWithAggregatesInput[]
    OR?: MenuScalarWhereWithAggregatesInput[]
    NOT?: MenuScalarWhereWithAggregatesInput | MenuScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Menu"> | number
    type?: EnumMenuTypeWithAggregatesFilter<"Menu"> | $Enums.MenuType
    published?: BoolWithAggregatesFilter<"Menu"> | boolean
    label?: StringWithAggregatesFilter<"Menu"> | string
    link?: StringWithAggregatesFilter<"Menu"> | string
    parent_id?: IntNullableWithAggregatesFilter<"Menu"> | number | null
    position?: IntWithAggregatesFilter<"Menu"> | number
  }

  export type SettingWhereInput = {
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    id?: IntFilter<"Setting"> | number
    code?: StringFilter<"Setting"> | string
    input_type?: EnumInputTypeFilter<"Setting"> | $Enums.InputType
    value?: StringFilter<"Setting"> | string
    label?: StringFilter<"Setting"> | string
  }

  export type SettingOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    input_type?: SortOrder
    value?: SortOrder
    label?: SortOrder
    _relevance?: SettingOrderByRelevanceInput
  }

  export type SettingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    input_type?: EnumInputTypeFilter<"Setting"> | $Enums.InputType
    value?: StringFilter<"Setting"> | string
    label?: StringFilter<"Setting"> | string
  }, "id" | "code">

  export type SettingOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    input_type?: SortOrder
    value?: SortOrder
    label?: SortOrder
    _count?: SettingCountOrderByAggregateInput
    _avg?: SettingAvgOrderByAggregateInput
    _max?: SettingMaxOrderByAggregateInput
    _min?: SettingMinOrderByAggregateInput
    _sum?: SettingSumOrderByAggregateInput
  }

  export type SettingScalarWhereWithAggregatesInput = {
    AND?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    OR?: SettingScalarWhereWithAggregatesInput[]
    NOT?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Setting"> | number
    code?: StringWithAggregatesFilter<"Setting"> | string
    input_type?: EnumInputTypeWithAggregatesFilter<"Setting"> | $Enums.InputType
    value?: StringWithAggregatesFilter<"Setting"> | string
    label?: StringWithAggregatesFilter<"Setting"> | string
  }

  export type RobotWhereInput = {
    AND?: RobotWhereInput | RobotWhereInput[]
    OR?: RobotWhereInput[]
    NOT?: RobotWhereInput | RobotWhereInput[]
    id?: IntFilter<"Robot"> | number
    user_agent?: StringFilter<"Robot"> | string
    allow?: StringNullableFilter<"Robot"> | string | null
    disallow?: StringNullableFilter<"Robot"> | string | null
  }

  export type RobotOrderByWithRelationInput = {
    id?: SortOrder
    user_agent?: SortOrder
    allow?: SortOrderInput | SortOrder
    disallow?: SortOrderInput | SortOrder
    _relevance?: RobotOrderByRelevanceInput
  }

  export type RobotWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RobotWhereInput | RobotWhereInput[]
    OR?: RobotWhereInput[]
    NOT?: RobotWhereInput | RobotWhereInput[]
    user_agent?: StringFilter<"Robot"> | string
    allow?: StringNullableFilter<"Robot"> | string | null
    disallow?: StringNullableFilter<"Robot"> | string | null
  }, "id">

  export type RobotOrderByWithAggregationInput = {
    id?: SortOrder
    user_agent?: SortOrder
    allow?: SortOrderInput | SortOrder
    disallow?: SortOrderInput | SortOrder
    _count?: RobotCountOrderByAggregateInput
    _avg?: RobotAvgOrderByAggregateInput
    _max?: RobotMaxOrderByAggregateInput
    _min?: RobotMinOrderByAggregateInput
    _sum?: RobotSumOrderByAggregateInput
  }

  export type RobotScalarWhereWithAggregatesInput = {
    AND?: RobotScalarWhereWithAggregatesInput | RobotScalarWhereWithAggregatesInput[]
    OR?: RobotScalarWhereWithAggregatesInput[]
    NOT?: RobotScalarWhereWithAggregatesInput | RobotScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Robot"> | number
    user_agent?: StringWithAggregatesFilter<"Robot"> | string
    allow?: StringNullableWithAggregatesFilter<"Robot"> | string | null
    disallow?: StringNullableWithAggregatesFilter<"Robot"> | string | null
  }

  export type CategoryCardWhereInput = {
    AND?: CategoryCardWhereInput | CategoryCardWhereInput[]
    OR?: CategoryCardWhereInput[]
    NOT?: CategoryCardWhereInput | CategoryCardWhereInput[]
    id?: IntFilter<"CategoryCard"> | number
    published?: BoolFilter<"CategoryCard"> | boolean
    label?: StringFilter<"CategoryCard"> | string
    cards?: CardListRelationFilter
  }

  export type CategoryCardOrderByWithRelationInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
    cards?: CardOrderByRelationAggregateInput
    _relevance?: CategoryCardOrderByRelevanceInput
  }

  export type CategoryCardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryCardWhereInput | CategoryCardWhereInput[]
    OR?: CategoryCardWhereInput[]
    NOT?: CategoryCardWhereInput | CategoryCardWhereInput[]
    published?: BoolFilter<"CategoryCard"> | boolean
    label?: StringFilter<"CategoryCard"> | string
    cards?: CardListRelationFilter
  }, "id">

  export type CategoryCardOrderByWithAggregationInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
    _count?: CategoryCardCountOrderByAggregateInput
    _avg?: CategoryCardAvgOrderByAggregateInput
    _max?: CategoryCardMaxOrderByAggregateInput
    _min?: CategoryCardMinOrderByAggregateInput
    _sum?: CategoryCardSumOrderByAggregateInput
  }

  export type CategoryCardScalarWhereWithAggregatesInput = {
    AND?: CategoryCardScalarWhereWithAggregatesInput | CategoryCardScalarWhereWithAggregatesInput[]
    OR?: CategoryCardScalarWhereWithAggregatesInput[]
    NOT?: CategoryCardScalarWhereWithAggregatesInput | CategoryCardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CategoryCard"> | number
    published?: BoolWithAggregatesFilter<"CategoryCard"> | boolean
    label?: StringWithAggregatesFilter<"CategoryCard"> | string
  }

  export type CardWhereInput = {
    AND?: CardWhereInput | CardWhereInput[]
    OR?: CardWhereInput[]
    NOT?: CardWhereInput | CardWhereInput[]
    id?: IntFilter<"Card"> | number
    published?: BoolFilter<"Card"> | boolean
    type?: EnumCardTypeFilter<"Card"> | $Enums.CardType
    category_card_id?: IntNullableFilter<"Card"> | number | null
    label?: StringFilter<"Card"> | string
    sub_label?: StringNullableFilter<"Card"> | string | null
    referal_key?: StringFilter<"Card"> | string
    referal_link?: StringNullableFilter<"Card"> | string | null
    play_with_real_money?: StringNullableFilter<"Card"> | string | null
    play_for_free?: StringNullableFilter<"Card"> | string | null
    terms_and_condition?: StringNullableFilter<"Card"> | string | null
    category_card?: XOR<CategoryCardNullableScalarRelationFilter, CategoryCardWhereInput> | null
    icon_card_images?: CardIconImageListRelationFilter
    images?: CardImageListRelationFilter
    options?: CardOptionListRelationFilter
    faqs?: FaqCardListRelationFilter
  }

  export type CardOrderByWithRelationInput = {
    id?: SortOrder
    published?: SortOrder
    type?: SortOrder
    category_card_id?: SortOrderInput | SortOrder
    label?: SortOrder
    sub_label?: SortOrderInput | SortOrder
    referal_key?: SortOrder
    referal_link?: SortOrderInput | SortOrder
    play_with_real_money?: SortOrderInput | SortOrder
    play_for_free?: SortOrderInput | SortOrder
    terms_and_condition?: SortOrderInput | SortOrder
    category_card?: CategoryCardOrderByWithRelationInput
    icon_card_images?: CardIconImageOrderByRelationAggregateInput
    images?: CardImageOrderByRelationAggregateInput
    options?: CardOptionOrderByRelationAggregateInput
    faqs?: FaqCardOrderByRelationAggregateInput
    _relevance?: CardOrderByRelevanceInput
  }

  export type CardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    referal_key?: string
    AND?: CardWhereInput | CardWhereInput[]
    OR?: CardWhereInput[]
    NOT?: CardWhereInput | CardWhereInput[]
    published?: BoolFilter<"Card"> | boolean
    type?: EnumCardTypeFilter<"Card"> | $Enums.CardType
    category_card_id?: IntNullableFilter<"Card"> | number | null
    label?: StringFilter<"Card"> | string
    sub_label?: StringNullableFilter<"Card"> | string | null
    referal_link?: StringNullableFilter<"Card"> | string | null
    play_with_real_money?: StringNullableFilter<"Card"> | string | null
    play_for_free?: StringNullableFilter<"Card"> | string | null
    terms_and_condition?: StringNullableFilter<"Card"> | string | null
    category_card?: XOR<CategoryCardNullableScalarRelationFilter, CategoryCardWhereInput> | null
    icon_card_images?: CardIconImageListRelationFilter
    images?: CardImageListRelationFilter
    options?: CardOptionListRelationFilter
    faqs?: FaqCardListRelationFilter
  }, "id" | "referal_key">

  export type CardOrderByWithAggregationInput = {
    id?: SortOrder
    published?: SortOrder
    type?: SortOrder
    category_card_id?: SortOrderInput | SortOrder
    label?: SortOrder
    sub_label?: SortOrderInput | SortOrder
    referal_key?: SortOrder
    referal_link?: SortOrderInput | SortOrder
    play_with_real_money?: SortOrderInput | SortOrder
    play_for_free?: SortOrderInput | SortOrder
    terms_and_condition?: SortOrderInput | SortOrder
    _count?: CardCountOrderByAggregateInput
    _avg?: CardAvgOrderByAggregateInput
    _max?: CardMaxOrderByAggregateInput
    _min?: CardMinOrderByAggregateInput
    _sum?: CardSumOrderByAggregateInput
  }

  export type CardScalarWhereWithAggregatesInput = {
    AND?: CardScalarWhereWithAggregatesInput | CardScalarWhereWithAggregatesInput[]
    OR?: CardScalarWhereWithAggregatesInput[]
    NOT?: CardScalarWhereWithAggregatesInput | CardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Card"> | number
    published?: BoolWithAggregatesFilter<"Card"> | boolean
    type?: EnumCardTypeWithAggregatesFilter<"Card"> | $Enums.CardType
    category_card_id?: IntNullableWithAggregatesFilter<"Card"> | number | null
    label?: StringWithAggregatesFilter<"Card"> | string
    sub_label?: StringNullableWithAggregatesFilter<"Card"> | string | null
    referal_key?: StringWithAggregatesFilter<"Card"> | string
    referal_link?: StringNullableWithAggregatesFilter<"Card"> | string | null
    play_with_real_money?: StringNullableWithAggregatesFilter<"Card"> | string | null
    play_for_free?: StringNullableWithAggregatesFilter<"Card"> | string | null
    terms_and_condition?: StringNullableWithAggregatesFilter<"Card"> | string | null
  }

  export type FaqWhereInput = {
    AND?: FaqWhereInput | FaqWhereInput[]
    OR?: FaqWhereInput[]
    NOT?: FaqWhereInput | FaqWhereInput[]
    id?: IntFilter<"Faq"> | number
    published?: BoolFilter<"Faq"> | boolean
    question?: StringFilter<"Faq"> | string
    answer?: StringFilter<"Faq"> | string
    position?: IntNullableFilter<"Faq"> | number | null
    cards?: FaqCardListRelationFilter
  }

  export type FaqOrderByWithRelationInput = {
    id?: SortOrder
    published?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    position?: SortOrderInput | SortOrder
    cards?: FaqCardOrderByRelationAggregateInput
    _relevance?: FaqOrderByRelevanceInput
  }

  export type FaqWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FaqWhereInput | FaqWhereInput[]
    OR?: FaqWhereInput[]
    NOT?: FaqWhereInput | FaqWhereInput[]
    published?: BoolFilter<"Faq"> | boolean
    question?: StringFilter<"Faq"> | string
    answer?: StringFilter<"Faq"> | string
    position?: IntNullableFilter<"Faq"> | number | null
    cards?: FaqCardListRelationFilter
  }, "id">

  export type FaqOrderByWithAggregationInput = {
    id?: SortOrder
    published?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    position?: SortOrderInput | SortOrder
    _count?: FaqCountOrderByAggregateInput
    _avg?: FaqAvgOrderByAggregateInput
    _max?: FaqMaxOrderByAggregateInput
    _min?: FaqMinOrderByAggregateInput
    _sum?: FaqSumOrderByAggregateInput
  }

  export type FaqScalarWhereWithAggregatesInput = {
    AND?: FaqScalarWhereWithAggregatesInput | FaqScalarWhereWithAggregatesInput[]
    OR?: FaqScalarWhereWithAggregatesInput[]
    NOT?: FaqScalarWhereWithAggregatesInput | FaqScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Faq"> | number
    published?: BoolWithAggregatesFilter<"Faq"> | boolean
    question?: StringWithAggregatesFilter<"Faq"> | string
    answer?: StringWithAggregatesFilter<"Faq"> | string
    position?: IntNullableWithAggregatesFilter<"Faq"> | number | null
  }

  export type FaqCardWhereInput = {
    AND?: FaqCardWhereInput | FaqCardWhereInput[]
    OR?: FaqCardWhereInput[]
    NOT?: FaqCardWhereInput | FaqCardWhereInput[]
    id?: IntFilter<"FaqCard"> | number
    faq_id?: IntFilter<"FaqCard"> | number
    card_id?: IntFilter<"FaqCard"> | number
    position?: IntNullableFilter<"FaqCard"> | number | null
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    faq?: XOR<FaqScalarRelationFilter, FaqWhereInput>
  }

  export type FaqCardOrderByWithRelationInput = {
    id?: SortOrder
    faq_id?: SortOrder
    card_id?: SortOrder
    position?: SortOrderInput | SortOrder
    card?: CardOrderByWithRelationInput
    faq?: FaqOrderByWithRelationInput
  }

  export type FaqCardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FaqCardWhereInput | FaqCardWhereInput[]
    OR?: FaqCardWhereInput[]
    NOT?: FaqCardWhereInput | FaqCardWhereInput[]
    faq_id?: IntFilter<"FaqCard"> | number
    card_id?: IntFilter<"FaqCard"> | number
    position?: IntNullableFilter<"FaqCard"> | number | null
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    faq?: XOR<FaqScalarRelationFilter, FaqWhereInput>
  }, "id">

  export type FaqCardOrderByWithAggregationInput = {
    id?: SortOrder
    faq_id?: SortOrder
    card_id?: SortOrder
    position?: SortOrderInput | SortOrder
    _count?: FaqCardCountOrderByAggregateInput
    _avg?: FaqCardAvgOrderByAggregateInput
    _max?: FaqCardMaxOrderByAggregateInput
    _min?: FaqCardMinOrderByAggregateInput
    _sum?: FaqCardSumOrderByAggregateInput
  }

  export type FaqCardScalarWhereWithAggregatesInput = {
    AND?: FaqCardScalarWhereWithAggregatesInput | FaqCardScalarWhereWithAggregatesInput[]
    OR?: FaqCardScalarWhereWithAggregatesInput[]
    NOT?: FaqCardScalarWhereWithAggregatesInput | FaqCardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FaqCard"> | number
    faq_id?: IntWithAggregatesFilter<"FaqCard"> | number
    card_id?: IntWithAggregatesFilter<"FaqCard"> | number
    position?: IntNullableWithAggregatesFilter<"FaqCard"> | number | null
  }

  export type OptionWhereInput = {
    AND?: OptionWhereInput | OptionWhereInput[]
    OR?: OptionWhereInput[]
    NOT?: OptionWhereInput | OptionWhereInput[]
    id?: IntFilter<"Option"> | number
    published?: BoolFilter<"Option"> | boolean
    use_for_filter?: BoolFilter<"Option"> | boolean
    input_type?: EnumInputTypeFilter<"Option"> | $Enums.InputType
    type?: EnumOptionTypeFilter<"Option"> | $Enums.OptionType
    label?: StringFilter<"Option"> | string
    tooltip?: StringNullableFilter<"Option"> | string | null
    hash_tag?: StringNullableFilter<"Option"> | string | null
    value?: StringFilter<"Option"> | string
    position?: IntNullableFilter<"Option"> | number | null
    card_options?: CardOptionListRelationFilter
    casino_options?: CasinoOptionListRelationFilter
  }

  export type OptionOrderByWithRelationInput = {
    id?: SortOrder
    published?: SortOrder
    use_for_filter?: SortOrder
    input_type?: SortOrder
    type?: SortOrder
    label?: SortOrder
    tooltip?: SortOrderInput | SortOrder
    hash_tag?: SortOrderInput | SortOrder
    value?: SortOrder
    position?: SortOrderInput | SortOrder
    card_options?: CardOptionOrderByRelationAggregateInput
    casino_options?: CasinoOptionOrderByRelationAggregateInput
    _relevance?: OptionOrderByRelevanceInput
  }

  export type OptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OptionWhereInput | OptionWhereInput[]
    OR?: OptionWhereInput[]
    NOT?: OptionWhereInput | OptionWhereInput[]
    published?: BoolFilter<"Option"> | boolean
    use_for_filter?: BoolFilter<"Option"> | boolean
    input_type?: EnumInputTypeFilter<"Option"> | $Enums.InputType
    type?: EnumOptionTypeFilter<"Option"> | $Enums.OptionType
    label?: StringFilter<"Option"> | string
    tooltip?: StringNullableFilter<"Option"> | string | null
    hash_tag?: StringNullableFilter<"Option"> | string | null
    value?: StringFilter<"Option"> | string
    position?: IntNullableFilter<"Option"> | number | null
    card_options?: CardOptionListRelationFilter
    casino_options?: CasinoOptionListRelationFilter
  }, "id">

  export type OptionOrderByWithAggregationInput = {
    id?: SortOrder
    published?: SortOrder
    use_for_filter?: SortOrder
    input_type?: SortOrder
    type?: SortOrder
    label?: SortOrder
    tooltip?: SortOrderInput | SortOrder
    hash_tag?: SortOrderInput | SortOrder
    value?: SortOrder
    position?: SortOrderInput | SortOrder
    _count?: OptionCountOrderByAggregateInput
    _avg?: OptionAvgOrderByAggregateInput
    _max?: OptionMaxOrderByAggregateInput
    _min?: OptionMinOrderByAggregateInput
    _sum?: OptionSumOrderByAggregateInput
  }

  export type OptionScalarWhereWithAggregatesInput = {
    AND?: OptionScalarWhereWithAggregatesInput | OptionScalarWhereWithAggregatesInput[]
    OR?: OptionScalarWhereWithAggregatesInput[]
    NOT?: OptionScalarWhereWithAggregatesInput | OptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Option"> | number
    published?: BoolWithAggregatesFilter<"Option"> | boolean
    use_for_filter?: BoolWithAggregatesFilter<"Option"> | boolean
    input_type?: EnumInputTypeWithAggregatesFilter<"Option"> | $Enums.InputType
    type?: EnumOptionTypeWithAggregatesFilter<"Option"> | $Enums.OptionType
    label?: StringWithAggregatesFilter<"Option"> | string
    tooltip?: StringNullableWithAggregatesFilter<"Option"> | string | null
    hash_tag?: StringNullableWithAggregatesFilter<"Option"> | string | null
    value?: StringWithAggregatesFilter<"Option"> | string
    position?: IntNullableWithAggregatesFilter<"Option"> | number | null
  }

  export type CardOptionWhereInput = {
    AND?: CardOptionWhereInput | CardOptionWhereInput[]
    OR?: CardOptionWhereInput[]
    NOT?: CardOptionWhereInput | CardOptionWhereInput[]
    id?: IntFilter<"CardOption"> | number
    option_id?: IntFilter<"CardOption"> | number
    card_id?: IntFilter<"CardOption"> | number
    value?: StringFilter<"CardOption"> | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    entity?: XOR<OptionScalarRelationFilter, OptionWhereInput>
  }

  export type CardOptionOrderByWithRelationInput = {
    id?: SortOrder
    option_id?: SortOrder
    card_id?: SortOrder
    value?: SortOrder
    card?: CardOrderByWithRelationInput
    entity?: OptionOrderByWithRelationInput
    _relevance?: CardOptionOrderByRelevanceInput
  }

  export type CardOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CardOptionWhereInput | CardOptionWhereInput[]
    OR?: CardOptionWhereInput[]
    NOT?: CardOptionWhereInput | CardOptionWhereInput[]
    option_id?: IntFilter<"CardOption"> | number
    card_id?: IntFilter<"CardOption"> | number
    value?: StringFilter<"CardOption"> | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    entity?: XOR<OptionScalarRelationFilter, OptionWhereInput>
  }, "id">

  export type CardOptionOrderByWithAggregationInput = {
    id?: SortOrder
    option_id?: SortOrder
    card_id?: SortOrder
    value?: SortOrder
    _count?: CardOptionCountOrderByAggregateInput
    _avg?: CardOptionAvgOrderByAggregateInput
    _max?: CardOptionMaxOrderByAggregateInput
    _min?: CardOptionMinOrderByAggregateInput
    _sum?: CardOptionSumOrderByAggregateInput
  }

  export type CardOptionScalarWhereWithAggregatesInput = {
    AND?: CardOptionScalarWhereWithAggregatesInput | CardOptionScalarWhereWithAggregatesInput[]
    OR?: CardOptionScalarWhereWithAggregatesInput[]
    NOT?: CardOptionScalarWhereWithAggregatesInput | CardOptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CardOption"> | number
    option_id?: IntWithAggregatesFilter<"CardOption"> | number
    card_id?: IntWithAggregatesFilter<"CardOption"> | number
    value?: StringWithAggregatesFilter<"CardOption"> | string
  }

  export type IconCardWhereInput = {
    AND?: IconCardWhereInput | IconCardWhereInput[]
    OR?: IconCardWhereInput[]
    NOT?: IconCardWhereInput | IconCardWhereInput[]
    id?: IntFilter<"IconCard"> | number
    published?: BoolFilter<"IconCard"> | boolean
    label?: StringFilter<"IconCard"> | string
    images?: IconCardImageListRelationFilter
  }

  export type IconCardOrderByWithRelationInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
    images?: IconCardImageOrderByRelationAggregateInput
    _relevance?: IconCardOrderByRelevanceInput
  }

  export type IconCardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: IconCardWhereInput | IconCardWhereInput[]
    OR?: IconCardWhereInput[]
    NOT?: IconCardWhereInput | IconCardWhereInput[]
    published?: BoolFilter<"IconCard"> | boolean
    label?: StringFilter<"IconCard"> | string
    images?: IconCardImageListRelationFilter
  }, "id">

  export type IconCardOrderByWithAggregationInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
    _count?: IconCardCountOrderByAggregateInput
    _avg?: IconCardAvgOrderByAggregateInput
    _max?: IconCardMaxOrderByAggregateInput
    _min?: IconCardMinOrderByAggregateInput
    _sum?: IconCardSumOrderByAggregateInput
  }

  export type IconCardScalarWhereWithAggregatesInput = {
    AND?: IconCardScalarWhereWithAggregatesInput | IconCardScalarWhereWithAggregatesInput[]
    OR?: IconCardScalarWhereWithAggregatesInput[]
    NOT?: IconCardScalarWhereWithAggregatesInput | IconCardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"IconCard"> | number
    published?: BoolWithAggregatesFilter<"IconCard"> | boolean
    label?: StringWithAggregatesFilter<"IconCard"> | string
  }

  export type IconCardImageWhereInput = {
    AND?: IconCardImageWhereInput | IconCardImageWhereInput[]
    OR?: IconCardImageWhereInput[]
    NOT?: IconCardImageWhereInput | IconCardImageWhereInput[]
    id?: IntFilter<"IconCardImage"> | number
    icon_card_id?: IntFilter<"IconCardImage"> | number
    alt?: StringFilter<"IconCardImage"> | string
    image?: StringFilter<"IconCardImage"> | string
    position?: IntNullableFilter<"IconCardImage"> | number | null
    icon_card?: XOR<IconCardScalarRelationFilter, IconCardWhereInput>
    cards?: CardIconImageListRelationFilter
  }

  export type IconCardImageOrderByWithRelationInput = {
    id?: SortOrder
    icon_card_id?: SortOrder
    alt?: SortOrder
    image?: SortOrder
    position?: SortOrderInput | SortOrder
    icon_card?: IconCardOrderByWithRelationInput
    cards?: CardIconImageOrderByRelationAggregateInput
    _relevance?: IconCardImageOrderByRelevanceInput
  }

  export type IconCardImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: IconCardImageWhereInput | IconCardImageWhereInput[]
    OR?: IconCardImageWhereInput[]
    NOT?: IconCardImageWhereInput | IconCardImageWhereInput[]
    icon_card_id?: IntFilter<"IconCardImage"> | number
    alt?: StringFilter<"IconCardImage"> | string
    image?: StringFilter<"IconCardImage"> | string
    position?: IntNullableFilter<"IconCardImage"> | number | null
    icon_card?: XOR<IconCardScalarRelationFilter, IconCardWhereInput>
    cards?: CardIconImageListRelationFilter
  }, "id">

  export type IconCardImageOrderByWithAggregationInput = {
    id?: SortOrder
    icon_card_id?: SortOrder
    alt?: SortOrder
    image?: SortOrder
    position?: SortOrderInput | SortOrder
    _count?: IconCardImageCountOrderByAggregateInput
    _avg?: IconCardImageAvgOrderByAggregateInput
    _max?: IconCardImageMaxOrderByAggregateInput
    _min?: IconCardImageMinOrderByAggregateInput
    _sum?: IconCardImageSumOrderByAggregateInput
  }

  export type IconCardImageScalarWhereWithAggregatesInput = {
    AND?: IconCardImageScalarWhereWithAggregatesInput | IconCardImageScalarWhereWithAggregatesInput[]
    OR?: IconCardImageScalarWhereWithAggregatesInput[]
    NOT?: IconCardImageScalarWhereWithAggregatesInput | IconCardImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"IconCardImage"> | number
    icon_card_id?: IntWithAggregatesFilter<"IconCardImage"> | number
    alt?: StringWithAggregatesFilter<"IconCardImage"> | string
    image?: StringWithAggregatesFilter<"IconCardImage"> | string
    position?: IntNullableWithAggregatesFilter<"IconCardImage"> | number | null
  }

  export type CardIconImageWhereInput = {
    AND?: CardIconImageWhereInput | CardIconImageWhereInput[]
    OR?: CardIconImageWhereInput[]
    NOT?: CardIconImageWhereInput | CardIconImageWhereInput[]
    id?: IntFilter<"CardIconImage"> | number
    card_id?: IntFilter<"CardIconImage"> | number
    icon_card_image_id?: IntFilter<"CardIconImage"> | number
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    icon_card_image?: XOR<IconCardImageScalarRelationFilter, IconCardImageWhereInput>
  }

  export type CardIconImageOrderByWithRelationInput = {
    id?: SortOrder
    card_id?: SortOrder
    icon_card_image_id?: SortOrder
    card?: CardOrderByWithRelationInput
    icon_card_image?: IconCardImageOrderByWithRelationInput
  }

  export type CardIconImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CardIconImageWhereInput | CardIconImageWhereInput[]
    OR?: CardIconImageWhereInput[]
    NOT?: CardIconImageWhereInput | CardIconImageWhereInput[]
    card_id?: IntFilter<"CardIconImage"> | number
    icon_card_image_id?: IntFilter<"CardIconImage"> | number
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    icon_card_image?: XOR<IconCardImageScalarRelationFilter, IconCardImageWhereInput>
  }, "id">

  export type CardIconImageOrderByWithAggregationInput = {
    id?: SortOrder
    card_id?: SortOrder
    icon_card_image_id?: SortOrder
    _count?: CardIconImageCountOrderByAggregateInput
    _avg?: CardIconImageAvgOrderByAggregateInput
    _max?: CardIconImageMaxOrderByAggregateInput
    _min?: CardIconImageMinOrderByAggregateInput
    _sum?: CardIconImageSumOrderByAggregateInput
  }

  export type CardIconImageScalarWhereWithAggregatesInput = {
    AND?: CardIconImageScalarWhereWithAggregatesInput | CardIconImageScalarWhereWithAggregatesInput[]
    OR?: CardIconImageScalarWhereWithAggregatesInput[]
    NOT?: CardIconImageScalarWhereWithAggregatesInput | CardIconImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CardIconImage"> | number
    card_id?: IntWithAggregatesFilter<"CardIconImage"> | number
    icon_card_image_id?: IntWithAggregatesFilter<"CardIconImage"> | number
  }

  export type CardImageWhereInput = {
    AND?: CardImageWhereInput | CardImageWhereInput[]
    OR?: CardImageWhereInput[]
    NOT?: CardImageWhereInput | CardImageWhereInput[]
    id?: IntFilter<"CardImage"> | number
    card_id?: IntFilter<"CardImage"> | number
    src?: StringFilter<"CardImage"> | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
  }

  export type CardImageOrderByWithRelationInput = {
    id?: SortOrder
    card_id?: SortOrder
    src?: SortOrder
    card?: CardOrderByWithRelationInput
    _relevance?: CardImageOrderByRelevanceInput
  }

  export type CardImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CardImageWhereInput | CardImageWhereInput[]
    OR?: CardImageWhereInput[]
    NOT?: CardImageWhereInput | CardImageWhereInput[]
    card_id?: IntFilter<"CardImage"> | number
    src?: StringFilter<"CardImage"> | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
  }, "id">

  export type CardImageOrderByWithAggregationInput = {
    id?: SortOrder
    card_id?: SortOrder
    src?: SortOrder
    _count?: CardImageCountOrderByAggregateInput
    _avg?: CardImageAvgOrderByAggregateInput
    _max?: CardImageMaxOrderByAggregateInput
    _min?: CardImageMinOrderByAggregateInput
    _sum?: CardImageSumOrderByAggregateInput
  }

  export type CardImageScalarWhereWithAggregatesInput = {
    AND?: CardImageScalarWhereWithAggregatesInput | CardImageScalarWhereWithAggregatesInput[]
    OR?: CardImageScalarWhereWithAggregatesInput[]
    NOT?: CardImageScalarWhereWithAggregatesInput | CardImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CardImage"> | number
    card_id?: IntWithAggregatesFilter<"CardImage"> | number
    src?: StringWithAggregatesFilter<"CardImage"> | string
  }

  export type PageWhereInput = {
    AND?: PageWhereInput | PageWhereInput[]
    OR?: PageWhereInput[]
    NOT?: PageWhereInput | PageWhereInput[]
    id?: IntFilter<"Page"> | number
    published?: BoolFilter<"Page"> | boolean
    label?: StringFilter<"Page"> | string
    slug?: StringFilter<"Page"> | string
    meta_title?: StringFilter<"Page"> | string
    meta_description?: StringFilter<"Page"> | string
    meta_keywords?: StringFilter<"Page"> | string
    meta_noindex_nofollow?: BoolFilter<"Page"> | boolean
    builds?: BuildPageListRelationFilter
  }

  export type PageOrderByWithRelationInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
    slug?: SortOrder
    meta_title?: SortOrder
    meta_description?: SortOrder
    meta_keywords?: SortOrder
    meta_noindex_nofollow?: SortOrder
    builds?: BuildPageOrderByRelationAggregateInput
    _relevance?: PageOrderByRelevanceInput
  }

  export type PageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: PageWhereInput | PageWhereInput[]
    OR?: PageWhereInput[]
    NOT?: PageWhereInput | PageWhereInput[]
    published?: BoolFilter<"Page"> | boolean
    label?: StringFilter<"Page"> | string
    meta_title?: StringFilter<"Page"> | string
    meta_description?: StringFilter<"Page"> | string
    meta_keywords?: StringFilter<"Page"> | string
    meta_noindex_nofollow?: BoolFilter<"Page"> | boolean
    builds?: BuildPageListRelationFilter
  }, "id" | "slug">

  export type PageOrderByWithAggregationInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
    slug?: SortOrder
    meta_title?: SortOrder
    meta_description?: SortOrder
    meta_keywords?: SortOrder
    meta_noindex_nofollow?: SortOrder
    _count?: PageCountOrderByAggregateInput
    _avg?: PageAvgOrderByAggregateInput
    _max?: PageMaxOrderByAggregateInput
    _min?: PageMinOrderByAggregateInput
    _sum?: PageSumOrderByAggregateInput
  }

  export type PageScalarWhereWithAggregatesInput = {
    AND?: PageScalarWhereWithAggregatesInput | PageScalarWhereWithAggregatesInput[]
    OR?: PageScalarWhereWithAggregatesInput[]
    NOT?: PageScalarWhereWithAggregatesInput | PageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Page"> | number
    published?: BoolWithAggregatesFilter<"Page"> | boolean
    label?: StringWithAggregatesFilter<"Page"> | string
    slug?: StringWithAggregatesFilter<"Page"> | string
    meta_title?: StringWithAggregatesFilter<"Page"> | string
    meta_description?: StringWithAggregatesFilter<"Page"> | string
    meta_keywords?: StringWithAggregatesFilter<"Page"> | string
    meta_noindex_nofollow?: BoolWithAggregatesFilter<"Page"> | boolean
  }

  export type BuilderWhereInput = {
    AND?: BuilderWhereInput | BuilderWhereInput[]
    OR?: BuilderWhereInput[]
    NOT?: BuilderWhereInput | BuilderWhereInput[]
    id?: IntFilter<"Builder"> | number
    build_type?: EnumBuildTypeFilter<"Builder"> | $Enums.BuildType
    label?: StringFilter<"Builder"> | string
    pages?: BuildPageListRelationFilter
  }

  export type BuilderOrderByWithRelationInput = {
    id?: SortOrder
    build_type?: SortOrder
    label?: SortOrder
    pages?: BuildPageOrderByRelationAggregateInput
    _relevance?: BuilderOrderByRelevanceInput
  }

  export type BuilderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BuilderWhereInput | BuilderWhereInput[]
    OR?: BuilderWhereInput[]
    NOT?: BuilderWhereInput | BuilderWhereInput[]
    build_type?: EnumBuildTypeFilter<"Builder"> | $Enums.BuildType
    label?: StringFilter<"Builder"> | string
    pages?: BuildPageListRelationFilter
  }, "id">

  export type BuilderOrderByWithAggregationInput = {
    id?: SortOrder
    build_type?: SortOrder
    label?: SortOrder
    _count?: BuilderCountOrderByAggregateInput
    _avg?: BuilderAvgOrderByAggregateInput
    _max?: BuilderMaxOrderByAggregateInput
    _min?: BuilderMinOrderByAggregateInput
    _sum?: BuilderSumOrderByAggregateInput
  }

  export type BuilderScalarWhereWithAggregatesInput = {
    AND?: BuilderScalarWhereWithAggregatesInput | BuilderScalarWhereWithAggregatesInput[]
    OR?: BuilderScalarWhereWithAggregatesInput[]
    NOT?: BuilderScalarWhereWithAggregatesInput | BuilderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Builder"> | number
    build_type?: EnumBuildTypeWithAggregatesFilter<"Builder"> | $Enums.BuildType
    label?: StringWithAggregatesFilter<"Builder"> | string
  }

  export type BuildPageWhereInput = {
    AND?: BuildPageWhereInput | BuildPageWhereInput[]
    OR?: BuildPageWhereInput[]
    NOT?: BuildPageWhereInput | BuildPageWhereInput[]
    id?: IntFilter<"BuildPage"> | number
    build_id?: IntFilter<"BuildPage"> | number
    page_id?: IntFilter<"BuildPage"> | number
    position?: IntFilter<"BuildPage"> | number
    field_values?: StringFilter<"BuildPage"> | string
    card_type?: StringNullableFilter<"BuildPage"> | string | null
    build?: XOR<BuilderScalarRelationFilter, BuilderWhereInput>
    page?: XOR<PageScalarRelationFilter, PageWhereInput>
  }

  export type BuildPageOrderByWithRelationInput = {
    id?: SortOrder
    build_id?: SortOrder
    page_id?: SortOrder
    position?: SortOrder
    field_values?: SortOrder
    card_type?: SortOrderInput | SortOrder
    build?: BuilderOrderByWithRelationInput
    page?: PageOrderByWithRelationInput
    _relevance?: BuildPageOrderByRelevanceInput
  }

  export type BuildPageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BuildPageWhereInput | BuildPageWhereInput[]
    OR?: BuildPageWhereInput[]
    NOT?: BuildPageWhereInput | BuildPageWhereInput[]
    build_id?: IntFilter<"BuildPage"> | number
    page_id?: IntFilter<"BuildPage"> | number
    position?: IntFilter<"BuildPage"> | number
    field_values?: StringFilter<"BuildPage"> | string
    card_type?: StringNullableFilter<"BuildPage"> | string | null
    build?: XOR<BuilderScalarRelationFilter, BuilderWhereInput>
    page?: XOR<PageScalarRelationFilter, PageWhereInput>
  }, "id">

  export type BuildPageOrderByWithAggregationInput = {
    id?: SortOrder
    build_id?: SortOrder
    page_id?: SortOrder
    position?: SortOrder
    field_values?: SortOrder
    card_type?: SortOrderInput | SortOrder
    _count?: BuildPageCountOrderByAggregateInput
    _avg?: BuildPageAvgOrderByAggregateInput
    _max?: BuildPageMaxOrderByAggregateInput
    _min?: BuildPageMinOrderByAggregateInput
    _sum?: BuildPageSumOrderByAggregateInput
  }

  export type BuildPageScalarWhereWithAggregatesInput = {
    AND?: BuildPageScalarWhereWithAggregatesInput | BuildPageScalarWhereWithAggregatesInput[]
    OR?: BuildPageScalarWhereWithAggregatesInput[]
    NOT?: BuildPageScalarWhereWithAggregatesInput | BuildPageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BuildPage"> | number
    build_id?: IntWithAggregatesFilter<"BuildPage"> | number
    page_id?: IntWithAggregatesFilter<"BuildPage"> | number
    position?: IntWithAggregatesFilter<"BuildPage"> | number
    field_values?: StringWithAggregatesFilter<"BuildPage"> | string
    card_type?: StringNullableWithAggregatesFilter<"BuildPage"> | string | null
  }

  export type CasinoWhereInput = {
    AND?: CasinoWhereInput | CasinoWhereInput[]
    OR?: CasinoWhereInput[]
    NOT?: CasinoWhereInput | CasinoWhereInput[]
    id?: IntFilter<"Casino"> | number
    published?: BoolFilter<"Casino"> | boolean
    name?: StringFilter<"Casino"> | string
    tooltip?: StringNullableFilter<"Casino"> | string | null
    image?: StringFilter<"Casino"> | string
    referral_key?: StringFilter<"Casino"> | string
    referral_link?: StringNullableFilter<"Casino"> | string | null
    full_review_label?: StringNullableFilter<"Casino"> | string | null
    full_review_link?: StringNullableFilter<"Casino"> | string | null
    options?: CasinoOptionListRelationFilter
  }

  export type CasinoOrderByWithRelationInput = {
    id?: SortOrder
    published?: SortOrder
    name?: SortOrder
    tooltip?: SortOrderInput | SortOrder
    image?: SortOrder
    referral_key?: SortOrder
    referral_link?: SortOrderInput | SortOrder
    full_review_label?: SortOrderInput | SortOrder
    full_review_link?: SortOrderInput | SortOrder
    options?: CasinoOptionOrderByRelationAggregateInput
    _relevance?: CasinoOrderByRelevanceInput
  }

  export type CasinoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    referral_key?: string
    AND?: CasinoWhereInput | CasinoWhereInput[]
    OR?: CasinoWhereInput[]
    NOT?: CasinoWhereInput | CasinoWhereInput[]
    published?: BoolFilter<"Casino"> | boolean
    name?: StringFilter<"Casino"> | string
    tooltip?: StringNullableFilter<"Casino"> | string | null
    image?: StringFilter<"Casino"> | string
    referral_link?: StringNullableFilter<"Casino"> | string | null
    full_review_label?: StringNullableFilter<"Casino"> | string | null
    full_review_link?: StringNullableFilter<"Casino"> | string | null
    options?: CasinoOptionListRelationFilter
  }, "id" | "referral_key">

  export type CasinoOrderByWithAggregationInput = {
    id?: SortOrder
    published?: SortOrder
    name?: SortOrder
    tooltip?: SortOrderInput | SortOrder
    image?: SortOrder
    referral_key?: SortOrder
    referral_link?: SortOrderInput | SortOrder
    full_review_label?: SortOrderInput | SortOrder
    full_review_link?: SortOrderInput | SortOrder
    _count?: CasinoCountOrderByAggregateInput
    _avg?: CasinoAvgOrderByAggregateInput
    _max?: CasinoMaxOrderByAggregateInput
    _min?: CasinoMinOrderByAggregateInput
    _sum?: CasinoSumOrderByAggregateInput
  }

  export type CasinoScalarWhereWithAggregatesInput = {
    AND?: CasinoScalarWhereWithAggregatesInput | CasinoScalarWhereWithAggregatesInput[]
    OR?: CasinoScalarWhereWithAggregatesInput[]
    NOT?: CasinoScalarWhereWithAggregatesInput | CasinoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Casino"> | number
    published?: BoolWithAggregatesFilter<"Casino"> | boolean
    name?: StringWithAggregatesFilter<"Casino"> | string
    tooltip?: StringNullableWithAggregatesFilter<"Casino"> | string | null
    image?: StringWithAggregatesFilter<"Casino"> | string
    referral_key?: StringWithAggregatesFilter<"Casino"> | string
    referral_link?: StringNullableWithAggregatesFilter<"Casino"> | string | null
    full_review_label?: StringNullableWithAggregatesFilter<"Casino"> | string | null
    full_review_link?: StringNullableWithAggregatesFilter<"Casino"> | string | null
  }

  export type CasinoOptionWhereInput = {
    AND?: CasinoOptionWhereInput | CasinoOptionWhereInput[]
    OR?: CasinoOptionWhereInput[]
    NOT?: CasinoOptionWhereInput | CasinoOptionWhereInput[]
    id?: IntFilter<"CasinoOption"> | number
    option_id?: IntFilter<"CasinoOption"> | number
    casino_id?: IntFilter<"CasinoOption"> | number
    value?: StringFilter<"CasinoOption"> | string
    casino?: XOR<CasinoScalarRelationFilter, CasinoWhereInput>
    entity?: XOR<OptionScalarRelationFilter, OptionWhereInput>
  }

  export type CasinoOptionOrderByWithRelationInput = {
    id?: SortOrder
    option_id?: SortOrder
    casino_id?: SortOrder
    value?: SortOrder
    casino?: CasinoOrderByWithRelationInput
    entity?: OptionOrderByWithRelationInput
    _relevance?: CasinoOptionOrderByRelevanceInput
  }

  export type CasinoOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CasinoOptionWhereInput | CasinoOptionWhereInput[]
    OR?: CasinoOptionWhereInput[]
    NOT?: CasinoOptionWhereInput | CasinoOptionWhereInput[]
    option_id?: IntFilter<"CasinoOption"> | number
    casino_id?: IntFilter<"CasinoOption"> | number
    value?: StringFilter<"CasinoOption"> | string
    casino?: XOR<CasinoScalarRelationFilter, CasinoWhereInput>
    entity?: XOR<OptionScalarRelationFilter, OptionWhereInput>
  }, "id">

  export type CasinoOptionOrderByWithAggregationInput = {
    id?: SortOrder
    option_id?: SortOrder
    casino_id?: SortOrder
    value?: SortOrder
    _count?: CasinoOptionCountOrderByAggregateInput
    _avg?: CasinoOptionAvgOrderByAggregateInput
    _max?: CasinoOptionMaxOrderByAggregateInput
    _min?: CasinoOptionMinOrderByAggregateInput
    _sum?: CasinoOptionSumOrderByAggregateInput
  }

  export type CasinoOptionScalarWhereWithAggregatesInput = {
    AND?: CasinoOptionScalarWhereWithAggregatesInput | CasinoOptionScalarWhereWithAggregatesInput[]
    OR?: CasinoOptionScalarWhereWithAggregatesInput[]
    NOT?: CasinoOptionScalarWhereWithAggregatesInput | CasinoOptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CasinoOption"> | number
    option_id?: IntWithAggregatesFilter<"CasinoOption"> | number
    casino_id?: IntWithAggregatesFilter<"CasinoOption"> | number
    value?: StringWithAggregatesFilter<"CasinoOption"> | string
  }

  export type AttachmentCreateInput = {
    entity: string
    entity_id: number
    group?: string
    src: string
    position?: number | null
  }

  export type AttachmentUncheckedCreateInput = {
    id?: number
    entity: string
    entity_id: number
    group?: string
    src: string
    position?: number | null
  }

  export type AttachmentUpdateInput = {
    entity?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    src?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttachmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    entity?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    src?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttachmentCreateManyInput = {
    id?: number
    entity: string
    entity_id: number
    group?: string
    src: string
    position?: number | null
  }

  export type AttachmentUpdateManyMutationInput = {
    entity?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    src?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttachmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    entity?: StringFieldUpdateOperationsInput | string
    entity_id?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    src?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    role?: $Enums.UserRole
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuCreateInput = {
    type: $Enums.MenuType
    published: boolean
    label: string
    link: string
    position?: number
    parent?: MenuCreateNestedOneWithoutChildrenInput
    children?: MenuCreateNestedManyWithoutParentInput
  }

  export type MenuUncheckedCreateInput = {
    id?: number
    type: $Enums.MenuType
    published: boolean
    label: string
    link: string
    parent_id?: number | null
    position?: number
    children?: MenuUncheckedCreateNestedManyWithoutParentInput
  }

  export type MenuUpdateInput = {
    type?: EnumMenuTypeFieldUpdateOperationsInput | $Enums.MenuType
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    parent?: MenuUpdateOneWithoutChildrenNestedInput
    children?: MenuUpdateManyWithoutParentNestedInput
  }

  export type MenuUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumMenuTypeFieldUpdateOperationsInput | $Enums.MenuType
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    position?: IntFieldUpdateOperationsInput | number
    children?: MenuUncheckedUpdateManyWithoutParentNestedInput
  }

  export type MenuCreateManyInput = {
    id?: number
    type: $Enums.MenuType
    published: boolean
    label: string
    link: string
    parent_id?: number | null
    position?: number
  }

  export type MenuUpdateManyMutationInput = {
    type?: EnumMenuTypeFieldUpdateOperationsInput | $Enums.MenuType
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type MenuUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumMenuTypeFieldUpdateOperationsInput | $Enums.MenuType
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    position?: IntFieldUpdateOperationsInput | number
  }

  export type SettingCreateInput = {
    code: string
    input_type?: $Enums.InputType
    value: string
    label: string
  }

  export type SettingUncheckedCreateInput = {
    id?: number
    code: string
    input_type?: $Enums.InputType
    value: string
    label: string
  }

  export type SettingUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    input_type?: EnumInputTypeFieldUpdateOperationsInput | $Enums.InputType
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type SettingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    input_type?: EnumInputTypeFieldUpdateOperationsInput | $Enums.InputType
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type SettingCreateManyInput = {
    id?: number
    code: string
    input_type?: $Enums.InputType
    value: string
    label: string
  }

  export type SettingUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    input_type?: EnumInputTypeFieldUpdateOperationsInput | $Enums.InputType
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type SettingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    input_type?: EnumInputTypeFieldUpdateOperationsInput | $Enums.InputType
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type RobotCreateInput = {
    user_agent: string
    allow?: string | null
    disallow?: string | null
  }

  export type RobotUncheckedCreateInput = {
    id?: number
    user_agent: string
    allow?: string | null
    disallow?: string | null
  }

  export type RobotUpdateInput = {
    user_agent?: StringFieldUpdateOperationsInput | string
    allow?: NullableStringFieldUpdateOperationsInput | string | null
    disallow?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RobotUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_agent?: StringFieldUpdateOperationsInput | string
    allow?: NullableStringFieldUpdateOperationsInput | string | null
    disallow?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RobotCreateManyInput = {
    id?: number
    user_agent: string
    allow?: string | null
    disallow?: string | null
  }

  export type RobotUpdateManyMutationInput = {
    user_agent?: StringFieldUpdateOperationsInput | string
    allow?: NullableStringFieldUpdateOperationsInput | string | null
    disallow?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RobotUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_agent?: StringFieldUpdateOperationsInput | string
    allow?: NullableStringFieldUpdateOperationsInput | string | null
    disallow?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCardCreateInput = {
    published?: boolean
    label: string
    cards?: CardCreateNestedManyWithoutCategory_cardInput
  }

  export type CategoryCardUncheckedCreateInput = {
    id?: number
    published?: boolean
    label: string
    cards?: CardUncheckedCreateNestedManyWithoutCategory_cardInput
  }

  export type CategoryCardUpdateInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    cards?: CardUpdateManyWithoutCategory_cardNestedInput
  }

  export type CategoryCardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    cards?: CardUncheckedUpdateManyWithoutCategory_cardNestedInput
  }

  export type CategoryCardCreateManyInput = {
    id?: number
    published?: boolean
    label: string
  }

  export type CategoryCardUpdateManyMutationInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
  }

  export type CardCreateInput = {
    published: boolean
    type: $Enums.CardType
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
    category_card?: CategoryCardCreateNestedOneWithoutCardsInput
    icon_card_images?: CardIconImageCreateNestedManyWithoutCardInput
    images?: CardImageCreateNestedManyWithoutCardInput
    options?: CardOptionCreateNestedManyWithoutCardInput
    faqs?: FaqCardCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateInput = {
    id?: number
    published: boolean
    type: $Enums.CardType
    category_card_id?: number | null
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
    icon_card_images?: CardIconImageUncheckedCreateNestedManyWithoutCardInput
    images?: CardImageUncheckedCreateNestedManyWithoutCardInput
    options?: CardOptionUncheckedCreateNestedManyWithoutCardInput
    faqs?: FaqCardUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardUpdateInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
    category_card?: CategoryCardUpdateOneWithoutCardsNestedInput
    icon_card_images?: CardIconImageUpdateManyWithoutCardNestedInput
    images?: CardImageUpdateManyWithoutCardNestedInput
    options?: CardOptionUpdateManyWithoutCardNestedInput
    faqs?: FaqCardUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    category_card_id?: NullableIntFieldUpdateOperationsInput | number | null
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
    icon_card_images?: CardIconImageUncheckedUpdateManyWithoutCardNestedInput
    images?: CardImageUncheckedUpdateManyWithoutCardNestedInput
    options?: CardOptionUncheckedUpdateManyWithoutCardNestedInput
    faqs?: FaqCardUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardCreateManyInput = {
    id?: number
    published: boolean
    type: $Enums.CardType
    category_card_id?: number | null
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
  }

  export type CardUpdateManyMutationInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    category_card_id?: NullableIntFieldUpdateOperationsInput | number | null
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FaqCreateInput = {
    published?: boolean
    question: string
    answer: string
    position?: number | null
    cards?: FaqCardCreateNestedManyWithoutFaqInput
  }

  export type FaqUncheckedCreateInput = {
    id?: number
    published?: boolean
    question: string
    answer: string
    position?: number | null
    cards?: FaqCardUncheckedCreateNestedManyWithoutFaqInput
  }

  export type FaqUpdateInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
    cards?: FaqCardUpdateManyWithoutFaqNestedInput
  }

  export type FaqUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
    cards?: FaqCardUncheckedUpdateManyWithoutFaqNestedInput
  }

  export type FaqCreateManyInput = {
    id?: number
    published?: boolean
    question: string
    answer: string
    position?: number | null
  }

  export type FaqUpdateManyMutationInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FaqUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FaqCardCreateInput = {
    position?: number | null
    card: CardCreateNestedOneWithoutFaqsInput
    faq: FaqCreateNestedOneWithoutCardsInput
  }

  export type FaqCardUncheckedCreateInput = {
    id?: number
    faq_id: number
    card_id: number
    position?: number | null
  }

  export type FaqCardUpdateInput = {
    position?: NullableIntFieldUpdateOperationsInput | number | null
    card?: CardUpdateOneRequiredWithoutFaqsNestedInput
    faq?: FaqUpdateOneRequiredWithoutCardsNestedInput
  }

  export type FaqCardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    faq_id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FaqCardCreateManyInput = {
    id?: number
    faq_id: number
    card_id: number
    position?: number | null
  }

  export type FaqCardUpdateManyMutationInput = {
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FaqCardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    faq_id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OptionCreateInput = {
    published: boolean
    use_for_filter: boolean
    input_type: $Enums.InputType
    type?: $Enums.OptionType
    label: string
    tooltip?: string | null
    hash_tag?: string | null
    value: string
    position?: number | null
    card_options?: CardOptionCreateNestedManyWithoutEntityInput
    casino_options?: CasinoOptionCreateNestedManyWithoutEntityInput
  }

  export type OptionUncheckedCreateInput = {
    id?: number
    published: boolean
    use_for_filter: boolean
    input_type: $Enums.InputType
    type?: $Enums.OptionType
    label: string
    tooltip?: string | null
    hash_tag?: string | null
    value: string
    position?: number | null
    card_options?: CardOptionUncheckedCreateNestedManyWithoutEntityInput
    casino_options?: CasinoOptionUncheckedCreateNestedManyWithoutEntityInput
  }

  export type OptionUpdateInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    use_for_filter?: BoolFieldUpdateOperationsInput | boolean
    input_type?: EnumInputTypeFieldUpdateOperationsInput | $Enums.InputType
    type?: EnumOptionTypeFieldUpdateOperationsInput | $Enums.OptionType
    label?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    hash_tag?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
    card_options?: CardOptionUpdateManyWithoutEntityNestedInput
    casino_options?: CasinoOptionUpdateManyWithoutEntityNestedInput
  }

  export type OptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    use_for_filter?: BoolFieldUpdateOperationsInput | boolean
    input_type?: EnumInputTypeFieldUpdateOperationsInput | $Enums.InputType
    type?: EnumOptionTypeFieldUpdateOperationsInput | $Enums.OptionType
    label?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    hash_tag?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
    card_options?: CardOptionUncheckedUpdateManyWithoutEntityNestedInput
    casino_options?: CasinoOptionUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type OptionCreateManyInput = {
    id?: number
    published: boolean
    use_for_filter: boolean
    input_type: $Enums.InputType
    type?: $Enums.OptionType
    label: string
    tooltip?: string | null
    hash_tag?: string | null
    value: string
    position?: number | null
  }

  export type OptionUpdateManyMutationInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    use_for_filter?: BoolFieldUpdateOperationsInput | boolean
    input_type?: EnumInputTypeFieldUpdateOperationsInput | $Enums.InputType
    type?: EnumOptionTypeFieldUpdateOperationsInput | $Enums.OptionType
    label?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    hash_tag?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    use_for_filter?: BoolFieldUpdateOperationsInput | boolean
    input_type?: EnumInputTypeFieldUpdateOperationsInput | $Enums.InputType
    type?: EnumOptionTypeFieldUpdateOperationsInput | $Enums.OptionType
    label?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    hash_tag?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CardOptionCreateInput = {
    value: string
    card: CardCreateNestedOneWithoutOptionsInput
    entity: OptionCreateNestedOneWithoutCard_optionsInput
  }

  export type CardOptionUncheckedCreateInput = {
    id?: number
    option_id: number
    card_id: number
    value: string
  }

  export type CardOptionUpdateInput = {
    value?: StringFieldUpdateOperationsInput | string
    card?: CardUpdateOneRequiredWithoutOptionsNestedInput
    entity?: OptionUpdateOneRequiredWithoutCard_optionsNestedInput
  }

  export type CardOptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    option_id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type CardOptionCreateManyInput = {
    id?: number
    option_id: number
    card_id: number
    value: string
  }

  export type CardOptionUpdateManyMutationInput = {
    value?: StringFieldUpdateOperationsInput | string
  }

  export type CardOptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    option_id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type IconCardCreateInput = {
    published?: boolean
    label: string
    images?: IconCardImageCreateNestedManyWithoutIcon_cardInput
  }

  export type IconCardUncheckedCreateInput = {
    id?: number
    published?: boolean
    label: string
    images?: IconCardImageUncheckedCreateNestedManyWithoutIcon_cardInput
  }

  export type IconCardUpdateInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    images?: IconCardImageUpdateManyWithoutIcon_cardNestedInput
  }

  export type IconCardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    images?: IconCardImageUncheckedUpdateManyWithoutIcon_cardNestedInput
  }

  export type IconCardCreateManyInput = {
    id?: number
    published?: boolean
    label: string
  }

  export type IconCardUpdateManyMutationInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
  }

  export type IconCardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
  }

  export type IconCardImageCreateInput = {
    alt: string
    image: string
    position?: number | null
    icon_card: IconCardCreateNestedOneWithoutImagesInput
    cards?: CardIconImageCreateNestedManyWithoutIcon_card_imageInput
  }

  export type IconCardImageUncheckedCreateInput = {
    id?: number
    icon_card_id: number
    alt: string
    image: string
    position?: number | null
    cards?: CardIconImageUncheckedCreateNestedManyWithoutIcon_card_imageInput
  }

  export type IconCardImageUpdateInput = {
    alt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
    icon_card?: IconCardUpdateOneRequiredWithoutImagesNestedInput
    cards?: CardIconImageUpdateManyWithoutIcon_card_imageNestedInput
  }

  export type IconCardImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    icon_card_id?: IntFieldUpdateOperationsInput | number
    alt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
    cards?: CardIconImageUncheckedUpdateManyWithoutIcon_card_imageNestedInput
  }

  export type IconCardImageCreateManyInput = {
    id?: number
    icon_card_id: number
    alt: string
    image: string
    position?: number | null
  }

  export type IconCardImageUpdateManyMutationInput = {
    alt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IconCardImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    icon_card_id?: IntFieldUpdateOperationsInput | number
    alt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CardIconImageCreateInput = {
    card: CardCreateNestedOneWithoutIcon_card_imagesInput
    icon_card_image: IconCardImageCreateNestedOneWithoutCardsInput
  }

  export type CardIconImageUncheckedCreateInput = {
    id?: number
    card_id: number
    icon_card_image_id: number
  }

  export type CardIconImageUpdateInput = {
    card?: CardUpdateOneRequiredWithoutIcon_card_imagesNestedInput
    icon_card_image?: IconCardImageUpdateOneRequiredWithoutCardsNestedInput
  }

  export type CardIconImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    icon_card_image_id?: IntFieldUpdateOperationsInput | number
  }

  export type CardIconImageCreateManyInput = {
    id?: number
    card_id: number
    icon_card_image_id: number
  }

  export type CardIconImageUpdateManyMutationInput = {

  }

  export type CardIconImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    icon_card_image_id?: IntFieldUpdateOperationsInput | number
  }

  export type CardImageCreateInput = {
    src: string
    card: CardCreateNestedOneWithoutImagesInput
  }

  export type CardImageUncheckedCreateInput = {
    id?: number
    card_id: number
    src: string
  }

  export type CardImageUpdateInput = {
    src?: StringFieldUpdateOperationsInput | string
    card?: CardUpdateOneRequiredWithoutImagesNestedInput
  }

  export type CardImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    src?: StringFieldUpdateOperationsInput | string
  }

  export type CardImageCreateManyInput = {
    id?: number
    card_id: number
    src: string
  }

  export type CardImageUpdateManyMutationInput = {
    src?: StringFieldUpdateOperationsInput | string
  }

  export type CardImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    src?: StringFieldUpdateOperationsInput | string
  }

  export type PageCreateInput = {
    published?: boolean
    label: string
    slug: string
    meta_title: string
    meta_description: string
    meta_keywords: string
    meta_noindex_nofollow?: boolean
    builds?: BuildPageCreateNestedManyWithoutPageInput
  }

  export type PageUncheckedCreateInput = {
    id?: number
    published?: boolean
    label: string
    slug: string
    meta_title: string
    meta_description: string
    meta_keywords: string
    meta_noindex_nofollow?: boolean
    builds?: BuildPageUncheckedCreateNestedManyWithoutPageInput
  }

  export type PageUpdateInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    meta_title?: StringFieldUpdateOperationsInput | string
    meta_description?: StringFieldUpdateOperationsInput | string
    meta_keywords?: StringFieldUpdateOperationsInput | string
    meta_noindex_nofollow?: BoolFieldUpdateOperationsInput | boolean
    builds?: BuildPageUpdateManyWithoutPageNestedInput
  }

  export type PageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    meta_title?: StringFieldUpdateOperationsInput | string
    meta_description?: StringFieldUpdateOperationsInput | string
    meta_keywords?: StringFieldUpdateOperationsInput | string
    meta_noindex_nofollow?: BoolFieldUpdateOperationsInput | boolean
    builds?: BuildPageUncheckedUpdateManyWithoutPageNestedInput
  }

  export type PageCreateManyInput = {
    id?: number
    published?: boolean
    label: string
    slug: string
    meta_title: string
    meta_description: string
    meta_keywords: string
    meta_noindex_nofollow?: boolean
  }

  export type PageUpdateManyMutationInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    meta_title?: StringFieldUpdateOperationsInput | string
    meta_description?: StringFieldUpdateOperationsInput | string
    meta_keywords?: StringFieldUpdateOperationsInput | string
    meta_noindex_nofollow?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    meta_title?: StringFieldUpdateOperationsInput | string
    meta_description?: StringFieldUpdateOperationsInput | string
    meta_keywords?: StringFieldUpdateOperationsInput | string
    meta_noindex_nofollow?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BuilderCreateInput = {
    build_type?: $Enums.BuildType
    label: string
    pages?: BuildPageCreateNestedManyWithoutBuildInput
  }

  export type BuilderUncheckedCreateInput = {
    id?: number
    build_type?: $Enums.BuildType
    label: string
    pages?: BuildPageUncheckedCreateNestedManyWithoutBuildInput
  }

  export type BuilderUpdateInput = {
    build_type?: EnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType
    label?: StringFieldUpdateOperationsInput | string
    pages?: BuildPageUpdateManyWithoutBuildNestedInput
  }

  export type BuilderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    build_type?: EnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType
    label?: StringFieldUpdateOperationsInput | string
    pages?: BuildPageUncheckedUpdateManyWithoutBuildNestedInput
  }

  export type BuilderCreateManyInput = {
    id?: number
    build_type?: $Enums.BuildType
    label: string
  }

  export type BuilderUpdateManyMutationInput = {
    build_type?: EnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType
    label?: StringFieldUpdateOperationsInput | string
  }

  export type BuilderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    build_type?: EnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType
    label?: StringFieldUpdateOperationsInput | string
  }

  export type BuildPageCreateInput = {
    position: number
    field_values: string
    card_type?: string | null
    build: BuilderCreateNestedOneWithoutPagesInput
    page: PageCreateNestedOneWithoutBuildsInput
  }

  export type BuildPageUncheckedCreateInput = {
    id?: number
    build_id: number
    page_id: number
    position: number
    field_values: string
    card_type?: string | null
  }

  export type BuildPageUpdateInput = {
    position?: IntFieldUpdateOperationsInput | number
    field_values?: StringFieldUpdateOperationsInput | string
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
    build?: BuilderUpdateOneRequiredWithoutPagesNestedInput
    page?: PageUpdateOneRequiredWithoutBuildsNestedInput
  }

  export type BuildPageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    build_id?: IntFieldUpdateOperationsInput | number
    page_id?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    field_values?: StringFieldUpdateOperationsInput | string
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BuildPageCreateManyInput = {
    id?: number
    build_id: number
    page_id: number
    position: number
    field_values: string
    card_type?: string | null
  }

  export type BuildPageUpdateManyMutationInput = {
    position?: IntFieldUpdateOperationsInput | number
    field_values?: StringFieldUpdateOperationsInput | string
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BuildPageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    build_id?: IntFieldUpdateOperationsInput | number
    page_id?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    field_values?: StringFieldUpdateOperationsInput | string
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CasinoCreateInput = {
    published?: boolean
    name: string
    tooltip?: string | null
    image: string
    referral_key: string
    referral_link?: string | null
    full_review_label?: string | null
    full_review_link?: string | null
    options?: CasinoOptionCreateNestedManyWithoutCasinoInput
  }

  export type CasinoUncheckedCreateInput = {
    id?: number
    published?: boolean
    name: string
    tooltip?: string | null
    image: string
    referral_key: string
    referral_link?: string | null
    full_review_label?: string | null
    full_review_link?: string | null
    options?: CasinoOptionUncheckedCreateNestedManyWithoutCasinoInput
  }

  export type CasinoUpdateInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    referral_key?: StringFieldUpdateOperationsInput | string
    referral_link?: NullableStringFieldUpdateOperationsInput | string | null
    full_review_label?: NullableStringFieldUpdateOperationsInput | string | null
    full_review_link?: NullableStringFieldUpdateOperationsInput | string | null
    options?: CasinoOptionUpdateManyWithoutCasinoNestedInput
  }

  export type CasinoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    referral_key?: StringFieldUpdateOperationsInput | string
    referral_link?: NullableStringFieldUpdateOperationsInput | string | null
    full_review_label?: NullableStringFieldUpdateOperationsInput | string | null
    full_review_link?: NullableStringFieldUpdateOperationsInput | string | null
    options?: CasinoOptionUncheckedUpdateManyWithoutCasinoNestedInput
  }

  export type CasinoCreateManyInput = {
    id?: number
    published?: boolean
    name: string
    tooltip?: string | null
    image: string
    referral_key: string
    referral_link?: string | null
    full_review_label?: string | null
    full_review_link?: string | null
  }

  export type CasinoUpdateManyMutationInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    referral_key?: StringFieldUpdateOperationsInput | string
    referral_link?: NullableStringFieldUpdateOperationsInput | string | null
    full_review_label?: NullableStringFieldUpdateOperationsInput | string | null
    full_review_link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CasinoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    referral_key?: StringFieldUpdateOperationsInput | string
    referral_link?: NullableStringFieldUpdateOperationsInput | string | null
    full_review_label?: NullableStringFieldUpdateOperationsInput | string | null
    full_review_link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CasinoOptionCreateInput = {
    value: string
    casino: CasinoCreateNestedOneWithoutOptionsInput
    entity: OptionCreateNestedOneWithoutCasino_optionsInput
  }

  export type CasinoOptionUncheckedCreateInput = {
    id?: number
    option_id: number
    casino_id: number
    value: string
  }

  export type CasinoOptionUpdateInput = {
    value?: StringFieldUpdateOperationsInput | string
    casino?: CasinoUpdateOneRequiredWithoutOptionsNestedInput
    entity?: OptionUpdateOneRequiredWithoutCasino_optionsNestedInput
  }

  export type CasinoOptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    option_id?: IntFieldUpdateOperationsInput | number
    casino_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type CasinoOptionCreateManyInput = {
    id?: number
    option_id: number
    casino_id: number
    value: string
  }

  export type CasinoOptionUpdateManyMutationInput = {
    value?: StringFieldUpdateOperationsInput | string
  }

  export type CasinoOptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    option_id?: IntFieldUpdateOperationsInput | number
    casino_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AttachmentOrderByRelevanceInput = {
    fields: AttachmentOrderByRelevanceFieldEnum | AttachmentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    entity?: SortOrder
    entity_id?: SortOrder
    group?: SortOrder
    src?: SortOrder
    position?: SortOrder
  }

  export type AttachmentAvgOrderByAggregateInput = {
    id?: SortOrder
    entity_id?: SortOrder
    position?: SortOrder
  }

  export type AttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    entity?: SortOrder
    entity_id?: SortOrder
    group?: SortOrder
    src?: SortOrder
    position?: SortOrder
  }

  export type AttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    entity?: SortOrder
    entity_id?: SortOrder
    group?: SortOrder
    src?: SortOrder
    position?: SortOrder
  }

  export type AttachmentSumOrderByAggregateInput = {
    id?: SortOrder
    entity_id?: SortOrder
    position?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    role?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    role?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    role?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumMenuTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MenuType | EnumMenuTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MenuType[]
    notIn?: $Enums.MenuType[]
    not?: NestedEnumMenuTypeFilter<$PrismaModel> | $Enums.MenuType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MenuNullableScalarRelationFilter = {
    is?: MenuWhereInput | null
    isNot?: MenuWhereInput | null
  }

  export type MenuListRelationFilter = {
    every?: MenuWhereInput
    some?: MenuWhereInput
    none?: MenuWhereInput
  }

  export type MenuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MenuOrderByRelevanceInput = {
    fields: MenuOrderByRelevanceFieldEnum | MenuOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MenuCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    published?: SortOrder
    label?: SortOrder
    link?: SortOrder
    parent_id?: SortOrder
    position?: SortOrder
  }

  export type MenuAvgOrderByAggregateInput = {
    id?: SortOrder
    parent_id?: SortOrder
    position?: SortOrder
  }

  export type MenuMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    published?: SortOrder
    label?: SortOrder
    link?: SortOrder
    parent_id?: SortOrder
    position?: SortOrder
  }

  export type MenuMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    published?: SortOrder
    label?: SortOrder
    link?: SortOrder
    parent_id?: SortOrder
    position?: SortOrder
  }

  export type MenuSumOrderByAggregateInput = {
    id?: SortOrder
    parent_id?: SortOrder
    position?: SortOrder
  }

  export type EnumMenuTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MenuType | EnumMenuTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MenuType[]
    notIn?: $Enums.MenuType[]
    not?: NestedEnumMenuTypeWithAggregatesFilter<$PrismaModel> | $Enums.MenuType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMenuTypeFilter<$PrismaModel>
    _max?: NestedEnumMenuTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumInputTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InputType | EnumInputTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InputType[]
    notIn?: $Enums.InputType[]
    not?: NestedEnumInputTypeFilter<$PrismaModel> | $Enums.InputType
  }

  export type SettingOrderByRelevanceInput = {
    fields: SettingOrderByRelevanceFieldEnum | SettingOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SettingCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    input_type?: SortOrder
    value?: SortOrder
    label?: SortOrder
  }

  export type SettingAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SettingMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    input_type?: SortOrder
    value?: SortOrder
    label?: SortOrder
  }

  export type SettingMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    input_type?: SortOrder
    value?: SortOrder
    label?: SortOrder
  }

  export type SettingSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumInputTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InputType | EnumInputTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InputType[]
    notIn?: $Enums.InputType[]
    not?: NestedEnumInputTypeWithAggregatesFilter<$PrismaModel> | $Enums.InputType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInputTypeFilter<$PrismaModel>
    _max?: NestedEnumInputTypeFilter<$PrismaModel>
  }

  export type RobotOrderByRelevanceInput = {
    fields: RobotOrderByRelevanceFieldEnum | RobotOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RobotCountOrderByAggregateInput = {
    id?: SortOrder
    user_agent?: SortOrder
    allow?: SortOrder
    disallow?: SortOrder
  }

  export type RobotAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RobotMaxOrderByAggregateInput = {
    id?: SortOrder
    user_agent?: SortOrder
    allow?: SortOrder
    disallow?: SortOrder
  }

  export type RobotMinOrderByAggregateInput = {
    id?: SortOrder
    user_agent?: SortOrder
    allow?: SortOrder
    disallow?: SortOrder
  }

  export type RobotSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CardListRelationFilter = {
    every?: CardWhereInput
    some?: CardWhereInput
    none?: CardWhereInput
  }

  export type CardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCardOrderByRelevanceInput = {
    fields: CategoryCardOrderByRelevanceFieldEnum | CategoryCardOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CategoryCardCountOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
  }

  export type CategoryCardAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryCardMaxOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
  }

  export type CategoryCardMinOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
  }

  export type CategoryCardSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumCardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CardType | EnumCardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CardType[]
    notIn?: $Enums.CardType[]
    not?: NestedEnumCardTypeFilter<$PrismaModel> | $Enums.CardType
  }

  export type CategoryCardNullableScalarRelationFilter = {
    is?: CategoryCardWhereInput | null
    isNot?: CategoryCardWhereInput | null
  }

  export type CardIconImageListRelationFilter = {
    every?: CardIconImageWhereInput
    some?: CardIconImageWhereInput
    none?: CardIconImageWhereInput
  }

  export type CardImageListRelationFilter = {
    every?: CardImageWhereInput
    some?: CardImageWhereInput
    none?: CardImageWhereInput
  }

  export type CardOptionListRelationFilter = {
    every?: CardOptionWhereInput
    some?: CardOptionWhereInput
    none?: CardOptionWhereInput
  }

  export type FaqCardListRelationFilter = {
    every?: FaqCardWhereInput
    some?: FaqCardWhereInput
    none?: FaqCardWhereInput
  }

  export type CardIconImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CardImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CardOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FaqCardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CardOrderByRelevanceInput = {
    fields: CardOrderByRelevanceFieldEnum | CardOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CardCountOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    type?: SortOrder
    category_card_id?: SortOrder
    label?: SortOrder
    sub_label?: SortOrder
    referal_key?: SortOrder
    referal_link?: SortOrder
    play_with_real_money?: SortOrder
    play_for_free?: SortOrder
    terms_and_condition?: SortOrder
  }

  export type CardAvgOrderByAggregateInput = {
    id?: SortOrder
    category_card_id?: SortOrder
  }

  export type CardMaxOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    type?: SortOrder
    category_card_id?: SortOrder
    label?: SortOrder
    sub_label?: SortOrder
    referal_key?: SortOrder
    referal_link?: SortOrder
    play_with_real_money?: SortOrder
    play_for_free?: SortOrder
    terms_and_condition?: SortOrder
  }

  export type CardMinOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    type?: SortOrder
    category_card_id?: SortOrder
    label?: SortOrder
    sub_label?: SortOrder
    referal_key?: SortOrder
    referal_link?: SortOrder
    play_with_real_money?: SortOrder
    play_for_free?: SortOrder
    terms_and_condition?: SortOrder
  }

  export type CardSumOrderByAggregateInput = {
    id?: SortOrder
    category_card_id?: SortOrder
  }

  export type EnumCardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CardType | EnumCardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CardType[]
    notIn?: $Enums.CardType[]
    not?: NestedEnumCardTypeWithAggregatesFilter<$PrismaModel> | $Enums.CardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCardTypeFilter<$PrismaModel>
    _max?: NestedEnumCardTypeFilter<$PrismaModel>
  }

  export type FaqOrderByRelevanceInput = {
    fields: FaqOrderByRelevanceFieldEnum | FaqOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type FaqCountOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    position?: SortOrder
  }

  export type FaqAvgOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
  }

  export type FaqMaxOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    position?: SortOrder
  }

  export type FaqMinOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    position?: SortOrder
  }

  export type FaqSumOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
  }

  export type CardScalarRelationFilter = {
    is?: CardWhereInput
    isNot?: CardWhereInput
  }

  export type FaqScalarRelationFilter = {
    is?: FaqWhereInput
    isNot?: FaqWhereInput
  }

  export type FaqCardCountOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
    card_id?: SortOrder
    position?: SortOrder
  }

  export type FaqCardAvgOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
    card_id?: SortOrder
    position?: SortOrder
  }

  export type FaqCardMaxOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
    card_id?: SortOrder
    position?: SortOrder
  }

  export type FaqCardMinOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
    card_id?: SortOrder
    position?: SortOrder
  }

  export type FaqCardSumOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
    card_id?: SortOrder
    position?: SortOrder
  }

  export type EnumOptionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OptionType | EnumOptionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OptionType[]
    notIn?: $Enums.OptionType[]
    not?: NestedEnumOptionTypeFilter<$PrismaModel> | $Enums.OptionType
  }

  export type CasinoOptionListRelationFilter = {
    every?: CasinoOptionWhereInput
    some?: CasinoOptionWhereInput
    none?: CasinoOptionWhereInput
  }

  export type CasinoOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OptionOrderByRelevanceInput = {
    fields: OptionOrderByRelevanceFieldEnum | OptionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OptionCountOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    use_for_filter?: SortOrder
    input_type?: SortOrder
    type?: SortOrder
    label?: SortOrder
    tooltip?: SortOrder
    hash_tag?: SortOrder
    value?: SortOrder
    position?: SortOrder
  }

  export type OptionAvgOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
  }

  export type OptionMaxOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    use_for_filter?: SortOrder
    input_type?: SortOrder
    type?: SortOrder
    label?: SortOrder
    tooltip?: SortOrder
    hash_tag?: SortOrder
    value?: SortOrder
    position?: SortOrder
  }

  export type OptionMinOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    use_for_filter?: SortOrder
    input_type?: SortOrder
    type?: SortOrder
    label?: SortOrder
    tooltip?: SortOrder
    hash_tag?: SortOrder
    value?: SortOrder
    position?: SortOrder
  }

  export type OptionSumOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
  }

  export type EnumOptionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OptionType | EnumOptionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OptionType[]
    notIn?: $Enums.OptionType[]
    not?: NestedEnumOptionTypeWithAggregatesFilter<$PrismaModel> | $Enums.OptionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOptionTypeFilter<$PrismaModel>
    _max?: NestedEnumOptionTypeFilter<$PrismaModel>
  }

  export type OptionScalarRelationFilter = {
    is?: OptionWhereInput
    isNot?: OptionWhereInput
  }

  export type CardOptionOrderByRelevanceInput = {
    fields: CardOptionOrderByRelevanceFieldEnum | CardOptionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CardOptionCountOrderByAggregateInput = {
    id?: SortOrder
    option_id?: SortOrder
    card_id?: SortOrder
    value?: SortOrder
  }

  export type CardOptionAvgOrderByAggregateInput = {
    id?: SortOrder
    option_id?: SortOrder
    card_id?: SortOrder
  }

  export type CardOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    option_id?: SortOrder
    card_id?: SortOrder
    value?: SortOrder
  }

  export type CardOptionMinOrderByAggregateInput = {
    id?: SortOrder
    option_id?: SortOrder
    card_id?: SortOrder
    value?: SortOrder
  }

  export type CardOptionSumOrderByAggregateInput = {
    id?: SortOrder
    option_id?: SortOrder
    card_id?: SortOrder
  }

  export type IconCardImageListRelationFilter = {
    every?: IconCardImageWhereInput
    some?: IconCardImageWhereInput
    none?: IconCardImageWhereInput
  }

  export type IconCardImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IconCardOrderByRelevanceInput = {
    fields: IconCardOrderByRelevanceFieldEnum | IconCardOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type IconCardCountOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
  }

  export type IconCardAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IconCardMaxOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
  }

  export type IconCardMinOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
  }

  export type IconCardSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IconCardScalarRelationFilter = {
    is?: IconCardWhereInput
    isNot?: IconCardWhereInput
  }

  export type IconCardImageOrderByRelevanceInput = {
    fields: IconCardImageOrderByRelevanceFieldEnum | IconCardImageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type IconCardImageCountOrderByAggregateInput = {
    id?: SortOrder
    icon_card_id?: SortOrder
    alt?: SortOrder
    image?: SortOrder
    position?: SortOrder
  }

  export type IconCardImageAvgOrderByAggregateInput = {
    id?: SortOrder
    icon_card_id?: SortOrder
    position?: SortOrder
  }

  export type IconCardImageMaxOrderByAggregateInput = {
    id?: SortOrder
    icon_card_id?: SortOrder
    alt?: SortOrder
    image?: SortOrder
    position?: SortOrder
  }

  export type IconCardImageMinOrderByAggregateInput = {
    id?: SortOrder
    icon_card_id?: SortOrder
    alt?: SortOrder
    image?: SortOrder
    position?: SortOrder
  }

  export type IconCardImageSumOrderByAggregateInput = {
    id?: SortOrder
    icon_card_id?: SortOrder
    position?: SortOrder
  }

  export type IconCardImageScalarRelationFilter = {
    is?: IconCardImageWhereInput
    isNot?: IconCardImageWhereInput
  }

  export type CardIconImageCountOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    icon_card_image_id?: SortOrder
  }

  export type CardIconImageAvgOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    icon_card_image_id?: SortOrder
  }

  export type CardIconImageMaxOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    icon_card_image_id?: SortOrder
  }

  export type CardIconImageMinOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    icon_card_image_id?: SortOrder
  }

  export type CardIconImageSumOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    icon_card_image_id?: SortOrder
  }

  export type CardImageOrderByRelevanceInput = {
    fields: CardImageOrderByRelevanceFieldEnum | CardImageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CardImageCountOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    src?: SortOrder
  }

  export type CardImageAvgOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
  }

  export type CardImageMaxOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    src?: SortOrder
  }

  export type CardImageMinOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    src?: SortOrder
  }

  export type CardImageSumOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
  }

  export type BuildPageListRelationFilter = {
    every?: BuildPageWhereInput
    some?: BuildPageWhereInput
    none?: BuildPageWhereInput
  }

  export type BuildPageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PageOrderByRelevanceInput = {
    fields: PageOrderByRelevanceFieldEnum | PageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PageCountOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
    slug?: SortOrder
    meta_title?: SortOrder
    meta_description?: SortOrder
    meta_keywords?: SortOrder
    meta_noindex_nofollow?: SortOrder
  }

  export type PageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PageMaxOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
    slug?: SortOrder
    meta_title?: SortOrder
    meta_description?: SortOrder
    meta_keywords?: SortOrder
    meta_noindex_nofollow?: SortOrder
  }

  export type PageMinOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    label?: SortOrder
    slug?: SortOrder
    meta_title?: SortOrder
    meta_description?: SortOrder
    meta_keywords?: SortOrder
    meta_noindex_nofollow?: SortOrder
  }

  export type PageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumBuildTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BuildType | EnumBuildTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BuildType[]
    notIn?: $Enums.BuildType[]
    not?: NestedEnumBuildTypeFilter<$PrismaModel> | $Enums.BuildType
  }

  export type BuilderOrderByRelevanceInput = {
    fields: BuilderOrderByRelevanceFieldEnum | BuilderOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BuilderCountOrderByAggregateInput = {
    id?: SortOrder
    build_type?: SortOrder
    label?: SortOrder
  }

  export type BuilderAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BuilderMaxOrderByAggregateInput = {
    id?: SortOrder
    build_type?: SortOrder
    label?: SortOrder
  }

  export type BuilderMinOrderByAggregateInput = {
    id?: SortOrder
    build_type?: SortOrder
    label?: SortOrder
  }

  export type BuilderSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumBuildTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BuildType | EnumBuildTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BuildType[]
    notIn?: $Enums.BuildType[]
    not?: NestedEnumBuildTypeWithAggregatesFilter<$PrismaModel> | $Enums.BuildType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBuildTypeFilter<$PrismaModel>
    _max?: NestedEnumBuildTypeFilter<$PrismaModel>
  }

  export type BuilderScalarRelationFilter = {
    is?: BuilderWhereInput
    isNot?: BuilderWhereInput
  }

  export type PageScalarRelationFilter = {
    is?: PageWhereInput
    isNot?: PageWhereInput
  }

  export type BuildPageOrderByRelevanceInput = {
    fields: BuildPageOrderByRelevanceFieldEnum | BuildPageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BuildPageCountOrderByAggregateInput = {
    id?: SortOrder
    build_id?: SortOrder
    page_id?: SortOrder
    position?: SortOrder
    field_values?: SortOrder
    card_type?: SortOrder
  }

  export type BuildPageAvgOrderByAggregateInput = {
    id?: SortOrder
    build_id?: SortOrder
    page_id?: SortOrder
    position?: SortOrder
  }

  export type BuildPageMaxOrderByAggregateInput = {
    id?: SortOrder
    build_id?: SortOrder
    page_id?: SortOrder
    position?: SortOrder
    field_values?: SortOrder
    card_type?: SortOrder
  }

  export type BuildPageMinOrderByAggregateInput = {
    id?: SortOrder
    build_id?: SortOrder
    page_id?: SortOrder
    position?: SortOrder
    field_values?: SortOrder
    card_type?: SortOrder
  }

  export type BuildPageSumOrderByAggregateInput = {
    id?: SortOrder
    build_id?: SortOrder
    page_id?: SortOrder
    position?: SortOrder
  }

  export type CasinoOrderByRelevanceInput = {
    fields: CasinoOrderByRelevanceFieldEnum | CasinoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CasinoCountOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    name?: SortOrder
    tooltip?: SortOrder
    image?: SortOrder
    referral_key?: SortOrder
    referral_link?: SortOrder
    full_review_label?: SortOrder
    full_review_link?: SortOrder
  }

  export type CasinoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CasinoMaxOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    name?: SortOrder
    tooltip?: SortOrder
    image?: SortOrder
    referral_key?: SortOrder
    referral_link?: SortOrder
    full_review_label?: SortOrder
    full_review_link?: SortOrder
  }

  export type CasinoMinOrderByAggregateInput = {
    id?: SortOrder
    published?: SortOrder
    name?: SortOrder
    tooltip?: SortOrder
    image?: SortOrder
    referral_key?: SortOrder
    referral_link?: SortOrder
    full_review_label?: SortOrder
    full_review_link?: SortOrder
  }

  export type CasinoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CasinoScalarRelationFilter = {
    is?: CasinoWhereInput
    isNot?: CasinoWhereInput
  }

  export type CasinoOptionOrderByRelevanceInput = {
    fields: CasinoOptionOrderByRelevanceFieldEnum | CasinoOptionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CasinoOptionCountOrderByAggregateInput = {
    id?: SortOrder
    option_id?: SortOrder
    casino_id?: SortOrder
    value?: SortOrder
  }

  export type CasinoOptionAvgOrderByAggregateInput = {
    id?: SortOrder
    option_id?: SortOrder
    casino_id?: SortOrder
  }

  export type CasinoOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    option_id?: SortOrder
    casino_id?: SortOrder
    value?: SortOrder
  }

  export type CasinoOptionMinOrderByAggregateInput = {
    id?: SortOrder
    option_id?: SortOrder
    casino_id?: SortOrder
    value?: SortOrder
  }

  export type CasinoOptionSumOrderByAggregateInput = {
    id?: SortOrder
    option_id?: SortOrder
    casino_id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MenuCreateNestedOneWithoutChildrenInput = {
    create?: XOR<MenuCreateWithoutChildrenInput, MenuUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: MenuCreateOrConnectWithoutChildrenInput
    connect?: MenuWhereUniqueInput
  }

  export type MenuCreateNestedManyWithoutParentInput = {
    create?: XOR<MenuCreateWithoutParentInput, MenuUncheckedCreateWithoutParentInput> | MenuCreateWithoutParentInput[] | MenuUncheckedCreateWithoutParentInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutParentInput | MenuCreateOrConnectWithoutParentInput[]
    createMany?: MenuCreateManyParentInputEnvelope
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
  }

  export type MenuUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<MenuCreateWithoutParentInput, MenuUncheckedCreateWithoutParentInput> | MenuCreateWithoutParentInput[] | MenuUncheckedCreateWithoutParentInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutParentInput | MenuCreateOrConnectWithoutParentInput[]
    createMany?: MenuCreateManyParentInputEnvelope
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
  }

  export type EnumMenuTypeFieldUpdateOperationsInput = {
    set?: $Enums.MenuType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type MenuUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<MenuCreateWithoutChildrenInput, MenuUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: MenuCreateOrConnectWithoutChildrenInput
    upsert?: MenuUpsertWithoutChildrenInput
    disconnect?: MenuWhereInput | boolean
    delete?: MenuWhereInput | boolean
    connect?: MenuWhereUniqueInput
    update?: XOR<XOR<MenuUpdateToOneWithWhereWithoutChildrenInput, MenuUpdateWithoutChildrenInput>, MenuUncheckedUpdateWithoutChildrenInput>
  }

  export type MenuUpdateManyWithoutParentNestedInput = {
    create?: XOR<MenuCreateWithoutParentInput, MenuUncheckedCreateWithoutParentInput> | MenuCreateWithoutParentInput[] | MenuUncheckedCreateWithoutParentInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutParentInput | MenuCreateOrConnectWithoutParentInput[]
    upsert?: MenuUpsertWithWhereUniqueWithoutParentInput | MenuUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: MenuCreateManyParentInputEnvelope
    set?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    disconnect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    delete?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    update?: MenuUpdateWithWhereUniqueWithoutParentInput | MenuUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: MenuUpdateManyWithWhereWithoutParentInput | MenuUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: MenuScalarWhereInput | MenuScalarWhereInput[]
  }

  export type MenuUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<MenuCreateWithoutParentInput, MenuUncheckedCreateWithoutParentInput> | MenuCreateWithoutParentInput[] | MenuUncheckedCreateWithoutParentInput[]
    connectOrCreate?: MenuCreateOrConnectWithoutParentInput | MenuCreateOrConnectWithoutParentInput[]
    upsert?: MenuUpsertWithWhereUniqueWithoutParentInput | MenuUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: MenuCreateManyParentInputEnvelope
    set?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    disconnect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    delete?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    connect?: MenuWhereUniqueInput | MenuWhereUniqueInput[]
    update?: MenuUpdateWithWhereUniqueWithoutParentInput | MenuUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: MenuUpdateManyWithWhereWithoutParentInput | MenuUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: MenuScalarWhereInput | MenuScalarWhereInput[]
  }

  export type EnumInputTypeFieldUpdateOperationsInput = {
    set?: $Enums.InputType
  }

  export type CardCreateNestedManyWithoutCategory_cardInput = {
    create?: XOR<CardCreateWithoutCategory_cardInput, CardUncheckedCreateWithoutCategory_cardInput> | CardCreateWithoutCategory_cardInput[] | CardUncheckedCreateWithoutCategory_cardInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCategory_cardInput | CardCreateOrConnectWithoutCategory_cardInput[]
    createMany?: CardCreateManyCategory_cardInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type CardUncheckedCreateNestedManyWithoutCategory_cardInput = {
    create?: XOR<CardCreateWithoutCategory_cardInput, CardUncheckedCreateWithoutCategory_cardInput> | CardCreateWithoutCategory_cardInput[] | CardUncheckedCreateWithoutCategory_cardInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCategory_cardInput | CardCreateOrConnectWithoutCategory_cardInput[]
    createMany?: CardCreateManyCategory_cardInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type CardUpdateManyWithoutCategory_cardNestedInput = {
    create?: XOR<CardCreateWithoutCategory_cardInput, CardUncheckedCreateWithoutCategory_cardInput> | CardCreateWithoutCategory_cardInput[] | CardUncheckedCreateWithoutCategory_cardInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCategory_cardInput | CardCreateOrConnectWithoutCategory_cardInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutCategory_cardInput | CardUpsertWithWhereUniqueWithoutCategory_cardInput[]
    createMany?: CardCreateManyCategory_cardInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutCategory_cardInput | CardUpdateWithWhereUniqueWithoutCategory_cardInput[]
    updateMany?: CardUpdateManyWithWhereWithoutCategory_cardInput | CardUpdateManyWithWhereWithoutCategory_cardInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type CardUncheckedUpdateManyWithoutCategory_cardNestedInput = {
    create?: XOR<CardCreateWithoutCategory_cardInput, CardUncheckedCreateWithoutCategory_cardInput> | CardCreateWithoutCategory_cardInput[] | CardUncheckedCreateWithoutCategory_cardInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCategory_cardInput | CardCreateOrConnectWithoutCategory_cardInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutCategory_cardInput | CardUpsertWithWhereUniqueWithoutCategory_cardInput[]
    createMany?: CardCreateManyCategory_cardInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutCategory_cardInput | CardUpdateWithWhereUniqueWithoutCategory_cardInput[]
    updateMany?: CardUpdateManyWithWhereWithoutCategory_cardInput | CardUpdateManyWithWhereWithoutCategory_cardInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type CategoryCardCreateNestedOneWithoutCardsInput = {
    create?: XOR<CategoryCardCreateWithoutCardsInput, CategoryCardUncheckedCreateWithoutCardsInput>
    connectOrCreate?: CategoryCardCreateOrConnectWithoutCardsInput
    connect?: CategoryCardWhereUniqueInput
  }

  export type CardIconImageCreateNestedManyWithoutCardInput = {
    create?: XOR<CardIconImageCreateWithoutCardInput, CardIconImageUncheckedCreateWithoutCardInput> | CardIconImageCreateWithoutCardInput[] | CardIconImageUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardIconImageCreateOrConnectWithoutCardInput | CardIconImageCreateOrConnectWithoutCardInput[]
    createMany?: CardIconImageCreateManyCardInputEnvelope
    connect?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
  }

  export type CardImageCreateNestedManyWithoutCardInput = {
    create?: XOR<CardImageCreateWithoutCardInput, CardImageUncheckedCreateWithoutCardInput> | CardImageCreateWithoutCardInput[] | CardImageUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardImageCreateOrConnectWithoutCardInput | CardImageCreateOrConnectWithoutCardInput[]
    createMany?: CardImageCreateManyCardInputEnvelope
    connect?: CardImageWhereUniqueInput | CardImageWhereUniqueInput[]
  }

  export type CardOptionCreateNestedManyWithoutCardInput = {
    create?: XOR<CardOptionCreateWithoutCardInput, CardOptionUncheckedCreateWithoutCardInput> | CardOptionCreateWithoutCardInput[] | CardOptionUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardOptionCreateOrConnectWithoutCardInput | CardOptionCreateOrConnectWithoutCardInput[]
    createMany?: CardOptionCreateManyCardInputEnvelope
    connect?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
  }

  export type FaqCardCreateNestedManyWithoutCardInput = {
    create?: XOR<FaqCardCreateWithoutCardInput, FaqCardUncheckedCreateWithoutCardInput> | FaqCardCreateWithoutCardInput[] | FaqCardUncheckedCreateWithoutCardInput[]
    connectOrCreate?: FaqCardCreateOrConnectWithoutCardInput | FaqCardCreateOrConnectWithoutCardInput[]
    createMany?: FaqCardCreateManyCardInputEnvelope
    connect?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
  }

  export type CardIconImageUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<CardIconImageCreateWithoutCardInput, CardIconImageUncheckedCreateWithoutCardInput> | CardIconImageCreateWithoutCardInput[] | CardIconImageUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardIconImageCreateOrConnectWithoutCardInput | CardIconImageCreateOrConnectWithoutCardInput[]
    createMany?: CardIconImageCreateManyCardInputEnvelope
    connect?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
  }

  export type CardImageUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<CardImageCreateWithoutCardInput, CardImageUncheckedCreateWithoutCardInput> | CardImageCreateWithoutCardInput[] | CardImageUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardImageCreateOrConnectWithoutCardInput | CardImageCreateOrConnectWithoutCardInput[]
    createMany?: CardImageCreateManyCardInputEnvelope
    connect?: CardImageWhereUniqueInput | CardImageWhereUniqueInput[]
  }

  export type CardOptionUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<CardOptionCreateWithoutCardInput, CardOptionUncheckedCreateWithoutCardInput> | CardOptionCreateWithoutCardInput[] | CardOptionUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardOptionCreateOrConnectWithoutCardInput | CardOptionCreateOrConnectWithoutCardInput[]
    createMany?: CardOptionCreateManyCardInputEnvelope
    connect?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
  }

  export type FaqCardUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<FaqCardCreateWithoutCardInput, FaqCardUncheckedCreateWithoutCardInput> | FaqCardCreateWithoutCardInput[] | FaqCardUncheckedCreateWithoutCardInput[]
    connectOrCreate?: FaqCardCreateOrConnectWithoutCardInput | FaqCardCreateOrConnectWithoutCardInput[]
    createMany?: FaqCardCreateManyCardInputEnvelope
    connect?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
  }

  export type EnumCardTypeFieldUpdateOperationsInput = {
    set?: $Enums.CardType
  }

  export type CategoryCardUpdateOneWithoutCardsNestedInput = {
    create?: XOR<CategoryCardCreateWithoutCardsInput, CategoryCardUncheckedCreateWithoutCardsInput>
    connectOrCreate?: CategoryCardCreateOrConnectWithoutCardsInput
    upsert?: CategoryCardUpsertWithoutCardsInput
    disconnect?: CategoryCardWhereInput | boolean
    delete?: CategoryCardWhereInput | boolean
    connect?: CategoryCardWhereUniqueInput
    update?: XOR<XOR<CategoryCardUpdateToOneWithWhereWithoutCardsInput, CategoryCardUpdateWithoutCardsInput>, CategoryCardUncheckedUpdateWithoutCardsInput>
  }

  export type CardIconImageUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardIconImageCreateWithoutCardInput, CardIconImageUncheckedCreateWithoutCardInput> | CardIconImageCreateWithoutCardInput[] | CardIconImageUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardIconImageCreateOrConnectWithoutCardInput | CardIconImageCreateOrConnectWithoutCardInput[]
    upsert?: CardIconImageUpsertWithWhereUniqueWithoutCardInput | CardIconImageUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardIconImageCreateManyCardInputEnvelope
    set?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    disconnect?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    delete?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    connect?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    update?: CardIconImageUpdateWithWhereUniqueWithoutCardInput | CardIconImageUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardIconImageUpdateManyWithWhereWithoutCardInput | CardIconImageUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardIconImageScalarWhereInput | CardIconImageScalarWhereInput[]
  }

  export type CardImageUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardImageCreateWithoutCardInput, CardImageUncheckedCreateWithoutCardInput> | CardImageCreateWithoutCardInput[] | CardImageUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardImageCreateOrConnectWithoutCardInput | CardImageCreateOrConnectWithoutCardInput[]
    upsert?: CardImageUpsertWithWhereUniqueWithoutCardInput | CardImageUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardImageCreateManyCardInputEnvelope
    set?: CardImageWhereUniqueInput | CardImageWhereUniqueInput[]
    disconnect?: CardImageWhereUniqueInput | CardImageWhereUniqueInput[]
    delete?: CardImageWhereUniqueInput | CardImageWhereUniqueInput[]
    connect?: CardImageWhereUniqueInput | CardImageWhereUniqueInput[]
    update?: CardImageUpdateWithWhereUniqueWithoutCardInput | CardImageUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardImageUpdateManyWithWhereWithoutCardInput | CardImageUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardImageScalarWhereInput | CardImageScalarWhereInput[]
  }

  export type CardOptionUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardOptionCreateWithoutCardInput, CardOptionUncheckedCreateWithoutCardInput> | CardOptionCreateWithoutCardInput[] | CardOptionUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardOptionCreateOrConnectWithoutCardInput | CardOptionCreateOrConnectWithoutCardInput[]
    upsert?: CardOptionUpsertWithWhereUniqueWithoutCardInput | CardOptionUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardOptionCreateManyCardInputEnvelope
    set?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    disconnect?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    delete?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    connect?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    update?: CardOptionUpdateWithWhereUniqueWithoutCardInput | CardOptionUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardOptionUpdateManyWithWhereWithoutCardInput | CardOptionUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardOptionScalarWhereInput | CardOptionScalarWhereInput[]
  }

  export type FaqCardUpdateManyWithoutCardNestedInput = {
    create?: XOR<FaqCardCreateWithoutCardInput, FaqCardUncheckedCreateWithoutCardInput> | FaqCardCreateWithoutCardInput[] | FaqCardUncheckedCreateWithoutCardInput[]
    connectOrCreate?: FaqCardCreateOrConnectWithoutCardInput | FaqCardCreateOrConnectWithoutCardInput[]
    upsert?: FaqCardUpsertWithWhereUniqueWithoutCardInput | FaqCardUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: FaqCardCreateManyCardInputEnvelope
    set?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    disconnect?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    delete?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    connect?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    update?: FaqCardUpdateWithWhereUniqueWithoutCardInput | FaqCardUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: FaqCardUpdateManyWithWhereWithoutCardInput | FaqCardUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: FaqCardScalarWhereInput | FaqCardScalarWhereInput[]
  }

  export type CardIconImageUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardIconImageCreateWithoutCardInput, CardIconImageUncheckedCreateWithoutCardInput> | CardIconImageCreateWithoutCardInput[] | CardIconImageUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardIconImageCreateOrConnectWithoutCardInput | CardIconImageCreateOrConnectWithoutCardInput[]
    upsert?: CardIconImageUpsertWithWhereUniqueWithoutCardInput | CardIconImageUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardIconImageCreateManyCardInputEnvelope
    set?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    disconnect?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    delete?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    connect?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    update?: CardIconImageUpdateWithWhereUniqueWithoutCardInput | CardIconImageUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardIconImageUpdateManyWithWhereWithoutCardInput | CardIconImageUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardIconImageScalarWhereInput | CardIconImageScalarWhereInput[]
  }

  export type CardImageUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardImageCreateWithoutCardInput, CardImageUncheckedCreateWithoutCardInput> | CardImageCreateWithoutCardInput[] | CardImageUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardImageCreateOrConnectWithoutCardInput | CardImageCreateOrConnectWithoutCardInput[]
    upsert?: CardImageUpsertWithWhereUniqueWithoutCardInput | CardImageUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardImageCreateManyCardInputEnvelope
    set?: CardImageWhereUniqueInput | CardImageWhereUniqueInput[]
    disconnect?: CardImageWhereUniqueInput | CardImageWhereUniqueInput[]
    delete?: CardImageWhereUniqueInput | CardImageWhereUniqueInput[]
    connect?: CardImageWhereUniqueInput | CardImageWhereUniqueInput[]
    update?: CardImageUpdateWithWhereUniqueWithoutCardInput | CardImageUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardImageUpdateManyWithWhereWithoutCardInput | CardImageUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardImageScalarWhereInput | CardImageScalarWhereInput[]
  }

  export type CardOptionUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardOptionCreateWithoutCardInput, CardOptionUncheckedCreateWithoutCardInput> | CardOptionCreateWithoutCardInput[] | CardOptionUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardOptionCreateOrConnectWithoutCardInput | CardOptionCreateOrConnectWithoutCardInput[]
    upsert?: CardOptionUpsertWithWhereUniqueWithoutCardInput | CardOptionUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardOptionCreateManyCardInputEnvelope
    set?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    disconnect?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    delete?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    connect?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    update?: CardOptionUpdateWithWhereUniqueWithoutCardInput | CardOptionUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardOptionUpdateManyWithWhereWithoutCardInput | CardOptionUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardOptionScalarWhereInput | CardOptionScalarWhereInput[]
  }

  export type FaqCardUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<FaqCardCreateWithoutCardInput, FaqCardUncheckedCreateWithoutCardInput> | FaqCardCreateWithoutCardInput[] | FaqCardUncheckedCreateWithoutCardInput[]
    connectOrCreate?: FaqCardCreateOrConnectWithoutCardInput | FaqCardCreateOrConnectWithoutCardInput[]
    upsert?: FaqCardUpsertWithWhereUniqueWithoutCardInput | FaqCardUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: FaqCardCreateManyCardInputEnvelope
    set?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    disconnect?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    delete?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    connect?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    update?: FaqCardUpdateWithWhereUniqueWithoutCardInput | FaqCardUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: FaqCardUpdateManyWithWhereWithoutCardInput | FaqCardUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: FaqCardScalarWhereInput | FaqCardScalarWhereInput[]
  }

  export type FaqCardCreateNestedManyWithoutFaqInput = {
    create?: XOR<FaqCardCreateWithoutFaqInput, FaqCardUncheckedCreateWithoutFaqInput> | FaqCardCreateWithoutFaqInput[] | FaqCardUncheckedCreateWithoutFaqInput[]
    connectOrCreate?: FaqCardCreateOrConnectWithoutFaqInput | FaqCardCreateOrConnectWithoutFaqInput[]
    createMany?: FaqCardCreateManyFaqInputEnvelope
    connect?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
  }

  export type FaqCardUncheckedCreateNestedManyWithoutFaqInput = {
    create?: XOR<FaqCardCreateWithoutFaqInput, FaqCardUncheckedCreateWithoutFaqInput> | FaqCardCreateWithoutFaqInput[] | FaqCardUncheckedCreateWithoutFaqInput[]
    connectOrCreate?: FaqCardCreateOrConnectWithoutFaqInput | FaqCardCreateOrConnectWithoutFaqInput[]
    createMany?: FaqCardCreateManyFaqInputEnvelope
    connect?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
  }

  export type FaqCardUpdateManyWithoutFaqNestedInput = {
    create?: XOR<FaqCardCreateWithoutFaqInput, FaqCardUncheckedCreateWithoutFaqInput> | FaqCardCreateWithoutFaqInput[] | FaqCardUncheckedCreateWithoutFaqInput[]
    connectOrCreate?: FaqCardCreateOrConnectWithoutFaqInput | FaqCardCreateOrConnectWithoutFaqInput[]
    upsert?: FaqCardUpsertWithWhereUniqueWithoutFaqInput | FaqCardUpsertWithWhereUniqueWithoutFaqInput[]
    createMany?: FaqCardCreateManyFaqInputEnvelope
    set?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    disconnect?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    delete?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    connect?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    update?: FaqCardUpdateWithWhereUniqueWithoutFaqInput | FaqCardUpdateWithWhereUniqueWithoutFaqInput[]
    updateMany?: FaqCardUpdateManyWithWhereWithoutFaqInput | FaqCardUpdateManyWithWhereWithoutFaqInput[]
    deleteMany?: FaqCardScalarWhereInput | FaqCardScalarWhereInput[]
  }

  export type FaqCardUncheckedUpdateManyWithoutFaqNestedInput = {
    create?: XOR<FaqCardCreateWithoutFaqInput, FaqCardUncheckedCreateWithoutFaqInput> | FaqCardCreateWithoutFaqInput[] | FaqCardUncheckedCreateWithoutFaqInput[]
    connectOrCreate?: FaqCardCreateOrConnectWithoutFaqInput | FaqCardCreateOrConnectWithoutFaqInput[]
    upsert?: FaqCardUpsertWithWhereUniqueWithoutFaqInput | FaqCardUpsertWithWhereUniqueWithoutFaqInput[]
    createMany?: FaqCardCreateManyFaqInputEnvelope
    set?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    disconnect?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    delete?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    connect?: FaqCardWhereUniqueInput | FaqCardWhereUniqueInput[]
    update?: FaqCardUpdateWithWhereUniqueWithoutFaqInput | FaqCardUpdateWithWhereUniqueWithoutFaqInput[]
    updateMany?: FaqCardUpdateManyWithWhereWithoutFaqInput | FaqCardUpdateManyWithWhereWithoutFaqInput[]
    deleteMany?: FaqCardScalarWhereInput | FaqCardScalarWhereInput[]
  }

  export type CardCreateNestedOneWithoutFaqsInput = {
    create?: XOR<CardCreateWithoutFaqsInput, CardUncheckedCreateWithoutFaqsInput>
    connectOrCreate?: CardCreateOrConnectWithoutFaqsInput
    connect?: CardWhereUniqueInput
  }

  export type FaqCreateNestedOneWithoutCardsInput = {
    create?: XOR<FaqCreateWithoutCardsInput, FaqUncheckedCreateWithoutCardsInput>
    connectOrCreate?: FaqCreateOrConnectWithoutCardsInput
    connect?: FaqWhereUniqueInput
  }

  export type CardUpdateOneRequiredWithoutFaqsNestedInput = {
    create?: XOR<CardCreateWithoutFaqsInput, CardUncheckedCreateWithoutFaqsInput>
    connectOrCreate?: CardCreateOrConnectWithoutFaqsInput
    upsert?: CardUpsertWithoutFaqsInput
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutFaqsInput, CardUpdateWithoutFaqsInput>, CardUncheckedUpdateWithoutFaqsInput>
  }

  export type FaqUpdateOneRequiredWithoutCardsNestedInput = {
    create?: XOR<FaqCreateWithoutCardsInput, FaqUncheckedCreateWithoutCardsInput>
    connectOrCreate?: FaqCreateOrConnectWithoutCardsInput
    upsert?: FaqUpsertWithoutCardsInput
    connect?: FaqWhereUniqueInput
    update?: XOR<XOR<FaqUpdateToOneWithWhereWithoutCardsInput, FaqUpdateWithoutCardsInput>, FaqUncheckedUpdateWithoutCardsInput>
  }

  export type CardOptionCreateNestedManyWithoutEntityInput = {
    create?: XOR<CardOptionCreateWithoutEntityInput, CardOptionUncheckedCreateWithoutEntityInput> | CardOptionCreateWithoutEntityInput[] | CardOptionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: CardOptionCreateOrConnectWithoutEntityInput | CardOptionCreateOrConnectWithoutEntityInput[]
    createMany?: CardOptionCreateManyEntityInputEnvelope
    connect?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
  }

  export type CasinoOptionCreateNestedManyWithoutEntityInput = {
    create?: XOR<CasinoOptionCreateWithoutEntityInput, CasinoOptionUncheckedCreateWithoutEntityInput> | CasinoOptionCreateWithoutEntityInput[] | CasinoOptionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: CasinoOptionCreateOrConnectWithoutEntityInput | CasinoOptionCreateOrConnectWithoutEntityInput[]
    createMany?: CasinoOptionCreateManyEntityInputEnvelope
    connect?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
  }

  export type CardOptionUncheckedCreateNestedManyWithoutEntityInput = {
    create?: XOR<CardOptionCreateWithoutEntityInput, CardOptionUncheckedCreateWithoutEntityInput> | CardOptionCreateWithoutEntityInput[] | CardOptionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: CardOptionCreateOrConnectWithoutEntityInput | CardOptionCreateOrConnectWithoutEntityInput[]
    createMany?: CardOptionCreateManyEntityInputEnvelope
    connect?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
  }

  export type CasinoOptionUncheckedCreateNestedManyWithoutEntityInput = {
    create?: XOR<CasinoOptionCreateWithoutEntityInput, CasinoOptionUncheckedCreateWithoutEntityInput> | CasinoOptionCreateWithoutEntityInput[] | CasinoOptionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: CasinoOptionCreateOrConnectWithoutEntityInput | CasinoOptionCreateOrConnectWithoutEntityInput[]
    createMany?: CasinoOptionCreateManyEntityInputEnvelope
    connect?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
  }

  export type EnumOptionTypeFieldUpdateOperationsInput = {
    set?: $Enums.OptionType
  }

  export type CardOptionUpdateManyWithoutEntityNestedInput = {
    create?: XOR<CardOptionCreateWithoutEntityInput, CardOptionUncheckedCreateWithoutEntityInput> | CardOptionCreateWithoutEntityInput[] | CardOptionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: CardOptionCreateOrConnectWithoutEntityInput | CardOptionCreateOrConnectWithoutEntityInput[]
    upsert?: CardOptionUpsertWithWhereUniqueWithoutEntityInput | CardOptionUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: CardOptionCreateManyEntityInputEnvelope
    set?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    disconnect?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    delete?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    connect?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    update?: CardOptionUpdateWithWhereUniqueWithoutEntityInput | CardOptionUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: CardOptionUpdateManyWithWhereWithoutEntityInput | CardOptionUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: CardOptionScalarWhereInput | CardOptionScalarWhereInput[]
  }

  export type CasinoOptionUpdateManyWithoutEntityNestedInput = {
    create?: XOR<CasinoOptionCreateWithoutEntityInput, CasinoOptionUncheckedCreateWithoutEntityInput> | CasinoOptionCreateWithoutEntityInput[] | CasinoOptionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: CasinoOptionCreateOrConnectWithoutEntityInput | CasinoOptionCreateOrConnectWithoutEntityInput[]
    upsert?: CasinoOptionUpsertWithWhereUniqueWithoutEntityInput | CasinoOptionUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: CasinoOptionCreateManyEntityInputEnvelope
    set?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    disconnect?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    delete?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    connect?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    update?: CasinoOptionUpdateWithWhereUniqueWithoutEntityInput | CasinoOptionUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: CasinoOptionUpdateManyWithWhereWithoutEntityInput | CasinoOptionUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: CasinoOptionScalarWhereInput | CasinoOptionScalarWhereInput[]
  }

  export type CardOptionUncheckedUpdateManyWithoutEntityNestedInput = {
    create?: XOR<CardOptionCreateWithoutEntityInput, CardOptionUncheckedCreateWithoutEntityInput> | CardOptionCreateWithoutEntityInput[] | CardOptionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: CardOptionCreateOrConnectWithoutEntityInput | CardOptionCreateOrConnectWithoutEntityInput[]
    upsert?: CardOptionUpsertWithWhereUniqueWithoutEntityInput | CardOptionUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: CardOptionCreateManyEntityInputEnvelope
    set?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    disconnect?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    delete?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    connect?: CardOptionWhereUniqueInput | CardOptionWhereUniqueInput[]
    update?: CardOptionUpdateWithWhereUniqueWithoutEntityInput | CardOptionUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: CardOptionUpdateManyWithWhereWithoutEntityInput | CardOptionUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: CardOptionScalarWhereInput | CardOptionScalarWhereInput[]
  }

  export type CasinoOptionUncheckedUpdateManyWithoutEntityNestedInput = {
    create?: XOR<CasinoOptionCreateWithoutEntityInput, CasinoOptionUncheckedCreateWithoutEntityInput> | CasinoOptionCreateWithoutEntityInput[] | CasinoOptionUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: CasinoOptionCreateOrConnectWithoutEntityInput | CasinoOptionCreateOrConnectWithoutEntityInput[]
    upsert?: CasinoOptionUpsertWithWhereUniqueWithoutEntityInput | CasinoOptionUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: CasinoOptionCreateManyEntityInputEnvelope
    set?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    disconnect?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    delete?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    connect?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    update?: CasinoOptionUpdateWithWhereUniqueWithoutEntityInput | CasinoOptionUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: CasinoOptionUpdateManyWithWhereWithoutEntityInput | CasinoOptionUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: CasinoOptionScalarWhereInput | CasinoOptionScalarWhereInput[]
  }

  export type CardCreateNestedOneWithoutOptionsInput = {
    create?: XOR<CardCreateWithoutOptionsInput, CardUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: CardCreateOrConnectWithoutOptionsInput
    connect?: CardWhereUniqueInput
  }

  export type OptionCreateNestedOneWithoutCard_optionsInput = {
    create?: XOR<OptionCreateWithoutCard_optionsInput, OptionUncheckedCreateWithoutCard_optionsInput>
    connectOrCreate?: OptionCreateOrConnectWithoutCard_optionsInput
    connect?: OptionWhereUniqueInput
  }

  export type CardUpdateOneRequiredWithoutOptionsNestedInput = {
    create?: XOR<CardCreateWithoutOptionsInput, CardUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: CardCreateOrConnectWithoutOptionsInput
    upsert?: CardUpsertWithoutOptionsInput
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutOptionsInput, CardUpdateWithoutOptionsInput>, CardUncheckedUpdateWithoutOptionsInput>
  }

  export type OptionUpdateOneRequiredWithoutCard_optionsNestedInput = {
    create?: XOR<OptionCreateWithoutCard_optionsInput, OptionUncheckedCreateWithoutCard_optionsInput>
    connectOrCreate?: OptionCreateOrConnectWithoutCard_optionsInput
    upsert?: OptionUpsertWithoutCard_optionsInput
    connect?: OptionWhereUniqueInput
    update?: XOR<XOR<OptionUpdateToOneWithWhereWithoutCard_optionsInput, OptionUpdateWithoutCard_optionsInput>, OptionUncheckedUpdateWithoutCard_optionsInput>
  }

  export type IconCardImageCreateNestedManyWithoutIcon_cardInput = {
    create?: XOR<IconCardImageCreateWithoutIcon_cardInput, IconCardImageUncheckedCreateWithoutIcon_cardInput> | IconCardImageCreateWithoutIcon_cardInput[] | IconCardImageUncheckedCreateWithoutIcon_cardInput[]
    connectOrCreate?: IconCardImageCreateOrConnectWithoutIcon_cardInput | IconCardImageCreateOrConnectWithoutIcon_cardInput[]
    createMany?: IconCardImageCreateManyIcon_cardInputEnvelope
    connect?: IconCardImageWhereUniqueInput | IconCardImageWhereUniqueInput[]
  }

  export type IconCardImageUncheckedCreateNestedManyWithoutIcon_cardInput = {
    create?: XOR<IconCardImageCreateWithoutIcon_cardInput, IconCardImageUncheckedCreateWithoutIcon_cardInput> | IconCardImageCreateWithoutIcon_cardInput[] | IconCardImageUncheckedCreateWithoutIcon_cardInput[]
    connectOrCreate?: IconCardImageCreateOrConnectWithoutIcon_cardInput | IconCardImageCreateOrConnectWithoutIcon_cardInput[]
    createMany?: IconCardImageCreateManyIcon_cardInputEnvelope
    connect?: IconCardImageWhereUniqueInput | IconCardImageWhereUniqueInput[]
  }

  export type IconCardImageUpdateManyWithoutIcon_cardNestedInput = {
    create?: XOR<IconCardImageCreateWithoutIcon_cardInput, IconCardImageUncheckedCreateWithoutIcon_cardInput> | IconCardImageCreateWithoutIcon_cardInput[] | IconCardImageUncheckedCreateWithoutIcon_cardInput[]
    connectOrCreate?: IconCardImageCreateOrConnectWithoutIcon_cardInput | IconCardImageCreateOrConnectWithoutIcon_cardInput[]
    upsert?: IconCardImageUpsertWithWhereUniqueWithoutIcon_cardInput | IconCardImageUpsertWithWhereUniqueWithoutIcon_cardInput[]
    createMany?: IconCardImageCreateManyIcon_cardInputEnvelope
    set?: IconCardImageWhereUniqueInput | IconCardImageWhereUniqueInput[]
    disconnect?: IconCardImageWhereUniqueInput | IconCardImageWhereUniqueInput[]
    delete?: IconCardImageWhereUniqueInput | IconCardImageWhereUniqueInput[]
    connect?: IconCardImageWhereUniqueInput | IconCardImageWhereUniqueInput[]
    update?: IconCardImageUpdateWithWhereUniqueWithoutIcon_cardInput | IconCardImageUpdateWithWhereUniqueWithoutIcon_cardInput[]
    updateMany?: IconCardImageUpdateManyWithWhereWithoutIcon_cardInput | IconCardImageUpdateManyWithWhereWithoutIcon_cardInput[]
    deleteMany?: IconCardImageScalarWhereInput | IconCardImageScalarWhereInput[]
  }

  export type IconCardImageUncheckedUpdateManyWithoutIcon_cardNestedInput = {
    create?: XOR<IconCardImageCreateWithoutIcon_cardInput, IconCardImageUncheckedCreateWithoutIcon_cardInput> | IconCardImageCreateWithoutIcon_cardInput[] | IconCardImageUncheckedCreateWithoutIcon_cardInput[]
    connectOrCreate?: IconCardImageCreateOrConnectWithoutIcon_cardInput | IconCardImageCreateOrConnectWithoutIcon_cardInput[]
    upsert?: IconCardImageUpsertWithWhereUniqueWithoutIcon_cardInput | IconCardImageUpsertWithWhereUniqueWithoutIcon_cardInput[]
    createMany?: IconCardImageCreateManyIcon_cardInputEnvelope
    set?: IconCardImageWhereUniqueInput | IconCardImageWhereUniqueInput[]
    disconnect?: IconCardImageWhereUniqueInput | IconCardImageWhereUniqueInput[]
    delete?: IconCardImageWhereUniqueInput | IconCardImageWhereUniqueInput[]
    connect?: IconCardImageWhereUniqueInput | IconCardImageWhereUniqueInput[]
    update?: IconCardImageUpdateWithWhereUniqueWithoutIcon_cardInput | IconCardImageUpdateWithWhereUniqueWithoutIcon_cardInput[]
    updateMany?: IconCardImageUpdateManyWithWhereWithoutIcon_cardInput | IconCardImageUpdateManyWithWhereWithoutIcon_cardInput[]
    deleteMany?: IconCardImageScalarWhereInput | IconCardImageScalarWhereInput[]
  }

  export type IconCardCreateNestedOneWithoutImagesInput = {
    create?: XOR<IconCardCreateWithoutImagesInput, IconCardUncheckedCreateWithoutImagesInput>
    connectOrCreate?: IconCardCreateOrConnectWithoutImagesInput
    connect?: IconCardWhereUniqueInput
  }

  export type CardIconImageCreateNestedManyWithoutIcon_card_imageInput = {
    create?: XOR<CardIconImageCreateWithoutIcon_card_imageInput, CardIconImageUncheckedCreateWithoutIcon_card_imageInput> | CardIconImageCreateWithoutIcon_card_imageInput[] | CardIconImageUncheckedCreateWithoutIcon_card_imageInput[]
    connectOrCreate?: CardIconImageCreateOrConnectWithoutIcon_card_imageInput | CardIconImageCreateOrConnectWithoutIcon_card_imageInput[]
    createMany?: CardIconImageCreateManyIcon_card_imageInputEnvelope
    connect?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
  }

  export type CardIconImageUncheckedCreateNestedManyWithoutIcon_card_imageInput = {
    create?: XOR<CardIconImageCreateWithoutIcon_card_imageInput, CardIconImageUncheckedCreateWithoutIcon_card_imageInput> | CardIconImageCreateWithoutIcon_card_imageInput[] | CardIconImageUncheckedCreateWithoutIcon_card_imageInput[]
    connectOrCreate?: CardIconImageCreateOrConnectWithoutIcon_card_imageInput | CardIconImageCreateOrConnectWithoutIcon_card_imageInput[]
    createMany?: CardIconImageCreateManyIcon_card_imageInputEnvelope
    connect?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
  }

  export type IconCardUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<IconCardCreateWithoutImagesInput, IconCardUncheckedCreateWithoutImagesInput>
    connectOrCreate?: IconCardCreateOrConnectWithoutImagesInput
    upsert?: IconCardUpsertWithoutImagesInput
    connect?: IconCardWhereUniqueInput
    update?: XOR<XOR<IconCardUpdateToOneWithWhereWithoutImagesInput, IconCardUpdateWithoutImagesInput>, IconCardUncheckedUpdateWithoutImagesInput>
  }

  export type CardIconImageUpdateManyWithoutIcon_card_imageNestedInput = {
    create?: XOR<CardIconImageCreateWithoutIcon_card_imageInput, CardIconImageUncheckedCreateWithoutIcon_card_imageInput> | CardIconImageCreateWithoutIcon_card_imageInput[] | CardIconImageUncheckedCreateWithoutIcon_card_imageInput[]
    connectOrCreate?: CardIconImageCreateOrConnectWithoutIcon_card_imageInput | CardIconImageCreateOrConnectWithoutIcon_card_imageInput[]
    upsert?: CardIconImageUpsertWithWhereUniqueWithoutIcon_card_imageInput | CardIconImageUpsertWithWhereUniqueWithoutIcon_card_imageInput[]
    createMany?: CardIconImageCreateManyIcon_card_imageInputEnvelope
    set?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    disconnect?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    delete?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    connect?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    update?: CardIconImageUpdateWithWhereUniqueWithoutIcon_card_imageInput | CardIconImageUpdateWithWhereUniqueWithoutIcon_card_imageInput[]
    updateMany?: CardIconImageUpdateManyWithWhereWithoutIcon_card_imageInput | CardIconImageUpdateManyWithWhereWithoutIcon_card_imageInput[]
    deleteMany?: CardIconImageScalarWhereInput | CardIconImageScalarWhereInput[]
  }

  export type CardIconImageUncheckedUpdateManyWithoutIcon_card_imageNestedInput = {
    create?: XOR<CardIconImageCreateWithoutIcon_card_imageInput, CardIconImageUncheckedCreateWithoutIcon_card_imageInput> | CardIconImageCreateWithoutIcon_card_imageInput[] | CardIconImageUncheckedCreateWithoutIcon_card_imageInput[]
    connectOrCreate?: CardIconImageCreateOrConnectWithoutIcon_card_imageInput | CardIconImageCreateOrConnectWithoutIcon_card_imageInput[]
    upsert?: CardIconImageUpsertWithWhereUniqueWithoutIcon_card_imageInput | CardIconImageUpsertWithWhereUniqueWithoutIcon_card_imageInput[]
    createMany?: CardIconImageCreateManyIcon_card_imageInputEnvelope
    set?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    disconnect?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    delete?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    connect?: CardIconImageWhereUniqueInput | CardIconImageWhereUniqueInput[]
    update?: CardIconImageUpdateWithWhereUniqueWithoutIcon_card_imageInput | CardIconImageUpdateWithWhereUniqueWithoutIcon_card_imageInput[]
    updateMany?: CardIconImageUpdateManyWithWhereWithoutIcon_card_imageInput | CardIconImageUpdateManyWithWhereWithoutIcon_card_imageInput[]
    deleteMany?: CardIconImageScalarWhereInput | CardIconImageScalarWhereInput[]
  }

  export type CardCreateNestedOneWithoutIcon_card_imagesInput = {
    create?: XOR<CardCreateWithoutIcon_card_imagesInput, CardUncheckedCreateWithoutIcon_card_imagesInput>
    connectOrCreate?: CardCreateOrConnectWithoutIcon_card_imagesInput
    connect?: CardWhereUniqueInput
  }

  export type IconCardImageCreateNestedOneWithoutCardsInput = {
    create?: XOR<IconCardImageCreateWithoutCardsInput, IconCardImageUncheckedCreateWithoutCardsInput>
    connectOrCreate?: IconCardImageCreateOrConnectWithoutCardsInput
    connect?: IconCardImageWhereUniqueInput
  }

  export type CardUpdateOneRequiredWithoutIcon_card_imagesNestedInput = {
    create?: XOR<CardCreateWithoutIcon_card_imagesInput, CardUncheckedCreateWithoutIcon_card_imagesInput>
    connectOrCreate?: CardCreateOrConnectWithoutIcon_card_imagesInput
    upsert?: CardUpsertWithoutIcon_card_imagesInput
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutIcon_card_imagesInput, CardUpdateWithoutIcon_card_imagesInput>, CardUncheckedUpdateWithoutIcon_card_imagesInput>
  }

  export type IconCardImageUpdateOneRequiredWithoutCardsNestedInput = {
    create?: XOR<IconCardImageCreateWithoutCardsInput, IconCardImageUncheckedCreateWithoutCardsInput>
    connectOrCreate?: IconCardImageCreateOrConnectWithoutCardsInput
    upsert?: IconCardImageUpsertWithoutCardsInput
    connect?: IconCardImageWhereUniqueInput
    update?: XOR<XOR<IconCardImageUpdateToOneWithWhereWithoutCardsInput, IconCardImageUpdateWithoutCardsInput>, IconCardImageUncheckedUpdateWithoutCardsInput>
  }

  export type CardCreateNestedOneWithoutImagesInput = {
    create?: XOR<CardCreateWithoutImagesInput, CardUncheckedCreateWithoutImagesInput>
    connectOrCreate?: CardCreateOrConnectWithoutImagesInput
    connect?: CardWhereUniqueInput
  }

  export type CardUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<CardCreateWithoutImagesInput, CardUncheckedCreateWithoutImagesInput>
    connectOrCreate?: CardCreateOrConnectWithoutImagesInput
    upsert?: CardUpsertWithoutImagesInput
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutImagesInput, CardUpdateWithoutImagesInput>, CardUncheckedUpdateWithoutImagesInput>
  }

  export type BuildPageCreateNestedManyWithoutPageInput = {
    create?: XOR<BuildPageCreateWithoutPageInput, BuildPageUncheckedCreateWithoutPageInput> | BuildPageCreateWithoutPageInput[] | BuildPageUncheckedCreateWithoutPageInput[]
    connectOrCreate?: BuildPageCreateOrConnectWithoutPageInput | BuildPageCreateOrConnectWithoutPageInput[]
    createMany?: BuildPageCreateManyPageInputEnvelope
    connect?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
  }

  export type BuildPageUncheckedCreateNestedManyWithoutPageInput = {
    create?: XOR<BuildPageCreateWithoutPageInput, BuildPageUncheckedCreateWithoutPageInput> | BuildPageCreateWithoutPageInput[] | BuildPageUncheckedCreateWithoutPageInput[]
    connectOrCreate?: BuildPageCreateOrConnectWithoutPageInput | BuildPageCreateOrConnectWithoutPageInput[]
    createMany?: BuildPageCreateManyPageInputEnvelope
    connect?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
  }

  export type BuildPageUpdateManyWithoutPageNestedInput = {
    create?: XOR<BuildPageCreateWithoutPageInput, BuildPageUncheckedCreateWithoutPageInput> | BuildPageCreateWithoutPageInput[] | BuildPageUncheckedCreateWithoutPageInput[]
    connectOrCreate?: BuildPageCreateOrConnectWithoutPageInput | BuildPageCreateOrConnectWithoutPageInput[]
    upsert?: BuildPageUpsertWithWhereUniqueWithoutPageInput | BuildPageUpsertWithWhereUniqueWithoutPageInput[]
    createMany?: BuildPageCreateManyPageInputEnvelope
    set?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    disconnect?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    delete?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    connect?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    update?: BuildPageUpdateWithWhereUniqueWithoutPageInput | BuildPageUpdateWithWhereUniqueWithoutPageInput[]
    updateMany?: BuildPageUpdateManyWithWhereWithoutPageInput | BuildPageUpdateManyWithWhereWithoutPageInput[]
    deleteMany?: BuildPageScalarWhereInput | BuildPageScalarWhereInput[]
  }

  export type BuildPageUncheckedUpdateManyWithoutPageNestedInput = {
    create?: XOR<BuildPageCreateWithoutPageInput, BuildPageUncheckedCreateWithoutPageInput> | BuildPageCreateWithoutPageInput[] | BuildPageUncheckedCreateWithoutPageInput[]
    connectOrCreate?: BuildPageCreateOrConnectWithoutPageInput | BuildPageCreateOrConnectWithoutPageInput[]
    upsert?: BuildPageUpsertWithWhereUniqueWithoutPageInput | BuildPageUpsertWithWhereUniqueWithoutPageInput[]
    createMany?: BuildPageCreateManyPageInputEnvelope
    set?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    disconnect?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    delete?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    connect?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    update?: BuildPageUpdateWithWhereUniqueWithoutPageInput | BuildPageUpdateWithWhereUniqueWithoutPageInput[]
    updateMany?: BuildPageUpdateManyWithWhereWithoutPageInput | BuildPageUpdateManyWithWhereWithoutPageInput[]
    deleteMany?: BuildPageScalarWhereInput | BuildPageScalarWhereInput[]
  }

  export type BuildPageCreateNestedManyWithoutBuildInput = {
    create?: XOR<BuildPageCreateWithoutBuildInput, BuildPageUncheckedCreateWithoutBuildInput> | BuildPageCreateWithoutBuildInput[] | BuildPageUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: BuildPageCreateOrConnectWithoutBuildInput | BuildPageCreateOrConnectWithoutBuildInput[]
    createMany?: BuildPageCreateManyBuildInputEnvelope
    connect?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
  }

  export type BuildPageUncheckedCreateNestedManyWithoutBuildInput = {
    create?: XOR<BuildPageCreateWithoutBuildInput, BuildPageUncheckedCreateWithoutBuildInput> | BuildPageCreateWithoutBuildInput[] | BuildPageUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: BuildPageCreateOrConnectWithoutBuildInput | BuildPageCreateOrConnectWithoutBuildInput[]
    createMany?: BuildPageCreateManyBuildInputEnvelope
    connect?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
  }

  export type EnumBuildTypeFieldUpdateOperationsInput = {
    set?: $Enums.BuildType
  }

  export type BuildPageUpdateManyWithoutBuildNestedInput = {
    create?: XOR<BuildPageCreateWithoutBuildInput, BuildPageUncheckedCreateWithoutBuildInput> | BuildPageCreateWithoutBuildInput[] | BuildPageUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: BuildPageCreateOrConnectWithoutBuildInput | BuildPageCreateOrConnectWithoutBuildInput[]
    upsert?: BuildPageUpsertWithWhereUniqueWithoutBuildInput | BuildPageUpsertWithWhereUniqueWithoutBuildInput[]
    createMany?: BuildPageCreateManyBuildInputEnvelope
    set?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    disconnect?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    delete?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    connect?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    update?: BuildPageUpdateWithWhereUniqueWithoutBuildInput | BuildPageUpdateWithWhereUniqueWithoutBuildInput[]
    updateMany?: BuildPageUpdateManyWithWhereWithoutBuildInput | BuildPageUpdateManyWithWhereWithoutBuildInput[]
    deleteMany?: BuildPageScalarWhereInput | BuildPageScalarWhereInput[]
  }

  export type BuildPageUncheckedUpdateManyWithoutBuildNestedInput = {
    create?: XOR<BuildPageCreateWithoutBuildInput, BuildPageUncheckedCreateWithoutBuildInput> | BuildPageCreateWithoutBuildInput[] | BuildPageUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: BuildPageCreateOrConnectWithoutBuildInput | BuildPageCreateOrConnectWithoutBuildInput[]
    upsert?: BuildPageUpsertWithWhereUniqueWithoutBuildInput | BuildPageUpsertWithWhereUniqueWithoutBuildInput[]
    createMany?: BuildPageCreateManyBuildInputEnvelope
    set?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    disconnect?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    delete?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    connect?: BuildPageWhereUniqueInput | BuildPageWhereUniqueInput[]
    update?: BuildPageUpdateWithWhereUniqueWithoutBuildInput | BuildPageUpdateWithWhereUniqueWithoutBuildInput[]
    updateMany?: BuildPageUpdateManyWithWhereWithoutBuildInput | BuildPageUpdateManyWithWhereWithoutBuildInput[]
    deleteMany?: BuildPageScalarWhereInput | BuildPageScalarWhereInput[]
  }

  export type BuilderCreateNestedOneWithoutPagesInput = {
    create?: XOR<BuilderCreateWithoutPagesInput, BuilderUncheckedCreateWithoutPagesInput>
    connectOrCreate?: BuilderCreateOrConnectWithoutPagesInput
    connect?: BuilderWhereUniqueInput
  }

  export type PageCreateNestedOneWithoutBuildsInput = {
    create?: XOR<PageCreateWithoutBuildsInput, PageUncheckedCreateWithoutBuildsInput>
    connectOrCreate?: PageCreateOrConnectWithoutBuildsInput
    connect?: PageWhereUniqueInput
  }

  export type BuilderUpdateOneRequiredWithoutPagesNestedInput = {
    create?: XOR<BuilderCreateWithoutPagesInput, BuilderUncheckedCreateWithoutPagesInput>
    connectOrCreate?: BuilderCreateOrConnectWithoutPagesInput
    upsert?: BuilderUpsertWithoutPagesInput
    connect?: BuilderWhereUniqueInput
    update?: XOR<XOR<BuilderUpdateToOneWithWhereWithoutPagesInput, BuilderUpdateWithoutPagesInput>, BuilderUncheckedUpdateWithoutPagesInput>
  }

  export type PageUpdateOneRequiredWithoutBuildsNestedInput = {
    create?: XOR<PageCreateWithoutBuildsInput, PageUncheckedCreateWithoutBuildsInput>
    connectOrCreate?: PageCreateOrConnectWithoutBuildsInput
    upsert?: PageUpsertWithoutBuildsInput
    connect?: PageWhereUniqueInput
    update?: XOR<XOR<PageUpdateToOneWithWhereWithoutBuildsInput, PageUpdateWithoutBuildsInput>, PageUncheckedUpdateWithoutBuildsInput>
  }

  export type CasinoOptionCreateNestedManyWithoutCasinoInput = {
    create?: XOR<CasinoOptionCreateWithoutCasinoInput, CasinoOptionUncheckedCreateWithoutCasinoInput> | CasinoOptionCreateWithoutCasinoInput[] | CasinoOptionUncheckedCreateWithoutCasinoInput[]
    connectOrCreate?: CasinoOptionCreateOrConnectWithoutCasinoInput | CasinoOptionCreateOrConnectWithoutCasinoInput[]
    createMany?: CasinoOptionCreateManyCasinoInputEnvelope
    connect?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
  }

  export type CasinoOptionUncheckedCreateNestedManyWithoutCasinoInput = {
    create?: XOR<CasinoOptionCreateWithoutCasinoInput, CasinoOptionUncheckedCreateWithoutCasinoInput> | CasinoOptionCreateWithoutCasinoInput[] | CasinoOptionUncheckedCreateWithoutCasinoInput[]
    connectOrCreate?: CasinoOptionCreateOrConnectWithoutCasinoInput | CasinoOptionCreateOrConnectWithoutCasinoInput[]
    createMany?: CasinoOptionCreateManyCasinoInputEnvelope
    connect?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
  }

  export type CasinoOptionUpdateManyWithoutCasinoNestedInput = {
    create?: XOR<CasinoOptionCreateWithoutCasinoInput, CasinoOptionUncheckedCreateWithoutCasinoInput> | CasinoOptionCreateWithoutCasinoInput[] | CasinoOptionUncheckedCreateWithoutCasinoInput[]
    connectOrCreate?: CasinoOptionCreateOrConnectWithoutCasinoInput | CasinoOptionCreateOrConnectWithoutCasinoInput[]
    upsert?: CasinoOptionUpsertWithWhereUniqueWithoutCasinoInput | CasinoOptionUpsertWithWhereUniqueWithoutCasinoInput[]
    createMany?: CasinoOptionCreateManyCasinoInputEnvelope
    set?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    disconnect?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    delete?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    connect?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    update?: CasinoOptionUpdateWithWhereUniqueWithoutCasinoInput | CasinoOptionUpdateWithWhereUniqueWithoutCasinoInput[]
    updateMany?: CasinoOptionUpdateManyWithWhereWithoutCasinoInput | CasinoOptionUpdateManyWithWhereWithoutCasinoInput[]
    deleteMany?: CasinoOptionScalarWhereInput | CasinoOptionScalarWhereInput[]
  }

  export type CasinoOptionUncheckedUpdateManyWithoutCasinoNestedInput = {
    create?: XOR<CasinoOptionCreateWithoutCasinoInput, CasinoOptionUncheckedCreateWithoutCasinoInput> | CasinoOptionCreateWithoutCasinoInput[] | CasinoOptionUncheckedCreateWithoutCasinoInput[]
    connectOrCreate?: CasinoOptionCreateOrConnectWithoutCasinoInput | CasinoOptionCreateOrConnectWithoutCasinoInput[]
    upsert?: CasinoOptionUpsertWithWhereUniqueWithoutCasinoInput | CasinoOptionUpsertWithWhereUniqueWithoutCasinoInput[]
    createMany?: CasinoOptionCreateManyCasinoInputEnvelope
    set?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    disconnect?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    delete?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    connect?: CasinoOptionWhereUniqueInput | CasinoOptionWhereUniqueInput[]
    update?: CasinoOptionUpdateWithWhereUniqueWithoutCasinoInput | CasinoOptionUpdateWithWhereUniqueWithoutCasinoInput[]
    updateMany?: CasinoOptionUpdateManyWithWhereWithoutCasinoInput | CasinoOptionUpdateManyWithWhereWithoutCasinoInput[]
    deleteMany?: CasinoOptionScalarWhereInput | CasinoOptionScalarWhereInput[]
  }

  export type CasinoCreateNestedOneWithoutOptionsInput = {
    create?: XOR<CasinoCreateWithoutOptionsInput, CasinoUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: CasinoCreateOrConnectWithoutOptionsInput
    connect?: CasinoWhereUniqueInput
  }

  export type OptionCreateNestedOneWithoutCasino_optionsInput = {
    create?: XOR<OptionCreateWithoutCasino_optionsInput, OptionUncheckedCreateWithoutCasino_optionsInput>
    connectOrCreate?: OptionCreateOrConnectWithoutCasino_optionsInput
    connect?: OptionWhereUniqueInput
  }

  export type CasinoUpdateOneRequiredWithoutOptionsNestedInput = {
    create?: XOR<CasinoCreateWithoutOptionsInput, CasinoUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: CasinoCreateOrConnectWithoutOptionsInput
    upsert?: CasinoUpsertWithoutOptionsInput
    connect?: CasinoWhereUniqueInput
    update?: XOR<XOR<CasinoUpdateToOneWithWhereWithoutOptionsInput, CasinoUpdateWithoutOptionsInput>, CasinoUncheckedUpdateWithoutOptionsInput>
  }

  export type OptionUpdateOneRequiredWithoutCasino_optionsNestedInput = {
    create?: XOR<OptionCreateWithoutCasino_optionsInput, OptionUncheckedCreateWithoutCasino_optionsInput>
    connectOrCreate?: OptionCreateOrConnectWithoutCasino_optionsInput
    upsert?: OptionUpsertWithoutCasino_optionsInput
    connect?: OptionWhereUniqueInput
    update?: XOR<XOR<OptionUpdateToOneWithWhereWithoutCasino_optionsInput, OptionUpdateWithoutCasino_optionsInput>, OptionUncheckedUpdateWithoutCasino_optionsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumMenuTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MenuType | EnumMenuTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MenuType[]
    notIn?: $Enums.MenuType[]
    not?: NestedEnumMenuTypeFilter<$PrismaModel> | $Enums.MenuType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumMenuTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MenuType | EnumMenuTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MenuType[]
    notIn?: $Enums.MenuType[]
    not?: NestedEnumMenuTypeWithAggregatesFilter<$PrismaModel> | $Enums.MenuType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMenuTypeFilter<$PrismaModel>
    _max?: NestedEnumMenuTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumInputTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InputType | EnumInputTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InputType[]
    notIn?: $Enums.InputType[]
    not?: NestedEnumInputTypeFilter<$PrismaModel> | $Enums.InputType
  }

  export type NestedEnumInputTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InputType | EnumInputTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InputType[]
    notIn?: $Enums.InputType[]
    not?: NestedEnumInputTypeWithAggregatesFilter<$PrismaModel> | $Enums.InputType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInputTypeFilter<$PrismaModel>
    _max?: NestedEnumInputTypeFilter<$PrismaModel>
  }

  export type NestedEnumCardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CardType | EnumCardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CardType[]
    notIn?: $Enums.CardType[]
    not?: NestedEnumCardTypeFilter<$PrismaModel> | $Enums.CardType
  }

  export type NestedEnumCardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CardType | EnumCardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CardType[]
    notIn?: $Enums.CardType[]
    not?: NestedEnumCardTypeWithAggregatesFilter<$PrismaModel> | $Enums.CardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCardTypeFilter<$PrismaModel>
    _max?: NestedEnumCardTypeFilter<$PrismaModel>
  }

  export type NestedEnumOptionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OptionType | EnumOptionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OptionType[]
    notIn?: $Enums.OptionType[]
    not?: NestedEnumOptionTypeFilter<$PrismaModel> | $Enums.OptionType
  }

  export type NestedEnumOptionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OptionType | EnumOptionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OptionType[]
    notIn?: $Enums.OptionType[]
    not?: NestedEnumOptionTypeWithAggregatesFilter<$PrismaModel> | $Enums.OptionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOptionTypeFilter<$PrismaModel>
    _max?: NestedEnumOptionTypeFilter<$PrismaModel>
  }

  export type NestedEnumBuildTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BuildType | EnumBuildTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BuildType[]
    notIn?: $Enums.BuildType[]
    not?: NestedEnumBuildTypeFilter<$PrismaModel> | $Enums.BuildType
  }

  export type NestedEnumBuildTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BuildType | EnumBuildTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BuildType[]
    notIn?: $Enums.BuildType[]
    not?: NestedEnumBuildTypeWithAggregatesFilter<$PrismaModel> | $Enums.BuildType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBuildTypeFilter<$PrismaModel>
    _max?: NestedEnumBuildTypeFilter<$PrismaModel>
  }

  export type MenuCreateWithoutChildrenInput = {
    type: $Enums.MenuType
    published: boolean
    label: string
    link: string
    position?: number
    parent?: MenuCreateNestedOneWithoutChildrenInput
  }

  export type MenuUncheckedCreateWithoutChildrenInput = {
    id?: number
    type: $Enums.MenuType
    published: boolean
    label: string
    link: string
    parent_id?: number | null
    position?: number
  }

  export type MenuCreateOrConnectWithoutChildrenInput = {
    where: MenuWhereUniqueInput
    create: XOR<MenuCreateWithoutChildrenInput, MenuUncheckedCreateWithoutChildrenInput>
  }

  export type MenuCreateWithoutParentInput = {
    type: $Enums.MenuType
    published: boolean
    label: string
    link: string
    position?: number
    children?: MenuCreateNestedManyWithoutParentInput
  }

  export type MenuUncheckedCreateWithoutParentInput = {
    id?: number
    type: $Enums.MenuType
    published: boolean
    label: string
    link: string
    position?: number
    children?: MenuUncheckedCreateNestedManyWithoutParentInput
  }

  export type MenuCreateOrConnectWithoutParentInput = {
    where: MenuWhereUniqueInput
    create: XOR<MenuCreateWithoutParentInput, MenuUncheckedCreateWithoutParentInput>
  }

  export type MenuCreateManyParentInputEnvelope = {
    data: MenuCreateManyParentInput | MenuCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type MenuUpsertWithoutChildrenInput = {
    update: XOR<MenuUpdateWithoutChildrenInput, MenuUncheckedUpdateWithoutChildrenInput>
    create: XOR<MenuCreateWithoutChildrenInput, MenuUncheckedCreateWithoutChildrenInput>
    where?: MenuWhereInput
  }

  export type MenuUpdateToOneWithWhereWithoutChildrenInput = {
    where?: MenuWhereInput
    data: XOR<MenuUpdateWithoutChildrenInput, MenuUncheckedUpdateWithoutChildrenInput>
  }

  export type MenuUpdateWithoutChildrenInput = {
    type?: EnumMenuTypeFieldUpdateOperationsInput | $Enums.MenuType
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    parent?: MenuUpdateOneWithoutChildrenNestedInput
  }

  export type MenuUncheckedUpdateWithoutChildrenInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumMenuTypeFieldUpdateOperationsInput | $Enums.MenuType
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    parent_id?: NullableIntFieldUpdateOperationsInput | number | null
    position?: IntFieldUpdateOperationsInput | number
  }

  export type MenuUpsertWithWhereUniqueWithoutParentInput = {
    where: MenuWhereUniqueInput
    update: XOR<MenuUpdateWithoutParentInput, MenuUncheckedUpdateWithoutParentInput>
    create: XOR<MenuCreateWithoutParentInput, MenuUncheckedCreateWithoutParentInput>
  }

  export type MenuUpdateWithWhereUniqueWithoutParentInput = {
    where: MenuWhereUniqueInput
    data: XOR<MenuUpdateWithoutParentInput, MenuUncheckedUpdateWithoutParentInput>
  }

  export type MenuUpdateManyWithWhereWithoutParentInput = {
    where: MenuScalarWhereInput
    data: XOR<MenuUpdateManyMutationInput, MenuUncheckedUpdateManyWithoutParentInput>
  }

  export type MenuScalarWhereInput = {
    AND?: MenuScalarWhereInput | MenuScalarWhereInput[]
    OR?: MenuScalarWhereInput[]
    NOT?: MenuScalarWhereInput | MenuScalarWhereInput[]
    id?: IntFilter<"Menu"> | number
    type?: EnumMenuTypeFilter<"Menu"> | $Enums.MenuType
    published?: BoolFilter<"Menu"> | boolean
    label?: StringFilter<"Menu"> | string
    link?: StringFilter<"Menu"> | string
    parent_id?: IntNullableFilter<"Menu"> | number | null
    position?: IntFilter<"Menu"> | number
  }

  export type CardCreateWithoutCategory_cardInput = {
    published: boolean
    type: $Enums.CardType
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
    icon_card_images?: CardIconImageCreateNestedManyWithoutCardInput
    images?: CardImageCreateNestedManyWithoutCardInput
    options?: CardOptionCreateNestedManyWithoutCardInput
    faqs?: FaqCardCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutCategory_cardInput = {
    id?: number
    published: boolean
    type: $Enums.CardType
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
    icon_card_images?: CardIconImageUncheckedCreateNestedManyWithoutCardInput
    images?: CardImageUncheckedCreateNestedManyWithoutCardInput
    options?: CardOptionUncheckedCreateNestedManyWithoutCardInput
    faqs?: FaqCardUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutCategory_cardInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutCategory_cardInput, CardUncheckedCreateWithoutCategory_cardInput>
  }

  export type CardCreateManyCategory_cardInputEnvelope = {
    data: CardCreateManyCategory_cardInput | CardCreateManyCategory_cardInput[]
    skipDuplicates?: boolean
  }

  export type CardUpsertWithWhereUniqueWithoutCategory_cardInput = {
    where: CardWhereUniqueInput
    update: XOR<CardUpdateWithoutCategory_cardInput, CardUncheckedUpdateWithoutCategory_cardInput>
    create: XOR<CardCreateWithoutCategory_cardInput, CardUncheckedCreateWithoutCategory_cardInput>
  }

  export type CardUpdateWithWhereUniqueWithoutCategory_cardInput = {
    where: CardWhereUniqueInput
    data: XOR<CardUpdateWithoutCategory_cardInput, CardUncheckedUpdateWithoutCategory_cardInput>
  }

  export type CardUpdateManyWithWhereWithoutCategory_cardInput = {
    where: CardScalarWhereInput
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyWithoutCategory_cardInput>
  }

  export type CardScalarWhereInput = {
    AND?: CardScalarWhereInput | CardScalarWhereInput[]
    OR?: CardScalarWhereInput[]
    NOT?: CardScalarWhereInput | CardScalarWhereInput[]
    id?: IntFilter<"Card"> | number
    published?: BoolFilter<"Card"> | boolean
    type?: EnumCardTypeFilter<"Card"> | $Enums.CardType
    category_card_id?: IntNullableFilter<"Card"> | number | null
    label?: StringFilter<"Card"> | string
    sub_label?: StringNullableFilter<"Card"> | string | null
    referal_key?: StringFilter<"Card"> | string
    referal_link?: StringNullableFilter<"Card"> | string | null
    play_with_real_money?: StringNullableFilter<"Card"> | string | null
    play_for_free?: StringNullableFilter<"Card"> | string | null
    terms_and_condition?: StringNullableFilter<"Card"> | string | null
  }

  export type CategoryCardCreateWithoutCardsInput = {
    published?: boolean
    label: string
  }

  export type CategoryCardUncheckedCreateWithoutCardsInput = {
    id?: number
    published?: boolean
    label: string
  }

  export type CategoryCardCreateOrConnectWithoutCardsInput = {
    where: CategoryCardWhereUniqueInput
    create: XOR<CategoryCardCreateWithoutCardsInput, CategoryCardUncheckedCreateWithoutCardsInput>
  }

  export type CardIconImageCreateWithoutCardInput = {
    icon_card_image: IconCardImageCreateNestedOneWithoutCardsInput
  }

  export type CardIconImageUncheckedCreateWithoutCardInput = {
    id?: number
    icon_card_image_id: number
  }

  export type CardIconImageCreateOrConnectWithoutCardInput = {
    where: CardIconImageWhereUniqueInput
    create: XOR<CardIconImageCreateWithoutCardInput, CardIconImageUncheckedCreateWithoutCardInput>
  }

  export type CardIconImageCreateManyCardInputEnvelope = {
    data: CardIconImageCreateManyCardInput | CardIconImageCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type CardImageCreateWithoutCardInput = {
    src: string
  }

  export type CardImageUncheckedCreateWithoutCardInput = {
    id?: number
    src: string
  }

  export type CardImageCreateOrConnectWithoutCardInput = {
    where: CardImageWhereUniqueInput
    create: XOR<CardImageCreateWithoutCardInput, CardImageUncheckedCreateWithoutCardInput>
  }

  export type CardImageCreateManyCardInputEnvelope = {
    data: CardImageCreateManyCardInput | CardImageCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type CardOptionCreateWithoutCardInput = {
    value: string
    entity: OptionCreateNestedOneWithoutCard_optionsInput
  }

  export type CardOptionUncheckedCreateWithoutCardInput = {
    id?: number
    option_id: number
    value: string
  }

  export type CardOptionCreateOrConnectWithoutCardInput = {
    where: CardOptionWhereUniqueInput
    create: XOR<CardOptionCreateWithoutCardInput, CardOptionUncheckedCreateWithoutCardInput>
  }

  export type CardOptionCreateManyCardInputEnvelope = {
    data: CardOptionCreateManyCardInput | CardOptionCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type FaqCardCreateWithoutCardInput = {
    position?: number | null
    faq: FaqCreateNestedOneWithoutCardsInput
  }

  export type FaqCardUncheckedCreateWithoutCardInput = {
    id?: number
    faq_id: number
    position?: number | null
  }

  export type FaqCardCreateOrConnectWithoutCardInput = {
    where: FaqCardWhereUniqueInput
    create: XOR<FaqCardCreateWithoutCardInput, FaqCardUncheckedCreateWithoutCardInput>
  }

  export type FaqCardCreateManyCardInputEnvelope = {
    data: FaqCardCreateManyCardInput | FaqCardCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCardUpsertWithoutCardsInput = {
    update: XOR<CategoryCardUpdateWithoutCardsInput, CategoryCardUncheckedUpdateWithoutCardsInput>
    create: XOR<CategoryCardCreateWithoutCardsInput, CategoryCardUncheckedCreateWithoutCardsInput>
    where?: CategoryCardWhereInput
  }

  export type CategoryCardUpdateToOneWithWhereWithoutCardsInput = {
    where?: CategoryCardWhereInput
    data: XOR<CategoryCardUpdateWithoutCardsInput, CategoryCardUncheckedUpdateWithoutCardsInput>
  }

  export type CategoryCardUpdateWithoutCardsInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCardUncheckedUpdateWithoutCardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
  }

  export type CardIconImageUpsertWithWhereUniqueWithoutCardInput = {
    where: CardIconImageWhereUniqueInput
    update: XOR<CardIconImageUpdateWithoutCardInput, CardIconImageUncheckedUpdateWithoutCardInput>
    create: XOR<CardIconImageCreateWithoutCardInput, CardIconImageUncheckedCreateWithoutCardInput>
  }

  export type CardIconImageUpdateWithWhereUniqueWithoutCardInput = {
    where: CardIconImageWhereUniqueInput
    data: XOR<CardIconImageUpdateWithoutCardInput, CardIconImageUncheckedUpdateWithoutCardInput>
  }

  export type CardIconImageUpdateManyWithWhereWithoutCardInput = {
    where: CardIconImageScalarWhereInput
    data: XOR<CardIconImageUpdateManyMutationInput, CardIconImageUncheckedUpdateManyWithoutCardInput>
  }

  export type CardIconImageScalarWhereInput = {
    AND?: CardIconImageScalarWhereInput | CardIconImageScalarWhereInput[]
    OR?: CardIconImageScalarWhereInput[]
    NOT?: CardIconImageScalarWhereInput | CardIconImageScalarWhereInput[]
    id?: IntFilter<"CardIconImage"> | number
    card_id?: IntFilter<"CardIconImage"> | number
    icon_card_image_id?: IntFilter<"CardIconImage"> | number
  }

  export type CardImageUpsertWithWhereUniqueWithoutCardInput = {
    where: CardImageWhereUniqueInput
    update: XOR<CardImageUpdateWithoutCardInput, CardImageUncheckedUpdateWithoutCardInput>
    create: XOR<CardImageCreateWithoutCardInput, CardImageUncheckedCreateWithoutCardInput>
  }

  export type CardImageUpdateWithWhereUniqueWithoutCardInput = {
    where: CardImageWhereUniqueInput
    data: XOR<CardImageUpdateWithoutCardInput, CardImageUncheckedUpdateWithoutCardInput>
  }

  export type CardImageUpdateManyWithWhereWithoutCardInput = {
    where: CardImageScalarWhereInput
    data: XOR<CardImageUpdateManyMutationInput, CardImageUncheckedUpdateManyWithoutCardInput>
  }

  export type CardImageScalarWhereInput = {
    AND?: CardImageScalarWhereInput | CardImageScalarWhereInput[]
    OR?: CardImageScalarWhereInput[]
    NOT?: CardImageScalarWhereInput | CardImageScalarWhereInput[]
    id?: IntFilter<"CardImage"> | number
    card_id?: IntFilter<"CardImage"> | number
    src?: StringFilter<"CardImage"> | string
  }

  export type CardOptionUpsertWithWhereUniqueWithoutCardInput = {
    where: CardOptionWhereUniqueInput
    update: XOR<CardOptionUpdateWithoutCardInput, CardOptionUncheckedUpdateWithoutCardInput>
    create: XOR<CardOptionCreateWithoutCardInput, CardOptionUncheckedCreateWithoutCardInput>
  }

  export type CardOptionUpdateWithWhereUniqueWithoutCardInput = {
    where: CardOptionWhereUniqueInput
    data: XOR<CardOptionUpdateWithoutCardInput, CardOptionUncheckedUpdateWithoutCardInput>
  }

  export type CardOptionUpdateManyWithWhereWithoutCardInput = {
    where: CardOptionScalarWhereInput
    data: XOR<CardOptionUpdateManyMutationInput, CardOptionUncheckedUpdateManyWithoutCardInput>
  }

  export type CardOptionScalarWhereInput = {
    AND?: CardOptionScalarWhereInput | CardOptionScalarWhereInput[]
    OR?: CardOptionScalarWhereInput[]
    NOT?: CardOptionScalarWhereInput | CardOptionScalarWhereInput[]
    id?: IntFilter<"CardOption"> | number
    option_id?: IntFilter<"CardOption"> | number
    card_id?: IntFilter<"CardOption"> | number
    value?: StringFilter<"CardOption"> | string
  }

  export type FaqCardUpsertWithWhereUniqueWithoutCardInput = {
    where: FaqCardWhereUniqueInput
    update: XOR<FaqCardUpdateWithoutCardInput, FaqCardUncheckedUpdateWithoutCardInput>
    create: XOR<FaqCardCreateWithoutCardInput, FaqCardUncheckedCreateWithoutCardInput>
  }

  export type FaqCardUpdateWithWhereUniqueWithoutCardInput = {
    where: FaqCardWhereUniqueInput
    data: XOR<FaqCardUpdateWithoutCardInput, FaqCardUncheckedUpdateWithoutCardInput>
  }

  export type FaqCardUpdateManyWithWhereWithoutCardInput = {
    where: FaqCardScalarWhereInput
    data: XOR<FaqCardUpdateManyMutationInput, FaqCardUncheckedUpdateManyWithoutCardInput>
  }

  export type FaqCardScalarWhereInput = {
    AND?: FaqCardScalarWhereInput | FaqCardScalarWhereInput[]
    OR?: FaqCardScalarWhereInput[]
    NOT?: FaqCardScalarWhereInput | FaqCardScalarWhereInput[]
    id?: IntFilter<"FaqCard"> | number
    faq_id?: IntFilter<"FaqCard"> | number
    card_id?: IntFilter<"FaqCard"> | number
    position?: IntNullableFilter<"FaqCard"> | number | null
  }

  export type FaqCardCreateWithoutFaqInput = {
    position?: number | null
    card: CardCreateNestedOneWithoutFaqsInput
  }

  export type FaqCardUncheckedCreateWithoutFaqInput = {
    id?: number
    card_id: number
    position?: number | null
  }

  export type FaqCardCreateOrConnectWithoutFaqInput = {
    where: FaqCardWhereUniqueInput
    create: XOR<FaqCardCreateWithoutFaqInput, FaqCardUncheckedCreateWithoutFaqInput>
  }

  export type FaqCardCreateManyFaqInputEnvelope = {
    data: FaqCardCreateManyFaqInput | FaqCardCreateManyFaqInput[]
    skipDuplicates?: boolean
  }

  export type FaqCardUpsertWithWhereUniqueWithoutFaqInput = {
    where: FaqCardWhereUniqueInput
    update: XOR<FaqCardUpdateWithoutFaqInput, FaqCardUncheckedUpdateWithoutFaqInput>
    create: XOR<FaqCardCreateWithoutFaqInput, FaqCardUncheckedCreateWithoutFaqInput>
  }

  export type FaqCardUpdateWithWhereUniqueWithoutFaqInput = {
    where: FaqCardWhereUniqueInput
    data: XOR<FaqCardUpdateWithoutFaqInput, FaqCardUncheckedUpdateWithoutFaqInput>
  }

  export type FaqCardUpdateManyWithWhereWithoutFaqInput = {
    where: FaqCardScalarWhereInput
    data: XOR<FaqCardUpdateManyMutationInput, FaqCardUncheckedUpdateManyWithoutFaqInput>
  }

  export type CardCreateWithoutFaqsInput = {
    published: boolean
    type: $Enums.CardType
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
    category_card?: CategoryCardCreateNestedOneWithoutCardsInput
    icon_card_images?: CardIconImageCreateNestedManyWithoutCardInput
    images?: CardImageCreateNestedManyWithoutCardInput
    options?: CardOptionCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutFaqsInput = {
    id?: number
    published: boolean
    type: $Enums.CardType
    category_card_id?: number | null
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
    icon_card_images?: CardIconImageUncheckedCreateNestedManyWithoutCardInput
    images?: CardImageUncheckedCreateNestedManyWithoutCardInput
    options?: CardOptionUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutFaqsInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutFaqsInput, CardUncheckedCreateWithoutFaqsInput>
  }

  export type FaqCreateWithoutCardsInput = {
    published?: boolean
    question: string
    answer: string
    position?: number | null
  }

  export type FaqUncheckedCreateWithoutCardsInput = {
    id?: number
    published?: boolean
    question: string
    answer: string
    position?: number | null
  }

  export type FaqCreateOrConnectWithoutCardsInput = {
    where: FaqWhereUniqueInput
    create: XOR<FaqCreateWithoutCardsInput, FaqUncheckedCreateWithoutCardsInput>
  }

  export type CardUpsertWithoutFaqsInput = {
    update: XOR<CardUpdateWithoutFaqsInput, CardUncheckedUpdateWithoutFaqsInput>
    create: XOR<CardCreateWithoutFaqsInput, CardUncheckedCreateWithoutFaqsInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutFaqsInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutFaqsInput, CardUncheckedUpdateWithoutFaqsInput>
  }

  export type CardUpdateWithoutFaqsInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
    category_card?: CategoryCardUpdateOneWithoutCardsNestedInput
    icon_card_images?: CardIconImageUpdateManyWithoutCardNestedInput
    images?: CardImageUpdateManyWithoutCardNestedInput
    options?: CardOptionUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutFaqsInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    category_card_id?: NullableIntFieldUpdateOperationsInput | number | null
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
    icon_card_images?: CardIconImageUncheckedUpdateManyWithoutCardNestedInput
    images?: CardImageUncheckedUpdateManyWithoutCardNestedInput
    options?: CardOptionUncheckedUpdateManyWithoutCardNestedInput
  }

  export type FaqUpsertWithoutCardsInput = {
    update: XOR<FaqUpdateWithoutCardsInput, FaqUncheckedUpdateWithoutCardsInput>
    create: XOR<FaqCreateWithoutCardsInput, FaqUncheckedCreateWithoutCardsInput>
    where?: FaqWhereInput
  }

  export type FaqUpdateToOneWithWhereWithoutCardsInput = {
    where?: FaqWhereInput
    data: XOR<FaqUpdateWithoutCardsInput, FaqUncheckedUpdateWithoutCardsInput>
  }

  export type FaqUpdateWithoutCardsInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FaqUncheckedUpdateWithoutCardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CardOptionCreateWithoutEntityInput = {
    value: string
    card: CardCreateNestedOneWithoutOptionsInput
  }

  export type CardOptionUncheckedCreateWithoutEntityInput = {
    id?: number
    card_id: number
    value: string
  }

  export type CardOptionCreateOrConnectWithoutEntityInput = {
    where: CardOptionWhereUniqueInput
    create: XOR<CardOptionCreateWithoutEntityInput, CardOptionUncheckedCreateWithoutEntityInput>
  }

  export type CardOptionCreateManyEntityInputEnvelope = {
    data: CardOptionCreateManyEntityInput | CardOptionCreateManyEntityInput[]
    skipDuplicates?: boolean
  }

  export type CasinoOptionCreateWithoutEntityInput = {
    value: string
    casino: CasinoCreateNestedOneWithoutOptionsInput
  }

  export type CasinoOptionUncheckedCreateWithoutEntityInput = {
    id?: number
    casino_id: number
    value: string
  }

  export type CasinoOptionCreateOrConnectWithoutEntityInput = {
    where: CasinoOptionWhereUniqueInput
    create: XOR<CasinoOptionCreateWithoutEntityInput, CasinoOptionUncheckedCreateWithoutEntityInput>
  }

  export type CasinoOptionCreateManyEntityInputEnvelope = {
    data: CasinoOptionCreateManyEntityInput | CasinoOptionCreateManyEntityInput[]
    skipDuplicates?: boolean
  }

  export type CardOptionUpsertWithWhereUniqueWithoutEntityInput = {
    where: CardOptionWhereUniqueInput
    update: XOR<CardOptionUpdateWithoutEntityInput, CardOptionUncheckedUpdateWithoutEntityInput>
    create: XOR<CardOptionCreateWithoutEntityInput, CardOptionUncheckedCreateWithoutEntityInput>
  }

  export type CardOptionUpdateWithWhereUniqueWithoutEntityInput = {
    where: CardOptionWhereUniqueInput
    data: XOR<CardOptionUpdateWithoutEntityInput, CardOptionUncheckedUpdateWithoutEntityInput>
  }

  export type CardOptionUpdateManyWithWhereWithoutEntityInput = {
    where: CardOptionScalarWhereInput
    data: XOR<CardOptionUpdateManyMutationInput, CardOptionUncheckedUpdateManyWithoutEntityInput>
  }

  export type CasinoOptionUpsertWithWhereUniqueWithoutEntityInput = {
    where: CasinoOptionWhereUniqueInput
    update: XOR<CasinoOptionUpdateWithoutEntityInput, CasinoOptionUncheckedUpdateWithoutEntityInput>
    create: XOR<CasinoOptionCreateWithoutEntityInput, CasinoOptionUncheckedCreateWithoutEntityInput>
  }

  export type CasinoOptionUpdateWithWhereUniqueWithoutEntityInput = {
    where: CasinoOptionWhereUniqueInput
    data: XOR<CasinoOptionUpdateWithoutEntityInput, CasinoOptionUncheckedUpdateWithoutEntityInput>
  }

  export type CasinoOptionUpdateManyWithWhereWithoutEntityInput = {
    where: CasinoOptionScalarWhereInput
    data: XOR<CasinoOptionUpdateManyMutationInput, CasinoOptionUncheckedUpdateManyWithoutEntityInput>
  }

  export type CasinoOptionScalarWhereInput = {
    AND?: CasinoOptionScalarWhereInput | CasinoOptionScalarWhereInput[]
    OR?: CasinoOptionScalarWhereInput[]
    NOT?: CasinoOptionScalarWhereInput | CasinoOptionScalarWhereInput[]
    id?: IntFilter<"CasinoOption"> | number
    option_id?: IntFilter<"CasinoOption"> | number
    casino_id?: IntFilter<"CasinoOption"> | number
    value?: StringFilter<"CasinoOption"> | string
  }

  export type CardCreateWithoutOptionsInput = {
    published: boolean
    type: $Enums.CardType
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
    category_card?: CategoryCardCreateNestedOneWithoutCardsInput
    icon_card_images?: CardIconImageCreateNestedManyWithoutCardInput
    images?: CardImageCreateNestedManyWithoutCardInput
    faqs?: FaqCardCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutOptionsInput = {
    id?: number
    published: boolean
    type: $Enums.CardType
    category_card_id?: number | null
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
    icon_card_images?: CardIconImageUncheckedCreateNestedManyWithoutCardInput
    images?: CardImageUncheckedCreateNestedManyWithoutCardInput
    faqs?: FaqCardUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutOptionsInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutOptionsInput, CardUncheckedCreateWithoutOptionsInput>
  }

  export type OptionCreateWithoutCard_optionsInput = {
    published: boolean
    use_for_filter: boolean
    input_type: $Enums.InputType
    type?: $Enums.OptionType
    label: string
    tooltip?: string | null
    hash_tag?: string | null
    value: string
    position?: number | null
    casino_options?: CasinoOptionCreateNestedManyWithoutEntityInput
  }

  export type OptionUncheckedCreateWithoutCard_optionsInput = {
    id?: number
    published: boolean
    use_for_filter: boolean
    input_type: $Enums.InputType
    type?: $Enums.OptionType
    label: string
    tooltip?: string | null
    hash_tag?: string | null
    value: string
    position?: number | null
    casino_options?: CasinoOptionUncheckedCreateNestedManyWithoutEntityInput
  }

  export type OptionCreateOrConnectWithoutCard_optionsInput = {
    where: OptionWhereUniqueInput
    create: XOR<OptionCreateWithoutCard_optionsInput, OptionUncheckedCreateWithoutCard_optionsInput>
  }

  export type CardUpsertWithoutOptionsInput = {
    update: XOR<CardUpdateWithoutOptionsInput, CardUncheckedUpdateWithoutOptionsInput>
    create: XOR<CardCreateWithoutOptionsInput, CardUncheckedCreateWithoutOptionsInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutOptionsInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutOptionsInput, CardUncheckedUpdateWithoutOptionsInput>
  }

  export type CardUpdateWithoutOptionsInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
    category_card?: CategoryCardUpdateOneWithoutCardsNestedInput
    icon_card_images?: CardIconImageUpdateManyWithoutCardNestedInput
    images?: CardImageUpdateManyWithoutCardNestedInput
    faqs?: FaqCardUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutOptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    category_card_id?: NullableIntFieldUpdateOperationsInput | number | null
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
    icon_card_images?: CardIconImageUncheckedUpdateManyWithoutCardNestedInput
    images?: CardImageUncheckedUpdateManyWithoutCardNestedInput
    faqs?: FaqCardUncheckedUpdateManyWithoutCardNestedInput
  }

  export type OptionUpsertWithoutCard_optionsInput = {
    update: XOR<OptionUpdateWithoutCard_optionsInput, OptionUncheckedUpdateWithoutCard_optionsInput>
    create: XOR<OptionCreateWithoutCard_optionsInput, OptionUncheckedCreateWithoutCard_optionsInput>
    where?: OptionWhereInput
  }

  export type OptionUpdateToOneWithWhereWithoutCard_optionsInput = {
    where?: OptionWhereInput
    data: XOR<OptionUpdateWithoutCard_optionsInput, OptionUncheckedUpdateWithoutCard_optionsInput>
  }

  export type OptionUpdateWithoutCard_optionsInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    use_for_filter?: BoolFieldUpdateOperationsInput | boolean
    input_type?: EnumInputTypeFieldUpdateOperationsInput | $Enums.InputType
    type?: EnumOptionTypeFieldUpdateOperationsInput | $Enums.OptionType
    label?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    hash_tag?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
    casino_options?: CasinoOptionUpdateManyWithoutEntityNestedInput
  }

  export type OptionUncheckedUpdateWithoutCard_optionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    use_for_filter?: BoolFieldUpdateOperationsInput | boolean
    input_type?: EnumInputTypeFieldUpdateOperationsInput | $Enums.InputType
    type?: EnumOptionTypeFieldUpdateOperationsInput | $Enums.OptionType
    label?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    hash_tag?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
    casino_options?: CasinoOptionUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type IconCardImageCreateWithoutIcon_cardInput = {
    alt: string
    image: string
    position?: number | null
    cards?: CardIconImageCreateNestedManyWithoutIcon_card_imageInput
  }

  export type IconCardImageUncheckedCreateWithoutIcon_cardInput = {
    id?: number
    alt: string
    image: string
    position?: number | null
    cards?: CardIconImageUncheckedCreateNestedManyWithoutIcon_card_imageInput
  }

  export type IconCardImageCreateOrConnectWithoutIcon_cardInput = {
    where: IconCardImageWhereUniqueInput
    create: XOR<IconCardImageCreateWithoutIcon_cardInput, IconCardImageUncheckedCreateWithoutIcon_cardInput>
  }

  export type IconCardImageCreateManyIcon_cardInputEnvelope = {
    data: IconCardImageCreateManyIcon_cardInput | IconCardImageCreateManyIcon_cardInput[]
    skipDuplicates?: boolean
  }

  export type IconCardImageUpsertWithWhereUniqueWithoutIcon_cardInput = {
    where: IconCardImageWhereUniqueInput
    update: XOR<IconCardImageUpdateWithoutIcon_cardInput, IconCardImageUncheckedUpdateWithoutIcon_cardInput>
    create: XOR<IconCardImageCreateWithoutIcon_cardInput, IconCardImageUncheckedCreateWithoutIcon_cardInput>
  }

  export type IconCardImageUpdateWithWhereUniqueWithoutIcon_cardInput = {
    where: IconCardImageWhereUniqueInput
    data: XOR<IconCardImageUpdateWithoutIcon_cardInput, IconCardImageUncheckedUpdateWithoutIcon_cardInput>
  }

  export type IconCardImageUpdateManyWithWhereWithoutIcon_cardInput = {
    where: IconCardImageScalarWhereInput
    data: XOR<IconCardImageUpdateManyMutationInput, IconCardImageUncheckedUpdateManyWithoutIcon_cardInput>
  }

  export type IconCardImageScalarWhereInput = {
    AND?: IconCardImageScalarWhereInput | IconCardImageScalarWhereInput[]
    OR?: IconCardImageScalarWhereInput[]
    NOT?: IconCardImageScalarWhereInput | IconCardImageScalarWhereInput[]
    id?: IntFilter<"IconCardImage"> | number
    icon_card_id?: IntFilter<"IconCardImage"> | number
    alt?: StringFilter<"IconCardImage"> | string
    image?: StringFilter<"IconCardImage"> | string
    position?: IntNullableFilter<"IconCardImage"> | number | null
  }

  export type IconCardCreateWithoutImagesInput = {
    published?: boolean
    label: string
  }

  export type IconCardUncheckedCreateWithoutImagesInput = {
    id?: number
    published?: boolean
    label: string
  }

  export type IconCardCreateOrConnectWithoutImagesInput = {
    where: IconCardWhereUniqueInput
    create: XOR<IconCardCreateWithoutImagesInput, IconCardUncheckedCreateWithoutImagesInput>
  }

  export type CardIconImageCreateWithoutIcon_card_imageInput = {
    card: CardCreateNestedOneWithoutIcon_card_imagesInput
  }

  export type CardIconImageUncheckedCreateWithoutIcon_card_imageInput = {
    id?: number
    card_id: number
  }

  export type CardIconImageCreateOrConnectWithoutIcon_card_imageInput = {
    where: CardIconImageWhereUniqueInput
    create: XOR<CardIconImageCreateWithoutIcon_card_imageInput, CardIconImageUncheckedCreateWithoutIcon_card_imageInput>
  }

  export type CardIconImageCreateManyIcon_card_imageInputEnvelope = {
    data: CardIconImageCreateManyIcon_card_imageInput | CardIconImageCreateManyIcon_card_imageInput[]
    skipDuplicates?: boolean
  }

  export type IconCardUpsertWithoutImagesInput = {
    update: XOR<IconCardUpdateWithoutImagesInput, IconCardUncheckedUpdateWithoutImagesInput>
    create: XOR<IconCardCreateWithoutImagesInput, IconCardUncheckedCreateWithoutImagesInput>
    where?: IconCardWhereInput
  }

  export type IconCardUpdateToOneWithWhereWithoutImagesInput = {
    where?: IconCardWhereInput
    data: XOR<IconCardUpdateWithoutImagesInput, IconCardUncheckedUpdateWithoutImagesInput>
  }

  export type IconCardUpdateWithoutImagesInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
  }

  export type IconCardUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
  }

  export type CardIconImageUpsertWithWhereUniqueWithoutIcon_card_imageInput = {
    where: CardIconImageWhereUniqueInput
    update: XOR<CardIconImageUpdateWithoutIcon_card_imageInput, CardIconImageUncheckedUpdateWithoutIcon_card_imageInput>
    create: XOR<CardIconImageCreateWithoutIcon_card_imageInput, CardIconImageUncheckedCreateWithoutIcon_card_imageInput>
  }

  export type CardIconImageUpdateWithWhereUniqueWithoutIcon_card_imageInput = {
    where: CardIconImageWhereUniqueInput
    data: XOR<CardIconImageUpdateWithoutIcon_card_imageInput, CardIconImageUncheckedUpdateWithoutIcon_card_imageInput>
  }

  export type CardIconImageUpdateManyWithWhereWithoutIcon_card_imageInput = {
    where: CardIconImageScalarWhereInput
    data: XOR<CardIconImageUpdateManyMutationInput, CardIconImageUncheckedUpdateManyWithoutIcon_card_imageInput>
  }

  export type CardCreateWithoutIcon_card_imagesInput = {
    published: boolean
    type: $Enums.CardType
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
    category_card?: CategoryCardCreateNestedOneWithoutCardsInput
    images?: CardImageCreateNestedManyWithoutCardInput
    options?: CardOptionCreateNestedManyWithoutCardInput
    faqs?: FaqCardCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutIcon_card_imagesInput = {
    id?: number
    published: boolean
    type: $Enums.CardType
    category_card_id?: number | null
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
    images?: CardImageUncheckedCreateNestedManyWithoutCardInput
    options?: CardOptionUncheckedCreateNestedManyWithoutCardInput
    faqs?: FaqCardUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutIcon_card_imagesInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutIcon_card_imagesInput, CardUncheckedCreateWithoutIcon_card_imagesInput>
  }

  export type IconCardImageCreateWithoutCardsInput = {
    alt: string
    image: string
    position?: number | null
    icon_card: IconCardCreateNestedOneWithoutImagesInput
  }

  export type IconCardImageUncheckedCreateWithoutCardsInput = {
    id?: number
    icon_card_id: number
    alt: string
    image: string
    position?: number | null
  }

  export type IconCardImageCreateOrConnectWithoutCardsInput = {
    where: IconCardImageWhereUniqueInput
    create: XOR<IconCardImageCreateWithoutCardsInput, IconCardImageUncheckedCreateWithoutCardsInput>
  }

  export type CardUpsertWithoutIcon_card_imagesInput = {
    update: XOR<CardUpdateWithoutIcon_card_imagesInput, CardUncheckedUpdateWithoutIcon_card_imagesInput>
    create: XOR<CardCreateWithoutIcon_card_imagesInput, CardUncheckedCreateWithoutIcon_card_imagesInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutIcon_card_imagesInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutIcon_card_imagesInput, CardUncheckedUpdateWithoutIcon_card_imagesInput>
  }

  export type CardUpdateWithoutIcon_card_imagesInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
    category_card?: CategoryCardUpdateOneWithoutCardsNestedInput
    images?: CardImageUpdateManyWithoutCardNestedInput
    options?: CardOptionUpdateManyWithoutCardNestedInput
    faqs?: FaqCardUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutIcon_card_imagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    category_card_id?: NullableIntFieldUpdateOperationsInput | number | null
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
    images?: CardImageUncheckedUpdateManyWithoutCardNestedInput
    options?: CardOptionUncheckedUpdateManyWithoutCardNestedInput
    faqs?: FaqCardUncheckedUpdateManyWithoutCardNestedInput
  }

  export type IconCardImageUpsertWithoutCardsInput = {
    update: XOR<IconCardImageUpdateWithoutCardsInput, IconCardImageUncheckedUpdateWithoutCardsInput>
    create: XOR<IconCardImageCreateWithoutCardsInput, IconCardImageUncheckedCreateWithoutCardsInput>
    where?: IconCardImageWhereInput
  }

  export type IconCardImageUpdateToOneWithWhereWithoutCardsInput = {
    where?: IconCardImageWhereInput
    data: XOR<IconCardImageUpdateWithoutCardsInput, IconCardImageUncheckedUpdateWithoutCardsInput>
  }

  export type IconCardImageUpdateWithoutCardsInput = {
    alt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
    icon_card?: IconCardUpdateOneRequiredWithoutImagesNestedInput
  }

  export type IconCardImageUncheckedUpdateWithoutCardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    icon_card_id?: IntFieldUpdateOperationsInput | number
    alt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CardCreateWithoutImagesInput = {
    published: boolean
    type: $Enums.CardType
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
    category_card?: CategoryCardCreateNestedOneWithoutCardsInput
    icon_card_images?: CardIconImageCreateNestedManyWithoutCardInput
    options?: CardOptionCreateNestedManyWithoutCardInput
    faqs?: FaqCardCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutImagesInput = {
    id?: number
    published: boolean
    type: $Enums.CardType
    category_card_id?: number | null
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
    icon_card_images?: CardIconImageUncheckedCreateNestedManyWithoutCardInput
    options?: CardOptionUncheckedCreateNestedManyWithoutCardInput
    faqs?: FaqCardUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutImagesInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutImagesInput, CardUncheckedCreateWithoutImagesInput>
  }

  export type CardUpsertWithoutImagesInput = {
    update: XOR<CardUpdateWithoutImagesInput, CardUncheckedUpdateWithoutImagesInput>
    create: XOR<CardCreateWithoutImagesInput, CardUncheckedCreateWithoutImagesInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutImagesInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutImagesInput, CardUncheckedUpdateWithoutImagesInput>
  }

  export type CardUpdateWithoutImagesInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
    category_card?: CategoryCardUpdateOneWithoutCardsNestedInput
    icon_card_images?: CardIconImageUpdateManyWithoutCardNestedInput
    options?: CardOptionUpdateManyWithoutCardNestedInput
    faqs?: FaqCardUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    category_card_id?: NullableIntFieldUpdateOperationsInput | number | null
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
    icon_card_images?: CardIconImageUncheckedUpdateManyWithoutCardNestedInput
    options?: CardOptionUncheckedUpdateManyWithoutCardNestedInput
    faqs?: FaqCardUncheckedUpdateManyWithoutCardNestedInput
  }

  export type BuildPageCreateWithoutPageInput = {
    position: number
    field_values: string
    card_type?: string | null
    build: BuilderCreateNestedOneWithoutPagesInput
  }

  export type BuildPageUncheckedCreateWithoutPageInput = {
    id?: number
    build_id: number
    position: number
    field_values: string
    card_type?: string | null
  }

  export type BuildPageCreateOrConnectWithoutPageInput = {
    where: BuildPageWhereUniqueInput
    create: XOR<BuildPageCreateWithoutPageInput, BuildPageUncheckedCreateWithoutPageInput>
  }

  export type BuildPageCreateManyPageInputEnvelope = {
    data: BuildPageCreateManyPageInput | BuildPageCreateManyPageInput[]
    skipDuplicates?: boolean
  }

  export type BuildPageUpsertWithWhereUniqueWithoutPageInput = {
    where: BuildPageWhereUniqueInput
    update: XOR<BuildPageUpdateWithoutPageInput, BuildPageUncheckedUpdateWithoutPageInput>
    create: XOR<BuildPageCreateWithoutPageInput, BuildPageUncheckedCreateWithoutPageInput>
  }

  export type BuildPageUpdateWithWhereUniqueWithoutPageInput = {
    where: BuildPageWhereUniqueInput
    data: XOR<BuildPageUpdateWithoutPageInput, BuildPageUncheckedUpdateWithoutPageInput>
  }

  export type BuildPageUpdateManyWithWhereWithoutPageInput = {
    where: BuildPageScalarWhereInput
    data: XOR<BuildPageUpdateManyMutationInput, BuildPageUncheckedUpdateManyWithoutPageInput>
  }

  export type BuildPageScalarWhereInput = {
    AND?: BuildPageScalarWhereInput | BuildPageScalarWhereInput[]
    OR?: BuildPageScalarWhereInput[]
    NOT?: BuildPageScalarWhereInput | BuildPageScalarWhereInput[]
    id?: IntFilter<"BuildPage"> | number
    build_id?: IntFilter<"BuildPage"> | number
    page_id?: IntFilter<"BuildPage"> | number
    position?: IntFilter<"BuildPage"> | number
    field_values?: StringFilter<"BuildPage"> | string
    card_type?: StringNullableFilter<"BuildPage"> | string | null
  }

  export type BuildPageCreateWithoutBuildInput = {
    position: number
    field_values: string
    card_type?: string | null
    page: PageCreateNestedOneWithoutBuildsInput
  }

  export type BuildPageUncheckedCreateWithoutBuildInput = {
    id?: number
    page_id: number
    position: number
    field_values: string
    card_type?: string | null
  }

  export type BuildPageCreateOrConnectWithoutBuildInput = {
    where: BuildPageWhereUniqueInput
    create: XOR<BuildPageCreateWithoutBuildInput, BuildPageUncheckedCreateWithoutBuildInput>
  }

  export type BuildPageCreateManyBuildInputEnvelope = {
    data: BuildPageCreateManyBuildInput | BuildPageCreateManyBuildInput[]
    skipDuplicates?: boolean
  }

  export type BuildPageUpsertWithWhereUniqueWithoutBuildInput = {
    where: BuildPageWhereUniqueInput
    update: XOR<BuildPageUpdateWithoutBuildInput, BuildPageUncheckedUpdateWithoutBuildInput>
    create: XOR<BuildPageCreateWithoutBuildInput, BuildPageUncheckedCreateWithoutBuildInput>
  }

  export type BuildPageUpdateWithWhereUniqueWithoutBuildInput = {
    where: BuildPageWhereUniqueInput
    data: XOR<BuildPageUpdateWithoutBuildInput, BuildPageUncheckedUpdateWithoutBuildInput>
  }

  export type BuildPageUpdateManyWithWhereWithoutBuildInput = {
    where: BuildPageScalarWhereInput
    data: XOR<BuildPageUpdateManyMutationInput, BuildPageUncheckedUpdateManyWithoutBuildInput>
  }

  export type BuilderCreateWithoutPagesInput = {
    build_type?: $Enums.BuildType
    label: string
  }

  export type BuilderUncheckedCreateWithoutPagesInput = {
    id?: number
    build_type?: $Enums.BuildType
    label: string
  }

  export type BuilderCreateOrConnectWithoutPagesInput = {
    where: BuilderWhereUniqueInput
    create: XOR<BuilderCreateWithoutPagesInput, BuilderUncheckedCreateWithoutPagesInput>
  }

  export type PageCreateWithoutBuildsInput = {
    published?: boolean
    label: string
    slug: string
    meta_title: string
    meta_description: string
    meta_keywords: string
    meta_noindex_nofollow?: boolean
  }

  export type PageUncheckedCreateWithoutBuildsInput = {
    id?: number
    published?: boolean
    label: string
    slug: string
    meta_title: string
    meta_description: string
    meta_keywords: string
    meta_noindex_nofollow?: boolean
  }

  export type PageCreateOrConnectWithoutBuildsInput = {
    where: PageWhereUniqueInput
    create: XOR<PageCreateWithoutBuildsInput, PageUncheckedCreateWithoutBuildsInput>
  }

  export type BuilderUpsertWithoutPagesInput = {
    update: XOR<BuilderUpdateWithoutPagesInput, BuilderUncheckedUpdateWithoutPagesInput>
    create: XOR<BuilderCreateWithoutPagesInput, BuilderUncheckedCreateWithoutPagesInput>
    where?: BuilderWhereInput
  }

  export type BuilderUpdateToOneWithWhereWithoutPagesInput = {
    where?: BuilderWhereInput
    data: XOR<BuilderUpdateWithoutPagesInput, BuilderUncheckedUpdateWithoutPagesInput>
  }

  export type BuilderUpdateWithoutPagesInput = {
    build_type?: EnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType
    label?: StringFieldUpdateOperationsInput | string
  }

  export type BuilderUncheckedUpdateWithoutPagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    build_type?: EnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType
    label?: StringFieldUpdateOperationsInput | string
  }

  export type PageUpsertWithoutBuildsInput = {
    update: XOR<PageUpdateWithoutBuildsInput, PageUncheckedUpdateWithoutBuildsInput>
    create: XOR<PageCreateWithoutBuildsInput, PageUncheckedCreateWithoutBuildsInput>
    where?: PageWhereInput
  }

  export type PageUpdateToOneWithWhereWithoutBuildsInput = {
    where?: PageWhereInput
    data: XOR<PageUpdateWithoutBuildsInput, PageUncheckedUpdateWithoutBuildsInput>
  }

  export type PageUpdateWithoutBuildsInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    meta_title?: StringFieldUpdateOperationsInput | string
    meta_description?: StringFieldUpdateOperationsInput | string
    meta_keywords?: StringFieldUpdateOperationsInput | string
    meta_noindex_nofollow?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PageUncheckedUpdateWithoutBuildsInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    meta_title?: StringFieldUpdateOperationsInput | string
    meta_description?: StringFieldUpdateOperationsInput | string
    meta_keywords?: StringFieldUpdateOperationsInput | string
    meta_noindex_nofollow?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CasinoOptionCreateWithoutCasinoInput = {
    value: string
    entity: OptionCreateNestedOneWithoutCasino_optionsInput
  }

  export type CasinoOptionUncheckedCreateWithoutCasinoInput = {
    id?: number
    option_id: number
    value: string
  }

  export type CasinoOptionCreateOrConnectWithoutCasinoInput = {
    where: CasinoOptionWhereUniqueInput
    create: XOR<CasinoOptionCreateWithoutCasinoInput, CasinoOptionUncheckedCreateWithoutCasinoInput>
  }

  export type CasinoOptionCreateManyCasinoInputEnvelope = {
    data: CasinoOptionCreateManyCasinoInput | CasinoOptionCreateManyCasinoInput[]
    skipDuplicates?: boolean
  }

  export type CasinoOptionUpsertWithWhereUniqueWithoutCasinoInput = {
    where: CasinoOptionWhereUniqueInput
    update: XOR<CasinoOptionUpdateWithoutCasinoInput, CasinoOptionUncheckedUpdateWithoutCasinoInput>
    create: XOR<CasinoOptionCreateWithoutCasinoInput, CasinoOptionUncheckedCreateWithoutCasinoInput>
  }

  export type CasinoOptionUpdateWithWhereUniqueWithoutCasinoInput = {
    where: CasinoOptionWhereUniqueInput
    data: XOR<CasinoOptionUpdateWithoutCasinoInput, CasinoOptionUncheckedUpdateWithoutCasinoInput>
  }

  export type CasinoOptionUpdateManyWithWhereWithoutCasinoInput = {
    where: CasinoOptionScalarWhereInput
    data: XOR<CasinoOptionUpdateManyMutationInput, CasinoOptionUncheckedUpdateManyWithoutCasinoInput>
  }

  export type CasinoCreateWithoutOptionsInput = {
    published?: boolean
    name: string
    tooltip?: string | null
    image: string
    referral_key: string
    referral_link?: string | null
    full_review_label?: string | null
    full_review_link?: string | null
  }

  export type CasinoUncheckedCreateWithoutOptionsInput = {
    id?: number
    published?: boolean
    name: string
    tooltip?: string | null
    image: string
    referral_key: string
    referral_link?: string | null
    full_review_label?: string | null
    full_review_link?: string | null
  }

  export type CasinoCreateOrConnectWithoutOptionsInput = {
    where: CasinoWhereUniqueInput
    create: XOR<CasinoCreateWithoutOptionsInput, CasinoUncheckedCreateWithoutOptionsInput>
  }

  export type OptionCreateWithoutCasino_optionsInput = {
    published: boolean
    use_for_filter: boolean
    input_type: $Enums.InputType
    type?: $Enums.OptionType
    label: string
    tooltip?: string | null
    hash_tag?: string | null
    value: string
    position?: number | null
    card_options?: CardOptionCreateNestedManyWithoutEntityInput
  }

  export type OptionUncheckedCreateWithoutCasino_optionsInput = {
    id?: number
    published: boolean
    use_for_filter: boolean
    input_type: $Enums.InputType
    type?: $Enums.OptionType
    label: string
    tooltip?: string | null
    hash_tag?: string | null
    value: string
    position?: number | null
    card_options?: CardOptionUncheckedCreateNestedManyWithoutEntityInput
  }

  export type OptionCreateOrConnectWithoutCasino_optionsInput = {
    where: OptionWhereUniqueInput
    create: XOR<OptionCreateWithoutCasino_optionsInput, OptionUncheckedCreateWithoutCasino_optionsInput>
  }

  export type CasinoUpsertWithoutOptionsInput = {
    update: XOR<CasinoUpdateWithoutOptionsInput, CasinoUncheckedUpdateWithoutOptionsInput>
    create: XOR<CasinoCreateWithoutOptionsInput, CasinoUncheckedCreateWithoutOptionsInput>
    where?: CasinoWhereInput
  }

  export type CasinoUpdateToOneWithWhereWithoutOptionsInput = {
    where?: CasinoWhereInput
    data: XOR<CasinoUpdateWithoutOptionsInput, CasinoUncheckedUpdateWithoutOptionsInput>
  }

  export type CasinoUpdateWithoutOptionsInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    referral_key?: StringFieldUpdateOperationsInput | string
    referral_link?: NullableStringFieldUpdateOperationsInput | string | null
    full_review_label?: NullableStringFieldUpdateOperationsInput | string | null
    full_review_link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CasinoUncheckedUpdateWithoutOptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    referral_key?: StringFieldUpdateOperationsInput | string
    referral_link?: NullableStringFieldUpdateOperationsInput | string | null
    full_review_label?: NullableStringFieldUpdateOperationsInput | string | null
    full_review_link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OptionUpsertWithoutCasino_optionsInput = {
    update: XOR<OptionUpdateWithoutCasino_optionsInput, OptionUncheckedUpdateWithoutCasino_optionsInput>
    create: XOR<OptionCreateWithoutCasino_optionsInput, OptionUncheckedCreateWithoutCasino_optionsInput>
    where?: OptionWhereInput
  }

  export type OptionUpdateToOneWithWhereWithoutCasino_optionsInput = {
    where?: OptionWhereInput
    data: XOR<OptionUpdateWithoutCasino_optionsInput, OptionUncheckedUpdateWithoutCasino_optionsInput>
  }

  export type OptionUpdateWithoutCasino_optionsInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    use_for_filter?: BoolFieldUpdateOperationsInput | boolean
    input_type?: EnumInputTypeFieldUpdateOperationsInput | $Enums.InputType
    type?: EnumOptionTypeFieldUpdateOperationsInput | $Enums.OptionType
    label?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    hash_tag?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
    card_options?: CardOptionUpdateManyWithoutEntityNestedInput
  }

  export type OptionUncheckedUpdateWithoutCasino_optionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    use_for_filter?: BoolFieldUpdateOperationsInput | boolean
    input_type?: EnumInputTypeFieldUpdateOperationsInput | $Enums.InputType
    type?: EnumOptionTypeFieldUpdateOperationsInput | $Enums.OptionType
    label?: StringFieldUpdateOperationsInput | string
    tooltip?: NullableStringFieldUpdateOperationsInput | string | null
    hash_tag?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
    card_options?: CardOptionUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type MenuCreateManyParentInput = {
    id?: number
    type: $Enums.MenuType
    published: boolean
    label: string
    link: string
    position?: number
  }

  export type MenuUpdateWithoutParentInput = {
    type?: EnumMenuTypeFieldUpdateOperationsInput | $Enums.MenuType
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    children?: MenuUpdateManyWithoutParentNestedInput
  }

  export type MenuUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumMenuTypeFieldUpdateOperationsInput | $Enums.MenuType
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    children?: MenuUncheckedUpdateManyWithoutParentNestedInput
  }

  export type MenuUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumMenuTypeFieldUpdateOperationsInput | $Enums.MenuType
    published?: BoolFieldUpdateOperationsInput | boolean
    label?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type CardCreateManyCategory_cardInput = {
    id?: number
    published: boolean
    type: $Enums.CardType
    label: string
    sub_label?: string | null
    referal_key: string
    referal_link?: string | null
    play_with_real_money?: string | null
    play_for_free?: string | null
    terms_and_condition?: string | null
  }

  export type CardUpdateWithoutCategory_cardInput = {
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
    icon_card_images?: CardIconImageUpdateManyWithoutCardNestedInput
    images?: CardImageUpdateManyWithoutCardNestedInput
    options?: CardOptionUpdateManyWithoutCardNestedInput
    faqs?: FaqCardUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutCategory_cardInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
    icon_card_images?: CardIconImageUncheckedUpdateManyWithoutCardNestedInput
    images?: CardImageUncheckedUpdateManyWithoutCardNestedInput
    options?: CardOptionUncheckedUpdateManyWithoutCardNestedInput
    faqs?: FaqCardUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateManyWithoutCategory_cardInput = {
    id?: IntFieldUpdateOperationsInput | number
    published?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    label?: StringFieldUpdateOperationsInput | string
    sub_label?: NullableStringFieldUpdateOperationsInput | string | null
    referal_key?: StringFieldUpdateOperationsInput | string
    referal_link?: NullableStringFieldUpdateOperationsInput | string | null
    play_with_real_money?: NullableStringFieldUpdateOperationsInput | string | null
    play_for_free?: NullableStringFieldUpdateOperationsInput | string | null
    terms_and_condition?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardIconImageCreateManyCardInput = {
    id?: number
    icon_card_image_id: number
  }

  export type CardImageCreateManyCardInput = {
    id?: number
    src: string
  }

  export type CardOptionCreateManyCardInput = {
    id?: number
    option_id: number
    value: string
  }

  export type FaqCardCreateManyCardInput = {
    id?: number
    faq_id: number
    position?: number | null
  }

  export type CardIconImageUpdateWithoutCardInput = {
    icon_card_image?: IconCardImageUpdateOneRequiredWithoutCardsNestedInput
  }

  export type CardIconImageUncheckedUpdateWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    icon_card_image_id?: IntFieldUpdateOperationsInput | number
  }

  export type CardIconImageUncheckedUpdateManyWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    icon_card_image_id?: IntFieldUpdateOperationsInput | number
  }

  export type CardImageUpdateWithoutCardInput = {
    src?: StringFieldUpdateOperationsInput | string
  }

  export type CardImageUncheckedUpdateWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    src?: StringFieldUpdateOperationsInput | string
  }

  export type CardImageUncheckedUpdateManyWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    src?: StringFieldUpdateOperationsInput | string
  }

  export type CardOptionUpdateWithoutCardInput = {
    value?: StringFieldUpdateOperationsInput | string
    entity?: OptionUpdateOneRequiredWithoutCard_optionsNestedInput
  }

  export type CardOptionUncheckedUpdateWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    option_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type CardOptionUncheckedUpdateManyWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    option_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type FaqCardUpdateWithoutCardInput = {
    position?: NullableIntFieldUpdateOperationsInput | number | null
    faq?: FaqUpdateOneRequiredWithoutCardsNestedInput
  }

  export type FaqCardUncheckedUpdateWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    faq_id?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FaqCardUncheckedUpdateManyWithoutCardInput = {
    id?: IntFieldUpdateOperationsInput | number
    faq_id?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FaqCardCreateManyFaqInput = {
    id?: number
    card_id: number
    position?: number | null
  }

  export type FaqCardUpdateWithoutFaqInput = {
    position?: NullableIntFieldUpdateOperationsInput | number | null
    card?: CardUpdateOneRequiredWithoutFaqsNestedInput
  }

  export type FaqCardUncheckedUpdateWithoutFaqInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FaqCardUncheckedUpdateManyWithoutFaqInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CardOptionCreateManyEntityInput = {
    id?: number
    card_id: number
    value: string
  }

  export type CasinoOptionCreateManyEntityInput = {
    id?: number
    casino_id: number
    value: string
  }

  export type CardOptionUpdateWithoutEntityInput = {
    value?: StringFieldUpdateOperationsInput | string
    card?: CardUpdateOneRequiredWithoutOptionsNestedInput
  }

  export type CardOptionUncheckedUpdateWithoutEntityInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type CardOptionUncheckedUpdateManyWithoutEntityInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type CasinoOptionUpdateWithoutEntityInput = {
    value?: StringFieldUpdateOperationsInput | string
    casino?: CasinoUpdateOneRequiredWithoutOptionsNestedInput
  }

  export type CasinoOptionUncheckedUpdateWithoutEntityInput = {
    id?: IntFieldUpdateOperationsInput | number
    casino_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type CasinoOptionUncheckedUpdateManyWithoutEntityInput = {
    id?: IntFieldUpdateOperationsInput | number
    casino_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type IconCardImageCreateManyIcon_cardInput = {
    id?: number
    alt: string
    image: string
    position?: number | null
  }

  export type IconCardImageUpdateWithoutIcon_cardInput = {
    alt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
    cards?: CardIconImageUpdateManyWithoutIcon_card_imageNestedInput
  }

  export type IconCardImageUncheckedUpdateWithoutIcon_cardInput = {
    id?: IntFieldUpdateOperationsInput | number
    alt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
    cards?: CardIconImageUncheckedUpdateManyWithoutIcon_card_imageNestedInput
  }

  export type IconCardImageUncheckedUpdateManyWithoutIcon_cardInput = {
    id?: IntFieldUpdateOperationsInput | number
    alt?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CardIconImageCreateManyIcon_card_imageInput = {
    id?: number
    card_id: number
  }

  export type CardIconImageUpdateWithoutIcon_card_imageInput = {
    card?: CardUpdateOneRequiredWithoutIcon_card_imagesNestedInput
  }

  export type CardIconImageUncheckedUpdateWithoutIcon_card_imageInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
  }

  export type CardIconImageUncheckedUpdateManyWithoutIcon_card_imageInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
  }

  export type BuildPageCreateManyPageInput = {
    id?: number
    build_id: number
    position: number
    field_values: string
    card_type?: string | null
  }

  export type BuildPageUpdateWithoutPageInput = {
    position?: IntFieldUpdateOperationsInput | number
    field_values?: StringFieldUpdateOperationsInput | string
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
    build?: BuilderUpdateOneRequiredWithoutPagesNestedInput
  }

  export type BuildPageUncheckedUpdateWithoutPageInput = {
    id?: IntFieldUpdateOperationsInput | number
    build_id?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    field_values?: StringFieldUpdateOperationsInput | string
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BuildPageUncheckedUpdateManyWithoutPageInput = {
    id?: IntFieldUpdateOperationsInput | number
    build_id?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    field_values?: StringFieldUpdateOperationsInput | string
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BuildPageCreateManyBuildInput = {
    id?: number
    page_id: number
    position: number
    field_values: string
    card_type?: string | null
  }

  export type BuildPageUpdateWithoutBuildInput = {
    position?: IntFieldUpdateOperationsInput | number
    field_values?: StringFieldUpdateOperationsInput | string
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
    page?: PageUpdateOneRequiredWithoutBuildsNestedInput
  }

  export type BuildPageUncheckedUpdateWithoutBuildInput = {
    id?: IntFieldUpdateOperationsInput | number
    page_id?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    field_values?: StringFieldUpdateOperationsInput | string
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BuildPageUncheckedUpdateManyWithoutBuildInput = {
    id?: IntFieldUpdateOperationsInput | number
    page_id?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    field_values?: StringFieldUpdateOperationsInput | string
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CasinoOptionCreateManyCasinoInput = {
    id?: number
    option_id: number
    value: string
  }

  export type CasinoOptionUpdateWithoutCasinoInput = {
    value?: StringFieldUpdateOperationsInput | string
    entity?: OptionUpdateOneRequiredWithoutCasino_optionsNestedInput
  }

  export type CasinoOptionUncheckedUpdateWithoutCasinoInput = {
    id?: IntFieldUpdateOperationsInput | number
    option_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type CasinoOptionUncheckedUpdateManyWithoutCasinoInput = {
    id?: IntFieldUpdateOperationsInput | number
    option_id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}